-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_F04 : STD_LOGIC_VECTOR (11 downto 0) := "111100000100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln41_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln41_reg_799_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal i_0_reg_208 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln41_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op20 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op108 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_225_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_data_0_V_2_fu_377_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_0_V_2_reg_808 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_1_V_2_fu_515_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_1_V_2_reg_813 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_2_V_2_fu_653_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_2_V_2_reg_818 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_3_V_2_fu_791_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_3_V_2_reg_823 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln718_fu_271_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln718_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_295_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_309_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln_fu_253_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln415_fu_313_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_76_fu_319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_281_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_339_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln416_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_fu_361_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_369_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln718_4_fu_409_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln718_4_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_401_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_4_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_433_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_1_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_4_fu_447_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln708_s_fu_391_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln415_4_fu_451_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_80_fu_457_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_78_fu_419_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_4_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_1_fu_477_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln416_4_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_4_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_4_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_4_fu_499_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_507_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln718_5_fu_547_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln718_5_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_5_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_571_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_2_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_5_fu_585_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln708_3_fu_529_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln415_5_fu_589_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_84_fu_595_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_557_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_5_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_2_fu_615_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln416_5_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_5_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_5_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_5_fu_637_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_645_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln718_6_fu_685_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln718_6_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_677_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_6_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_709_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_3_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_6_fu_723_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln708_4_fu_667_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln415_6_fu_727_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_88_fu_733_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_695_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_6_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_3_fu_753_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln416_6_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_6_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_6_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_6_fu_775_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_3_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_783_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_208 <= i_fu_225_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_208 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln41_reg_799 <= icmp_ln41_fu_219_p2;
                icmp_ln41_reg_799_pp0_iter1_reg <= icmp_ln41_reg_799;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_reg_799 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_0_V_2_reg_808 <= tmp_data_0_V_2_fu_377_p3;
                tmp_data_1_V_2_reg_813 <= tmp_data_1_V_2_fu_515_p3;
                tmp_data_2_V_2_reg_818 <= tmp_data_2_V_2_fu_653_p3;
                tmp_data_3_V_2_reg_823 <= tmp_data_3_V_2_fu_791_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln41_fu_219_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln41_fu_219_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln41_fu_219_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln415_4_fu_451_p2 <= std_logic_vector(unsigned(zext_ln415_4_fu_447_p1) + unsigned(trunc_ln708_s_fu_391_p4));
    add_ln415_5_fu_589_p2 <= std_logic_vector(unsigned(zext_ln415_5_fu_585_p1) + unsigned(trunc_ln708_3_fu_529_p4));
    add_ln415_6_fu_727_p2 <= std_logic_vector(unsigned(zext_ln415_6_fu_723_p1) + unsigned(trunc_ln708_4_fu_667_p4));
    add_ln415_fu_313_p2 <= std_logic_vector(unsigned(zext_ln415_fu_309_p1) + unsigned(trunc_ln_fu_253_p4));
    and_ln415_1_fu_441_p2 <= (tmp_79_fu_433_p3 and or_ln412_4_fu_427_p2);
    and_ln415_2_fu_579_p2 <= (tmp_83_fu_571_p3 and or_ln412_5_fu_565_p2);
    and_ln415_3_fu_717_p2 <= (tmp_87_fu_709_p3 and or_ln412_6_fu_703_p2);
    and_ln415_fu_303_p2 <= (tmp_75_fu_295_p3 and or_ln412_fu_289_p2);
    and_ln416_4_fu_471_p2 <= (xor_ln416_4_fu_465_p2 and tmp_78_fu_419_p3);
    and_ln416_5_fu_609_p2 <= (xor_ln416_5_fu_603_p2 and tmp_82_fu_557_p3);
    and_ln416_6_fu_747_p2 <= (xor_ln416_6_fu_741_p2 and tmp_86_fu_695_p3);
    and_ln416_fu_333_p2 <= (xor_ln416_fu_327_p2 and tmp_74_fu_281_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln41_reg_799, ap_enable_reg_pp0_iter2, icmp_ln41_reg_799_pp0_iter1_reg, io_acc_block_signal_op20, io_acc_block_signal_op108)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln41_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (io_acc_block_signal_op108 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln41_reg_799 = ap_const_lv1_0) and (io_acc_block_signal_op20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln41_reg_799, ap_enable_reg_pp0_iter2, icmp_ln41_reg_799_pp0_iter1_reg, io_acc_block_signal_op20, io_acc_block_signal_op108)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln41_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (io_acc_block_signal_op108 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln41_reg_799 = ap_const_lv1_0) and (io_acc_block_signal_op20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln41_reg_799, ap_enable_reg_pp0_iter2, icmp_ln41_reg_799_pp0_iter1_reg, io_acc_block_signal_op20, io_acc_block_signal_op108)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln41_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (io_acc_block_signal_op108 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln41_reg_799 = ap_const_lv1_0) and (io_acc_block_signal_op20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln41_reg_799, io_acc_block_signal_op20)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln41_reg_799 = ap_const_lv1_0) and (io_acc_block_signal_op20 = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(icmp_ln41_reg_799_pp0_iter1_reg, io_acc_block_signal_op108)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((icmp_ln41_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (io_acc_block_signal_op108 = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln41_fu_219_p2)
    begin
        if ((icmp_ln41_fu_219_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_799)
    begin
        if (((icmp_ln41_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_799, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_799 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_799)
    begin
        if (((icmp_ln41_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_799, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_799 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_799)
    begin
        if (((icmp_ln41_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_799, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_799 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_799)
    begin
        if (((icmp_ln41_reg_799 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_799, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_799 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_225_p2 <= std_logic_vector(unsigned(i_0_reg_208) + unsigned(ap_const_lv12_1));
    icmp_ln1494_1_fu_385_p2 <= "1" when (signed(data_V_data_1_V_dout) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_2_fu_523_p2 <= "1" when (signed(data_V_data_2_V_dout) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_3_fu_661_p2 <= "1" when (signed(data_V_data_3_V_dout) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_fu_247_p2 <= "1" when (signed(data_V_data_0_V_dout) > signed(ap_const_lv16_0)) else "0";
    icmp_ln41_fu_219_p2 <= "1" when (i_0_reg_208 = ap_const_lv12_F04) else "0";
    icmp_ln718_4_fu_413_p2 <= "0" when (trunc_ln718_4_fu_409_p1 = ap_const_lv3_0) else "1";
    icmp_ln718_5_fu_551_p2 <= "0" when (trunc_ln718_5_fu_547_p1 = ap_const_lv3_0) else "1";
    icmp_ln718_6_fu_689_p2 <= "0" when (trunc_ln718_6_fu_685_p1 = ap_const_lv3_0) else "1";
    icmp_ln718_fu_275_p2 <= "0" when (trunc_ln718_fu_271_p1 = ap_const_lv3_0) else "1";
    icmp_ln768_4_fu_493_p2 <= "1" when (p_Result_16_1_fu_477_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_5_fu_631_p2 <= "1" when (p_Result_16_2_fu_615_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_6_fu_769_p2 <= "1" when (p_Result_16_3_fu_753_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_fu_355_p2 <= "1" when (p_Result_s_fu_339_p4 = ap_const_lv6_0) else "0";
    icmp_ln879_4_fu_487_p2 <= "1" when (p_Result_16_1_fu_477_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_5_fu_625_p2 <= "1" when (p_Result_16_2_fu_615_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_6_fu_763_p2 <= "1" when (p_Result_16_3_fu_753_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_fu_349_p2 <= "1" when (p_Result_s_fu_339_p4 = ap_const_lv6_3F) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op108 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op20 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);
    or_ln412_4_fu_427_p2 <= (tmp_77_fu_401_p3 or icmp_ln718_4_fu_413_p2);
    or_ln412_5_fu_565_p2 <= (tmp_81_fu_539_p3 or icmp_ln718_5_fu_551_p2);
    or_ln412_6_fu_703_p2 <= (tmp_85_fu_677_p3 or icmp_ln718_6_fu_689_p2);
    or_ln412_fu_289_p2 <= (tmp_73_fu_263_p3 or icmp_ln718_fu_275_p2);
    p_Result_16_1_fu_477_p4 <= data_V_data_1_V_dout(15 downto 10);
    p_Result_16_2_fu_615_p4 <= data_V_data_2_V_dout(15 downto 10);
    p_Result_16_3_fu_753_p4 <= data_V_data_3_V_dout(15 downto 10);
    p_Result_s_fu_339_p4 <= data_V_data_0_V_dout(15 downto 10);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln41_reg_799_pp0_iter1_reg)
    begin
        if (((icmp_ln41_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_2_reg_808;

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln41_reg_799_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln41_reg_799_pp0_iter1_reg)
    begin
        if (((icmp_ln41_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_2_reg_813;

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln41_reg_799_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln41_reg_799_pp0_iter1_reg)
    begin
        if (((icmp_ln41_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_2_reg_818;

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln41_reg_799_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln41_reg_799_pp0_iter1_reg)
    begin
        if (((icmp_ln41_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_2_reg_823;

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln41_reg_799_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_799_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln340_1_fu_507_p3 <= 
        add_ln415_4_fu_451_p2 when (select_ln777_4_fu_499_p3(0) = '1') else 
        ap_const_lv6_3F;
    select_ln340_2_fu_645_p3 <= 
        add_ln415_5_fu_589_p2 when (select_ln777_5_fu_637_p3(0) = '1') else 
        ap_const_lv6_3F;
    select_ln340_3_fu_783_p3 <= 
        add_ln415_6_fu_727_p2 when (select_ln777_6_fu_775_p3(0) = '1') else 
        ap_const_lv6_3F;
    select_ln340_fu_369_p3 <= 
        add_ln415_fu_313_p2 when (select_ln777_fu_361_p3(0) = '1') else 
        ap_const_lv6_3F;
    select_ln777_4_fu_499_p3 <= 
        icmp_ln879_4_fu_487_p2 when (and_ln416_4_fu_471_p2(0) = '1') else 
        icmp_ln768_4_fu_493_p2;
    select_ln777_5_fu_637_p3 <= 
        icmp_ln879_5_fu_625_p2 when (and_ln416_5_fu_609_p2(0) = '1') else 
        icmp_ln768_5_fu_631_p2;
    select_ln777_6_fu_775_p3 <= 
        icmp_ln879_6_fu_763_p2 when (and_ln416_6_fu_747_p2(0) = '1') else 
        icmp_ln768_6_fu_769_p2;
    select_ln777_fu_361_p3 <= 
        icmp_ln879_fu_349_p2 when (and_ln416_fu_333_p2(0) = '1') else 
        icmp_ln768_fu_355_p2;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_73_fu_263_p3 <= data_V_data_0_V_dout(4 downto 4);
    tmp_74_fu_281_p3 <= data_V_data_0_V_dout(9 downto 9);
    tmp_75_fu_295_p3 <= data_V_data_0_V_dout(3 downto 3);
    tmp_76_fu_319_p3 <= add_ln415_fu_313_p2(5 downto 5);
    tmp_77_fu_401_p3 <= data_V_data_1_V_dout(4 downto 4);
    tmp_78_fu_419_p3 <= data_V_data_1_V_dout(9 downto 9);
    tmp_79_fu_433_p3 <= data_V_data_1_V_dout(3 downto 3);
    tmp_80_fu_457_p3 <= add_ln415_4_fu_451_p2(5 downto 5);
    tmp_81_fu_539_p3 <= data_V_data_2_V_dout(4 downto 4);
    tmp_82_fu_557_p3 <= data_V_data_2_V_dout(9 downto 9);
    tmp_83_fu_571_p3 <= data_V_data_2_V_dout(3 downto 3);
    tmp_84_fu_595_p3 <= add_ln415_5_fu_589_p2(5 downto 5);
    tmp_85_fu_677_p3 <= data_V_data_3_V_dout(4 downto 4);
    tmp_86_fu_695_p3 <= data_V_data_3_V_dout(9 downto 9);
    tmp_87_fu_709_p3 <= data_V_data_3_V_dout(3 downto 3);
    tmp_88_fu_733_p3 <= add_ln415_6_fu_727_p2(5 downto 5);
    tmp_data_0_V_2_fu_377_p3 <= 
        select_ln340_fu_369_p3 when (icmp_ln1494_fu_247_p2(0) = '1') else 
        ap_const_lv6_0;
    tmp_data_1_V_2_fu_515_p3 <= 
        select_ln340_1_fu_507_p3 when (icmp_ln1494_1_fu_385_p2(0) = '1') else 
        ap_const_lv6_0;
    tmp_data_2_V_2_fu_653_p3 <= 
        select_ln340_2_fu_645_p3 when (icmp_ln1494_2_fu_523_p2(0) = '1') else 
        ap_const_lv6_0;
    tmp_data_3_V_2_fu_791_p3 <= 
        select_ln340_3_fu_783_p3 when (icmp_ln1494_3_fu_661_p2(0) = '1') else 
        ap_const_lv6_0;
    trunc_ln708_3_fu_529_p4 <= data_V_data_2_V_dout(9 downto 4);
    trunc_ln708_4_fu_667_p4 <= data_V_data_3_V_dout(9 downto 4);
    trunc_ln708_s_fu_391_p4 <= data_V_data_1_V_dout(9 downto 4);
    trunc_ln718_4_fu_409_p1 <= data_V_data_1_V_dout(3 - 1 downto 0);
    trunc_ln718_5_fu_547_p1 <= data_V_data_2_V_dout(3 - 1 downto 0);
    trunc_ln718_6_fu_685_p1 <= data_V_data_3_V_dout(3 - 1 downto 0);
    trunc_ln718_fu_271_p1 <= data_V_data_0_V_dout(3 - 1 downto 0);
    trunc_ln_fu_253_p4 <= data_V_data_0_V_dout(9 downto 4);
    xor_ln416_4_fu_465_p2 <= (tmp_80_fu_457_p3 xor ap_const_lv1_1);
    xor_ln416_5_fu_603_p2 <= (tmp_84_fu_595_p3 xor ap_const_lv1_1);
    xor_ln416_6_fu_741_p2 <= (tmp_88_fu_733_p3 xor ap_const_lv1_1);
    xor_ln416_fu_327_p2 <= (tmp_76_fu_319_p3 xor ap_const_lv1_1);
    zext_ln415_4_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_1_fu_441_p2),6));
    zext_ln415_5_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_2_fu_579_p2),6));
    zext_ln415_6_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_3_fu_717_p2),6));
    zext_ln415_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_fu_303_p2),6));
end behav;
