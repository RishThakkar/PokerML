-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_349 : STD_LOGIC_VECTOR (9 downto 0) := "1101001001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln41_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln41_reg_673_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal i_0_reg_114 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln41_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op21 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal io_acc_block_signal_op109 : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln41_reg_673_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_131_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_data_0_V_reg_682 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_reg_691 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_reg_700 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_reg_709 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln718_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_reg_718 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_1_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_1_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_1_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_1_reg_743 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_2_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_2_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_reg_753 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_2_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_2_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_3_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln718_3_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_reg_768 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_3_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_3_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_0_V_1_fu_371_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_0_V_1_reg_778 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_1_V_1_fu_469_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_1_V_1_reg_783 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_2_V_1_fu_567_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_2_V_1_reg_788 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_3_V_1_fu_665_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_3_V_1_reg_793 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln718_fu_153_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_s_fu_163_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln718_1_fu_185_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_10_1_fu_195_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln718_2_fu_217_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_10_2_fu_227_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln718_3_fu_249_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_10_3_fu_259_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_57_fu_295_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_314_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_327_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln_fu_286_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln415_fu_331_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_60_fu_337_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_302_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_fu_357_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_363_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_61_fu_393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_1_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_1_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_1_fu_425_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln708_s_fu_384_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln415_1_fu_429_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_64_fu_435_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_400_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_1_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_1_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_1_fu_455_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_461_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_65_fu_491_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_2_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_2_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_2_fu_523_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln708_1_fu_482_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln415_2_fu_527_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_68_fu_533_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_2_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_2_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_2_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_559_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_69_fu_589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_3_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_608_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_3_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_3_fu_621_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln708_2_fu_580_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln415_3_fu_625_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_72_fu_631_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_3_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_3_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_3_fu_651_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_3_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_657_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_114 <= i_fu_131_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_114 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln41_reg_673 <= icmp_ln41_fu_125_p2;
                icmp_ln41_reg_673_pp0_iter1_reg <= icmp_ln41_reg_673;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln41_reg_673_pp0_iter2_reg <= icmp_ln41_reg_673_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_reg_673 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln718_1_reg_733 <= icmp_ln718_1_fu_189_p2;
                icmp_ln718_2_reg_748 <= icmp_ln718_2_fu_221_p2;
                icmp_ln718_3_reg_763 <= icmp_ln718_3_fu_253_p2;
                icmp_ln718_reg_718 <= icmp_ln718_fu_157_p2;
                icmp_ln768_1_reg_743 <= icmp_ln768_1_fu_211_p2;
                icmp_ln768_2_reg_758 <= icmp_ln768_2_fu_243_p2;
                icmp_ln768_3_reg_773 <= icmp_ln768_3_fu_275_p2;
                icmp_ln768_reg_728 <= icmp_ln768_fu_179_p2;
                icmp_ln879_1_reg_738 <= icmp_ln879_1_fu_205_p2;
                icmp_ln879_2_reg_753 <= icmp_ln879_2_fu_237_p2;
                icmp_ln879_3_reg_768 <= icmp_ln879_3_fu_269_p2;
                icmp_ln879_reg_723 <= icmp_ln879_fu_173_p2;
                tmp_data_0_V_reg_682 <= data_V_data_0_V_dout;
                tmp_data_1_V_reg_691 <= data_V_data_1_V_dout;
                tmp_data_2_V_reg_700 <= data_V_data_2_V_dout;
                tmp_data_3_V_reg_709 <= data_V_data_3_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_reg_673_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_0_V_1_reg_778 <= tmp_data_0_V_1_fu_371_p3;
                tmp_data_1_V_1_reg_783 <= tmp_data_1_V_1_fu_469_p3;
                tmp_data_2_V_1_reg_788 <= tmp_data_2_V_1_fu_567_p3;
                tmp_data_3_V_1_reg_793 <= tmp_data_3_V_1_fu_665_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln41_fu_125_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln41_fu_125_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln41_fu_125_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln415_1_fu_429_p2 <= std_logic_vector(unsigned(zext_ln415_1_fu_425_p1) + unsigned(trunc_ln708_s_fu_384_p4));
    add_ln415_2_fu_527_p2 <= std_logic_vector(unsigned(zext_ln415_2_fu_523_p1) + unsigned(trunc_ln708_1_fu_482_p4));
    add_ln415_3_fu_625_p2 <= std_logic_vector(unsigned(zext_ln415_3_fu_621_p1) + unsigned(trunc_ln708_2_fu_580_p4));
    add_ln415_fu_331_p2 <= std_logic_vector(unsigned(zext_ln415_fu_327_p1) + unsigned(trunc_ln_fu_286_p4));
    and_ln415_1_fu_419_p2 <= (tmp_63_fu_412_p3 and or_ln412_1_fu_407_p2);
    and_ln415_2_fu_517_p2 <= (tmp_67_fu_510_p3 and or_ln412_2_fu_505_p2);
    and_ln415_3_fu_615_p2 <= (tmp_71_fu_608_p3 and or_ln412_3_fu_603_p2);
    and_ln415_fu_321_p2 <= (tmp_59_fu_314_p3 and or_ln412_fu_309_p2);
    and_ln416_1_fu_449_p2 <= (xor_ln416_1_fu_443_p2 and tmp_62_fu_400_p3);
    and_ln416_2_fu_547_p2 <= (xor_ln416_2_fu_541_p2 and tmp_66_fu_498_p3);
    and_ln416_3_fu_645_p2 <= (xor_ln416_3_fu_639_p2 and tmp_70_fu_596_p3);
    and_ln416_fu_351_p2 <= (xor_ln416_fu_345_p2 and tmp_58_fu_302_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln41_reg_673, ap_enable_reg_pp0_iter3, icmp_ln41_reg_673_pp0_iter2_reg, io_acc_block_signal_op21, io_acc_block_signal_op109)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln41_reg_673_pp0_iter2_reg = ap_const_lv1_0) and (io_acc_block_signal_op109 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln41_reg_673 = ap_const_lv1_0) and (io_acc_block_signal_op21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln41_reg_673, ap_enable_reg_pp0_iter3, icmp_ln41_reg_673_pp0_iter2_reg, io_acc_block_signal_op21, io_acc_block_signal_op109)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln41_reg_673_pp0_iter2_reg = ap_const_lv1_0) and (io_acc_block_signal_op109 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln41_reg_673 = ap_const_lv1_0) and (io_acc_block_signal_op21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln41_reg_673, ap_enable_reg_pp0_iter3, icmp_ln41_reg_673_pp0_iter2_reg, io_acc_block_signal_op21, io_acc_block_signal_op109)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln41_reg_673_pp0_iter2_reg = ap_const_lv1_0) and (io_acc_block_signal_op109 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln41_reg_673 = ap_const_lv1_0) and (io_acc_block_signal_op21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln41_reg_673, io_acc_block_signal_op21)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln41_reg_673 = ap_const_lv1_0) and (io_acc_block_signal_op21 = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(icmp_ln41_reg_673_pp0_iter2_reg, io_acc_block_signal_op109)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((icmp_ln41_reg_673_pp0_iter2_reg = ap_const_lv1_0) and (io_acc_block_signal_op109 = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln41_fu_125_p2)
    begin
        if ((icmp_ln41_fu_125_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_673)
    begin
        if (((icmp_ln41_reg_673 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_673, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_673 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_673)
    begin
        if (((icmp_ln41_reg_673 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_673, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_673 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_673)
    begin
        if (((icmp_ln41_reg_673 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_673, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_673 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_673)
    begin
        if (((icmp_ln41_reg_673 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_673, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_673 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_131_p2 <= std_logic_vector(unsigned(i_0_reg_114) + unsigned(ap_const_lv10_1));
    icmp_ln1494_1_fu_379_p2 <= "1" when (signed(tmp_data_1_V_reg_691) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_2_fu_477_p2 <= "1" when (signed(tmp_data_2_V_reg_700) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_3_fu_575_p2 <= "1" when (signed(tmp_data_3_V_reg_709) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_fu_281_p2 <= "1" when (signed(tmp_data_0_V_reg_682) > signed(ap_const_lv16_0)) else "0";
    icmp_ln41_fu_125_p2 <= "1" when (i_0_reg_114 = ap_const_lv10_349) else "0";
    icmp_ln718_1_fu_189_p2 <= "0" when (trunc_ln718_1_fu_185_p1 = ap_const_lv3_0) else "1";
    icmp_ln718_2_fu_221_p2 <= "0" when (trunc_ln718_2_fu_217_p1 = ap_const_lv3_0) else "1";
    icmp_ln718_3_fu_253_p2 <= "0" when (trunc_ln718_3_fu_249_p1 = ap_const_lv3_0) else "1";
    icmp_ln718_fu_157_p2 <= "0" when (trunc_ln718_fu_153_p1 = ap_const_lv3_0) else "1";
    icmp_ln768_1_fu_211_p2 <= "1" when (p_Result_10_1_fu_195_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_2_fu_243_p2 <= "1" when (p_Result_10_2_fu_227_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_3_fu_275_p2 <= "1" when (p_Result_10_3_fu_259_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_fu_179_p2 <= "1" when (p_Result_s_fu_163_p4 = ap_const_lv6_0) else "0";
    icmp_ln879_1_fu_205_p2 <= "1" when (p_Result_10_1_fu_195_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_2_fu_237_p2 <= "1" when (p_Result_10_2_fu_227_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_3_fu_269_p2 <= "1" when (p_Result_10_3_fu_259_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_fu_173_p2 <= "1" when (p_Result_s_fu_163_p4 = ap_const_lv6_3F) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op109 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op21 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);
    or_ln412_1_fu_407_p2 <= (tmp_61_fu_393_p3 or icmp_ln718_1_reg_733);
    or_ln412_2_fu_505_p2 <= (tmp_65_fu_491_p3 or icmp_ln718_2_reg_748);
    or_ln412_3_fu_603_p2 <= (tmp_69_fu_589_p3 or icmp_ln718_3_reg_763);
    or_ln412_fu_309_p2 <= (tmp_57_fu_295_p3 or icmp_ln718_reg_718);
    p_Result_10_1_fu_195_p4 <= data_V_data_1_V_dout(15 downto 10);
    p_Result_10_2_fu_227_p4 <= data_V_data_2_V_dout(15 downto 10);
    p_Result_10_3_fu_259_p4 <= data_V_data_3_V_dout(15 downto 10);
    p_Result_s_fu_163_p4 <= data_V_data_0_V_dout(15 downto 10);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln41_reg_673_pp0_iter2_reg)
    begin
        if (((icmp_ln41_reg_673_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_1_reg_778;

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln41_reg_673_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_673_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln41_reg_673_pp0_iter2_reg)
    begin
        if (((icmp_ln41_reg_673_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_1_reg_783;

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln41_reg_673_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_673_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln41_reg_673_pp0_iter2_reg)
    begin
        if (((icmp_ln41_reg_673_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_1_reg_788;

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln41_reg_673_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_673_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln41_reg_673_pp0_iter2_reg)
    begin
        if (((icmp_ln41_reg_673_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_1_reg_793;

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln41_reg_673_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_reg_673_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln340_1_fu_461_p3 <= 
        add_ln415_1_fu_429_p2 when (select_ln777_1_fu_455_p3(0) = '1') else 
        ap_const_lv6_3F;
    select_ln340_2_fu_559_p3 <= 
        add_ln415_2_fu_527_p2 when (select_ln777_2_fu_553_p3(0) = '1') else 
        ap_const_lv6_3F;
    select_ln340_3_fu_657_p3 <= 
        add_ln415_3_fu_625_p2 when (select_ln777_3_fu_651_p3(0) = '1') else 
        ap_const_lv6_3F;
    select_ln340_fu_363_p3 <= 
        add_ln415_fu_331_p2 when (select_ln777_fu_357_p3(0) = '1') else 
        ap_const_lv6_3F;
    select_ln777_1_fu_455_p3 <= 
        icmp_ln879_1_reg_738 when (and_ln416_1_fu_449_p2(0) = '1') else 
        icmp_ln768_1_reg_743;
    select_ln777_2_fu_553_p3 <= 
        icmp_ln879_2_reg_753 when (and_ln416_2_fu_547_p2(0) = '1') else 
        icmp_ln768_2_reg_758;
    select_ln777_3_fu_651_p3 <= 
        icmp_ln879_3_reg_768 when (and_ln416_3_fu_645_p2(0) = '1') else 
        icmp_ln768_3_reg_773;
    select_ln777_fu_357_p3 <= 
        icmp_ln879_reg_723 when (and_ln416_fu_351_p2(0) = '1') else 
        icmp_ln768_reg_728;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_57_fu_295_p3 <= tmp_data_0_V_reg_682(4 downto 4);
    tmp_58_fu_302_p3 <= tmp_data_0_V_reg_682(9 downto 9);
    tmp_59_fu_314_p3 <= tmp_data_0_V_reg_682(3 downto 3);
    tmp_60_fu_337_p3 <= add_ln415_fu_331_p2(5 downto 5);
    tmp_61_fu_393_p3 <= tmp_data_1_V_reg_691(4 downto 4);
    tmp_62_fu_400_p3 <= tmp_data_1_V_reg_691(9 downto 9);
    tmp_63_fu_412_p3 <= tmp_data_1_V_reg_691(3 downto 3);
    tmp_64_fu_435_p3 <= add_ln415_1_fu_429_p2(5 downto 5);
    tmp_65_fu_491_p3 <= tmp_data_2_V_reg_700(4 downto 4);
    tmp_66_fu_498_p3 <= tmp_data_2_V_reg_700(9 downto 9);
    tmp_67_fu_510_p3 <= tmp_data_2_V_reg_700(3 downto 3);
    tmp_68_fu_533_p3 <= add_ln415_2_fu_527_p2(5 downto 5);
    tmp_69_fu_589_p3 <= tmp_data_3_V_reg_709(4 downto 4);
    tmp_70_fu_596_p3 <= tmp_data_3_V_reg_709(9 downto 9);
    tmp_71_fu_608_p3 <= tmp_data_3_V_reg_709(3 downto 3);
    tmp_72_fu_631_p3 <= add_ln415_3_fu_625_p2(5 downto 5);
    tmp_data_0_V_1_fu_371_p3 <= 
        select_ln340_fu_363_p3 when (icmp_ln1494_fu_281_p2(0) = '1') else 
        ap_const_lv6_0;
    tmp_data_1_V_1_fu_469_p3 <= 
        select_ln340_1_fu_461_p3 when (icmp_ln1494_1_fu_379_p2(0) = '1') else 
        ap_const_lv6_0;
    tmp_data_2_V_1_fu_567_p3 <= 
        select_ln340_2_fu_559_p3 when (icmp_ln1494_2_fu_477_p2(0) = '1') else 
        ap_const_lv6_0;
    tmp_data_3_V_1_fu_665_p3 <= 
        select_ln340_3_fu_657_p3 when (icmp_ln1494_3_fu_575_p2(0) = '1') else 
        ap_const_lv6_0;
    trunc_ln708_1_fu_482_p4 <= tmp_data_2_V_reg_700(9 downto 4);
    trunc_ln708_2_fu_580_p4 <= tmp_data_3_V_reg_709(9 downto 4);
    trunc_ln708_s_fu_384_p4 <= tmp_data_1_V_reg_691(9 downto 4);
    trunc_ln718_1_fu_185_p1 <= data_V_data_1_V_dout(3 - 1 downto 0);
    trunc_ln718_2_fu_217_p1 <= data_V_data_2_V_dout(3 - 1 downto 0);
    trunc_ln718_3_fu_249_p1 <= data_V_data_3_V_dout(3 - 1 downto 0);
    trunc_ln718_fu_153_p1 <= data_V_data_0_V_dout(3 - 1 downto 0);
    trunc_ln_fu_286_p4 <= tmp_data_0_V_reg_682(9 downto 4);
    xor_ln416_1_fu_443_p2 <= (tmp_64_fu_435_p3 xor ap_const_lv1_1);
    xor_ln416_2_fu_541_p2 <= (tmp_68_fu_533_p3 xor ap_const_lv1_1);
    xor_ln416_3_fu_639_p2 <= (tmp_72_fu_631_p3 xor ap_const_lv1_1);
    xor_ln416_fu_345_p2 <= (tmp_60_fu_337_p3 xor ap_const_lv1_1);
    zext_ln415_1_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_1_fu_419_p2),6));
    zext_ln415_2_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_2_fu_517_p2),6));
    zext_ln415_3_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_3_fu_615_p2),6));
    zext_ln415_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_fu_321_p2),6));
end behav;
