-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reduce_ap_fixed_18_8_0_0_0_5_Op_add_ap_fixed_18_8_0_0_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_8_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_9_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_10_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_11_V : IN STD_LOGIC_VECTOR (16 downto 0);
    x_12_V : IN STD_LOGIC_VECTOR (16 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of reduce_ap_fixed_18_8_0_0_0_5_Op_add_ap_fixed_18_8_0_0_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Val2_42_fu_198_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_42_reg_298 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_port_reg_x_12_V : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Val2_29_fu_60_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_fu_56_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_33_fu_64_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_70_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_36_fu_90_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_35_fu_86_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_37_fu_94_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_23_fu_100_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_38_fu_78_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_39_fu_108_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_fu_116_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_fu_120_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_124_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_41_fu_138_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_25_fu_144_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_130_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_30_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_182_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_fu_190_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_2_fu_213_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_2_fu_210_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_2_fu_217_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_43_fu_206_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_45_fu_231_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_27_fu_236_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_26_fu_223_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_13_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_13_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_31_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_15_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_13_fu_274_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_13_fu_282_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ap_port_reg_x_12_V <= x_12_V;
                p_Val2_42_reg_298 <= p_Val2_42_fu_198_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        select_ln340_13_fu_274_p3 when (or_ln340_15_fu_268_p2(0) = '1') else 
        select_ln388_13_fu_282_p3;
        lhs_V_2_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_42_reg_298),19));

        lhs_V_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_38_fu_78_p3),19));

    or_ln340_15_fu_268_p2 <= (xor_ln340_13_fu_262_p2 or p_Result_27_fu_236_p3);
    or_ln340_fu_176_p2 <= (xor_ln340_fu_170_p2 or p_Result_25_fu_144_p3);
    p_Result_23_fu_100_p3 <= p_Val2_37_fu_94_p2(17 downto 17);
    p_Result_24_fu_130_p3 <= ret_V_fu_124_p2(18 downto 18);
    p_Result_25_fu_144_p3 <= p_Val2_41_fu_138_p2(17 downto 17);
    p_Result_26_fu_223_p3 <= ret_V_2_fu_217_p2(18 downto 18);
    p_Result_27_fu_236_p3 <= p_Val2_45_fu_231_p2(17 downto 17);
    p_Result_s_fu_70_p3 <= p_Val2_33_fu_64_p2(17 downto 17);
    p_Val2_29_fu_60_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_9_V),18));
    p_Val2_33_fu_64_p2 <= std_logic_vector(unsigned(p_Val2_29_fu_60_p1) + unsigned(p_Val2_s_fu_56_p1));
    p_Val2_35_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_10_V),18));
    p_Val2_36_fu_90_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_11_V),18));
    p_Val2_37_fu_94_p2 <= std_logic_vector(unsigned(p_Val2_36_fu_90_p1) + unsigned(p_Val2_35_fu_86_p1));
    p_Val2_38_fu_78_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_s_fu_70_p3(0) = '1') else 
        p_Val2_33_fu_64_p2;
    p_Val2_39_fu_108_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_23_fu_100_p3(0) = '1') else 
        p_Val2_37_fu_94_p2;
    p_Val2_41_fu_138_p2 <= std_logic_vector(signed(p_Val2_39_fu_108_p3) + signed(p_Val2_38_fu_78_p3));
    p_Val2_42_fu_198_p3 <= 
        select_ln340_fu_182_p3 when (or_ln340_fu_176_p2(0) = '1') else 
        select_ln388_fu_190_p3;
    p_Val2_43_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_x_12_V),18));
    p_Val2_45_fu_231_p2 <= std_logic_vector(signed(p_Val2_42_reg_298) + signed(p_Val2_43_fu_206_p1));
    p_Val2_s_fu_56_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_8_V),18));
    ret_V_2_fu_217_p2 <= std_logic_vector(unsigned(rhs_V_2_fu_213_p1) + unsigned(lhs_V_2_fu_210_p1));
    ret_V_fu_124_p2 <= std_logic_vector(signed(lhs_V_fu_116_p1) + signed(rhs_V_fu_120_p1));
    rhs_V_2_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_port_reg_x_12_V),19));
        rhs_V_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_39_fu_108_p3),19));

    select_ln340_13_fu_274_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_31_fu_256_p2(0) = '1') else 
        p_Val2_45_fu_231_p2;
    select_ln340_fu_182_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_30_fu_164_p2(0) = '1') else 
        p_Val2_41_fu_138_p2;
    select_ln388_13_fu_282_p3 <= 
        ap_const_lv18_20000 when (underflow_2_fu_250_p2(0) = '1') else 
        p_Val2_45_fu_231_p2;
    select_ln388_fu_190_p3 <= 
        ap_const_lv18_20000 when (underflow_fu_158_p2(0) = '1') else 
        p_Val2_41_fu_138_p2;
    underflow_2_fu_250_p2 <= (xor_ln786_13_fu_244_p2 and p_Result_26_fu_223_p3);
    underflow_fu_158_p2 <= (xor_ln786_fu_152_p2 and p_Result_24_fu_130_p3);
    xor_ln340_13_fu_262_p2 <= (p_Result_26_fu_223_p3 xor ap_const_lv1_1);
    xor_ln340_30_fu_164_p2 <= (p_Result_25_fu_144_p3 xor p_Result_24_fu_130_p3);
    xor_ln340_31_fu_256_p2 <= (p_Result_27_fu_236_p3 xor p_Result_26_fu_223_p3);
    xor_ln340_fu_170_p2 <= (p_Result_24_fu_130_p3 xor ap_const_lv1_1);
    xor_ln786_13_fu_244_p2 <= (p_Result_27_fu_236_p3 xor ap_const_lv1_1);
    xor_ln786_fu_152_p2 <= (p_Result_25_fu_144_p3 xor ap_const_lv1_1);
end behav;
