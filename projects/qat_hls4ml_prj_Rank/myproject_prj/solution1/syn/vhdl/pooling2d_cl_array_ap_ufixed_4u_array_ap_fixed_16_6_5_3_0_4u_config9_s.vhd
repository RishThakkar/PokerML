-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv10_349 : STD_LOGIC_VECTOR (9 downto 0) := "1101001001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_3_4 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_5 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_6 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_7 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_12 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_13 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_14 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_15 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal line_buffer_Array_V_3_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_0_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_3_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_3_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_3_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_3_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln241_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal and_ln191_2_reg_1033 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_242 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln241_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op19 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op152 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln241_fu_270_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln191_2_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_fu_470_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_reg_1037 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_fu_478_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_reg_1043 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_fu_486_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_reg_1049 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_fu_494_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_reg_1055 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_reg_1067 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_2_fu_514_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_2_reg_1073 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_2_fu_522_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_2_reg_1079 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_2_fu_530_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_2_reg_1085 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_2_fu_538_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_2_reg_1091 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_4_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_4_reg_1097 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_5_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_5_reg_1103 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_4_fu_558_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_4_reg_1109 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_4_fu_566_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_4_reg_1115 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_4_fu_574_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_4_reg_1121 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_4_fu_582_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_4_reg_1127 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_7_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_7_reg_1133 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_8_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_8_reg_1139 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_6_fu_602_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_6_reg_1145 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_6_fu_610_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_6_reg_1151 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_6_fu_618_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_6_reg_1157 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_6_fu_626_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_6_reg_1163 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_3_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_3_reg_1169 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_10_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_10_reg_1175 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_reg_1181 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_fu_720_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_i_i_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_fu_652_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln227_fu_670_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln220_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln191_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_2_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_3_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_1_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_fu_714_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_fu_746_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_fu_758_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_13_fu_751_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_fu_769_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_27_fu_780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_780_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_780_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_780_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_27_fu_780_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_4_fu_817_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_6_fu_829_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_6_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_16_fu_822_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_1_fu_840_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_28_fu_851_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_851_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_851_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_851_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_851_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_28_fu_851_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_8_fu_888_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_10_fu_900_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_9_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_18_fu_893_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_2_fu_911_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_29_fu_922_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_922_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_922_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_922_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_922_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_29_fu_922_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_12_fu_959_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_14_fu_971_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_11_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_20_fu_964_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_3_fu_982_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_fu_993_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_993_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_993_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_993_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_993_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_fu_993_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_242 : BOOLEAN;
    signal ap_condition_271 : BOOLEAN;
    signal ap_condition_267 : BOOLEAN;
    signal ap_condition_747 : BOOLEAN;

    component myproject_axi_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_btde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    line_buffer_Array_V_3_0_0_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_btde
    generic map (
        DataWidth => 6,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1C,
        ce0 => line_buffer_Array_V_3_0_0_ce0,
        we0 => line_buffer_Array_V_3_0_0_we0,
        d0 => data_V_data_0_V_dout,
        q0 => line_buffer_Array_V_3_0_0_q0);

    line_buffer_Array_V_3_0_1_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_btde
    generic map (
        DataWidth => 6,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1C,
        ce0 => line_buffer_Array_V_3_0_1_ce0,
        we0 => line_buffer_Array_V_3_0_1_we0,
        d0 => data_V_data_1_V_dout,
        q0 => line_buffer_Array_V_3_0_1_q0);

    line_buffer_Array_V_3_0_2_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_btde
    generic map (
        DataWidth => 6,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1C,
        ce0 => line_buffer_Array_V_3_0_2_ce0,
        we0 => line_buffer_Array_V_3_0_2_we0,
        d0 => data_V_data_2_V_dout,
        q0 => line_buffer_Array_V_3_0_2_q0);

    line_buffer_Array_V_3_0_3_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_btde
    generic map (
        DataWidth => 6,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1C,
        ce0 => line_buffer_Array_V_3_0_3_ce0,
        we0 => line_buffer_Array_V_3_0_3_we0,
        d0 => data_V_data_3_V_dout,
        q0 => line_buffer_Array_V_3_0_3_q0);

    myproject_axi_mux_42_32_1_1_U191 : component myproject_axi_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_27_fu_780_p1,
        din1 => tmp_27_fu_780_p2,
        din2 => tmp_27_fu_780_p3,
        din3 => tmp_27_fu_780_p4,
        din4 => tmp_27_fu_780_p5,
        dout => tmp_27_fu_780_p6);

    myproject_axi_mux_42_32_1_1_U192 : component myproject_axi_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_28_fu_851_p1,
        din1 => tmp_28_fu_851_p2,
        din2 => tmp_28_fu_851_p3,
        din3 => tmp_28_fu_851_p4,
        din4 => tmp_28_fu_851_p5,
        dout => tmp_28_fu_851_p6);

    myproject_axi_mux_42_32_1_1_U193 : component myproject_axi_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_29_fu_922_p1,
        din1 => tmp_29_fu_922_p2,
        din2 => tmp_29_fu_922_p3,
        din3 => tmp_29_fu_922_p4,
        din4 => tmp_29_fu_922_p5,
        dout => tmp_29_fu_922_p6);

    myproject_axi_mux_42_32_1_1_U194 : component myproject_axi_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_30_fu_993_p1,
        din1 => tmp_30_fu_993_p2,
        din2 => tmp_30_fu_993_p3,
        din3 => tmp_30_fu_993_p4,
        din4 => tmp_30_fu_993_p5,
        dout => tmp_30_fu_993_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_267)) then
                if ((ap_const_boolean_1 = ap_condition_271)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_253 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_242)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_253 <= select_ln222_fu_720_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_253 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_253;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_264_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_242 <= add_ln241_fu_270_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_242 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_267)) then
                if ((icmp_ln212_fu_646_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_646_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln225_fu_652_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_747)) then
                if ((icmp_ln216_fu_696_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln216_fu_696_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln220_fu_702_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_267)) then
                if ((icmp_ln212_fu_646_p2 = ap_const_lv1_1)) then 
                    sX <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_646_p2 = ap_const_lv1_0)) then 
                    sX <= select_ln227_fu_670_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then
                and_ln191_2_reg_1033 <= and_ln191_2_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_253 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_253;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_fu_464_p2))) then
                icmp_ln1496_10_reg_1175 <= icmp_ln1496_10_fu_640_p2;
                icmp_ln1496_1_reg_1067 <= icmp_ln1496_1_fu_508_p2;
                icmp_ln1496_3_reg_1169 <= icmp_ln1496_3_fu_634_p2;
                icmp_ln1496_4_reg_1097 <= icmp_ln1496_4_fu_546_p2;
                icmp_ln1496_5_reg_1103 <= icmp_ln1496_5_fu_552_p2;
                icmp_ln1496_7_reg_1133 <= icmp_ln1496_7_fu_590_p2;
                icmp_ln1496_8_reg_1139 <= icmp_ln1496_8_fu_596_p2;
                icmp_ln1496_reg_1061 <= icmp_ln1496_fu_502_p2;
                    pool_window_0_V_2_reg_1073(15 downto 10) <= pool_window_0_V_2_fu_514_p3(15 downto 10);
                    pool_window_0_V_4_reg_1109(15 downto 10) <= pool_window_0_V_4_fu_558_p3(15 downto 10);
                    pool_window_0_V_6_reg_1145(15 downto 10) <= pool_window_0_V_6_fu_602_p3(15 downto 10);
                    pool_window_0_V_reg_1037(15 downto 10) <= pool_window_0_V_fu_470_p3(15 downto 10);
                    pool_window_1_V_2_reg_1079(15 downto 10) <= pool_window_1_V_2_fu_522_p3(15 downto 10);
                    pool_window_1_V_4_reg_1115(15 downto 10) <= pool_window_1_V_4_fu_566_p3(15 downto 10);
                    pool_window_1_V_6_reg_1151(15 downto 10) <= pool_window_1_V_6_fu_610_p3(15 downto 10);
                    pool_window_1_V_reg_1043(15 downto 10) <= pool_window_1_V_fu_478_p3(15 downto 10);
                    pool_window_2_V_2_reg_1085(15 downto 10) <= pool_window_2_V_2_fu_530_p3(15 downto 10);
                    pool_window_2_V_4_reg_1121(15 downto 10) <= pool_window_2_V_4_fu_574_p3(15 downto 10);
                    pool_window_2_V_6_reg_1157(15 downto 10) <= pool_window_2_V_6_fu_618_p3(15 downto 10);
                    pool_window_2_V_reg_1049(15 downto 10) <= pool_window_2_V_fu_486_p3(15 downto 10);
                    pool_window_3_V_2_reg_1091(15 downto 10) <= pool_window_3_V_2_fu_538_p3(15 downto 10);
                    pool_window_3_V_4_reg_1127(15 downto 10) <= pool_window_3_V_4_fu_582_p3(15 downto 10);
                    pool_window_3_V_6_reg_1163(15 downto 10) <= pool_window_3_V_6_fu_626_p3(15 downto 10);
                    pool_window_3_V_reg_1055(15 downto 10) <= pool_window_3_V_fu_494_p3(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln212_reg_1181 <= icmp_ln212_fu_646_p2;
                icmp_ln241_reg_1024 <= icmp_ln241_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then
                kernel_data_V_3_12 <= data_V_data_0_V_dout;
                kernel_data_V_3_13 <= data_V_data_1_V_dout;
                kernel_data_V_3_14 <= data_V_data_2_V_dout;
                kernel_data_V_3_15 <= data_V_data_3_V_dout;
                kernel_data_V_3_4 <= line_buffer_Array_V_3_0_0_q0;
                kernel_data_V_3_5 <= line_buffer_Array_V_3_0_1_q0;
                kernel_data_V_3_6 <= line_buffer_Array_V_3_0_2_q0;
                kernel_data_V_3_7 <= line_buffer_Array_V_3_0_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_reg_1181 = ap_const_lv1_1))) then
                sY <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_253;
            end if;
        end if;
    end process;
    pool_window_0_V_reg_1037(9 downto 0) <= "0000000000";
    pool_window_1_V_reg_1043(9 downto 0) <= "0000000000";
    pool_window_2_V_reg_1049(9 downto 0) <= "0000000000";
    pool_window_3_V_reg_1055(9 downto 0) <= "0000000000";
    pool_window_0_V_2_reg_1073(9 downto 0) <= "0000000000";
    pool_window_1_V_2_reg_1079(9 downto 0) <= "0000000000";
    pool_window_2_V_2_reg_1085(9 downto 0) <= "0000000000";
    pool_window_3_V_2_reg_1091(9 downto 0) <= "0000000000";
    pool_window_0_V_4_reg_1109(9 downto 0) <= "0000000000";
    pool_window_1_V_4_reg_1115(9 downto 0) <= "0000000000";
    pool_window_2_V_4_reg_1121(9 downto 0) <= "0000000000";
    pool_window_3_V_4_reg_1127(9 downto 0) <= "0000000000";
    pool_window_0_V_6_reg_1145(9 downto 0) <= "0000000000";
    pool_window_1_V_6_reg_1151(9 downto 0) <= "0000000000";
    pool_window_2_V_6_reg_1157(9 downto 0) <= "0000000000";
    pool_window_3_V_6_reg_1163(9 downto 0) <= "0000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln241_fu_264_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_fu_264_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_fu_264_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln220_fu_702_p2 <= std_logic_vector(unsigned(pY) + unsigned(ap_const_lv32_1));
    add_ln222_fu_714_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_load) + unsigned(ap_const_lv32_1));
    add_ln225_fu_652_p2 <= std_logic_vector(unsigned(pX) + unsigned(ap_const_lv32_1));
    add_ln227_fu_664_p2 <= std_logic_vector(unsigned(sX) + unsigned(ap_const_lv32_1));
    add_ln241_fu_270_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_242) + unsigned(ap_const_lv10_1));
    and_ln191_1_fu_458_p2 <= (icmp_ln191_3_fu_446_p2 and icmp_ln191_2_fu_436_p2);
    and_ln191_2_fu_464_p2 <= (and_ln191_fu_452_p2 and and_ln191_1_fu_458_p2);
    and_ln191_fu_452_p2 <= (icmp_ln191_fu_416_p2 and icmp_ln191_1_fu_426_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1033, io_acc_block_signal_op19, io_acc_block_signal_op152)
    begin
                ap_block_pp0_stage0_01001 <= (((io_acc_block_signal_op152 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_1033)) or ((io_acc_block_signal_op19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln241_reg_1024 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1033, io_acc_block_signal_op19, io_acc_block_signal_op152)
    begin
                ap_block_pp0_stage0_11001 <= (((io_acc_block_signal_op152 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_1033)) or ((io_acc_block_signal_op19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln241_reg_1024 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1033, io_acc_block_signal_op19, io_acc_block_signal_op152)
    begin
                ap_block_pp0_stage0_subdone <= (((io_acc_block_signal_op152 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_1033)) or ((io_acc_block_signal_op19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln241_reg_1024 = ap_const_lv1_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln241_reg_1024, io_acc_block_signal_op19)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((io_acc_block_signal_op19 = ap_const_logic_0) and (icmp_ln241_reg_1024 = ap_const_lv1_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(and_ln191_2_reg_1033, io_acc_block_signal_op152)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((io_acc_block_signal_op152 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_1033));
    end process;


    ap_condition_242_assign_proc : process(icmp_ln241_reg_1024, icmp_ln212_fu_646_p2, icmp_ln216_fu_696_p2)
    begin
                ap_condition_242 <= ((icmp_ln212_fu_646_p2 = ap_const_lv1_1) and (icmp_ln216_fu_696_p2 = ap_const_lv1_0) and (icmp_ln241_reg_1024 = ap_const_lv1_0));
    end process;


    ap_condition_267_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_267 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_271_assign_proc : process(icmp_ln241_reg_1024, icmp_ln212_fu_646_p2, icmp_ln216_fu_696_p2)
    begin
                ap_condition_271 <= ((icmp_ln216_fu_696_p2 = ap_const_lv1_1) and (icmp_ln212_fu_646_p2 = ap_const_lv1_1) and (icmp_ln241_reg_1024 = ap_const_lv1_0));
    end process;


    ap_condition_747_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001, icmp_ln212_fu_646_p2)
    begin
                ap_condition_747 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_646_p2 = ap_const_lv1_1) and (icmp_ln241_reg_1024 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln241_fu_264_p2)
    begin
        if ((icmp_ln241_fu_264_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_253 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_load_assign_proc : process(sY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln212_reg_1181, ap_phi_reg_pp0_iter2_storemerge_i_i_reg_253)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln212_reg_1181 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_sY_load <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_253;
        else 
            ap_sig_allocacmp_sY_load <= sY;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1024)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln241_reg_1024 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1024)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln241_reg_1024 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1024)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln241_reg_1024 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1024)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln241_reg_1024 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_10_fu_640_p2 <= "1" when (unsigned(pool_window_2_V_6_fu_618_p3) < unsigned(pool_window_3_V_6_fu_626_p3)) else "0";
    icmp_ln1496_11_fu_976_p2 <= "1" when (unsigned(select_ln65_12_fu_959_p3) < unsigned(select_ln65_14_fu_971_p3)) else "0";
    icmp_ln1496_1_fu_508_p2 <= "1" when (unsigned(pool_window_2_V_fu_486_p3) < unsigned(pool_window_3_V_fu_494_p3)) else "0";
    icmp_ln1496_2_fu_763_p2 <= "1" when (unsigned(select_ln65_fu_746_p3) < unsigned(select_ln65_2_fu_758_p3)) else "0";
    icmp_ln1496_3_fu_634_p2 <= "1" when (unsigned(pool_window_0_V_6_fu_602_p3) < unsigned(pool_window_1_V_6_fu_610_p3)) else "0";
    icmp_ln1496_4_fu_546_p2 <= "1" when (unsigned(pool_window_0_V_2_fu_514_p3) < unsigned(pool_window_1_V_2_fu_522_p3)) else "0";
    icmp_ln1496_5_fu_552_p2 <= "1" when (unsigned(pool_window_2_V_2_fu_530_p3) < unsigned(pool_window_3_V_2_fu_538_p3)) else "0";
    icmp_ln1496_6_fu_834_p2 <= "1" when (unsigned(select_ln65_4_fu_817_p3) < unsigned(select_ln65_6_fu_829_p3)) else "0";
    icmp_ln1496_7_fu_590_p2 <= "1" when (unsigned(pool_window_0_V_4_fu_558_p3) < unsigned(pool_window_1_V_4_fu_566_p3)) else "0";
    icmp_ln1496_8_fu_596_p2 <= "1" when (unsigned(pool_window_2_V_4_fu_574_p3) < unsigned(pool_window_3_V_4_fu_582_p3)) else "0";
    icmp_ln1496_9_fu_905_p2 <= "1" when (unsigned(select_ln65_8_fu_888_p3) < unsigned(select_ln65_10_fu_900_p3)) else "0";
    icmp_ln1496_fu_502_p2 <= "1" when (unsigned(pool_window_0_V_fu_470_p3) < unsigned(pool_window_1_V_fu_478_p3)) else "0";
    icmp_ln191_1_fu_426_p2 <= "1" when (ap_sig_allocacmp_sY_load = ap_const_lv32_1) else "0";
    icmp_ln191_2_fu_436_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_3_fu_446_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_fu_416_p2 <= "1" when (sX = ap_const_lv32_1) else "0";
    icmp_ln212_fu_646_p2 <= "1" when (pX = ap_const_lv32_1C) else "0";
    icmp_ln216_fu_696_p2 <= "1" when (pY = ap_const_lv32_1C) else "0";
    icmp_ln241_fu_264_p2 <= "1" when (indvar_flatten_reg_242 = ap_const_lv10_349) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op152 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op19 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    line_buffer_Array_V_3_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1024, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1024 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pool_window_0_V_2_fu_514_p3 <= (kernel_data_V_3_5 & ap_const_lv10_0);
    pool_window_0_V_4_fu_558_p3 <= (kernel_data_V_3_6 & ap_const_lv10_0);
    pool_window_0_V_6_fu_602_p3 <= (kernel_data_V_3_7 & ap_const_lv10_0);
    pool_window_0_V_fu_470_p3 <= (kernel_data_V_3_4 & ap_const_lv10_0);
    pool_window_1_V_2_fu_522_p3 <= (line_buffer_Array_V_3_0_1_q0 & ap_const_lv10_0);
    pool_window_1_V_4_fu_566_p3 <= (line_buffer_Array_V_3_0_2_q0 & ap_const_lv10_0);
    pool_window_1_V_6_fu_610_p3 <= (line_buffer_Array_V_3_0_3_q0 & ap_const_lv10_0);
    pool_window_1_V_fu_478_p3 <= (line_buffer_Array_V_3_0_0_q0 & ap_const_lv10_0);
    pool_window_2_V_2_fu_530_p3 <= (kernel_data_V_3_13 & ap_const_lv10_0);
    pool_window_2_V_4_fu_574_p3 <= (kernel_data_V_3_14 & ap_const_lv10_0);
    pool_window_2_V_6_fu_618_p3 <= (kernel_data_V_3_15 & ap_const_lv10_0);
    pool_window_2_V_fu_486_p3 <= (kernel_data_V_3_12 & ap_const_lv10_0);
    pool_window_3_V_2_fu_538_p3 <= (data_V_data_1_V_dout & ap_const_lv10_0);
    pool_window_3_V_4_fu_582_p3 <= (data_V_data_2_V_dout & ap_const_lv10_0);
    pool_window_3_V_6_fu_626_p3 <= (data_V_data_3_V_dout & ap_const_lv10_0);
    pool_window_3_V_fu_494_p3 <= (data_V_data_0_V_dout & ap_const_lv10_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1033)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_1033) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_27_fu_780_p6(21 downto 6);

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_1033, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1033))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1033)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_1033) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_28_fu_851_p6(21 downto 6);

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_1033, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1033))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1033)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_1033) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_29_fu_922_p6(21 downto 6);

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_1033, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1033))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_1033)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_1033) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_30_fu_993_p6(21 downto 6);

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_1033, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_1033))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln222_fu_720_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_1_fu_426_p2(0) = '1') else 
        add_ln222_fu_714_p2;
    select_ln227_fu_670_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_fu_416_p2(0) = '1') else 
        add_ln227_fu_664_p2;
    select_ln65_10_fu_900_p3 <= 
        pool_window_3_V_4_reg_1127 when (icmp_ln1496_8_reg_1139(0) = '1') else 
        pool_window_2_V_4_reg_1121;
    select_ln65_12_fu_959_p3 <= 
        pool_window_1_V_6_reg_1151 when (icmp_ln1496_3_reg_1169(0) = '1') else 
        pool_window_0_V_6_reg_1145;
    select_ln65_13_fu_751_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_1_reg_1067(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_14_fu_971_p3 <= 
        pool_window_3_V_6_reg_1163 when (icmp_ln1496_10_reg_1175(0) = '1') else 
        pool_window_2_V_6_reg_1157;
    select_ln65_16_fu_822_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_5_reg_1103(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_18_fu_893_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_8_reg_1139(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_20_fu_964_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_10_reg_1175(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_2_fu_758_p3 <= 
        pool_window_3_V_reg_1055 when (icmp_ln1496_1_reg_1067(0) = '1') else 
        pool_window_2_V_reg_1049;
    select_ln65_4_fu_817_p3 <= 
        pool_window_1_V_2_reg_1079 when (icmp_ln1496_4_reg_1097(0) = '1') else 
        pool_window_0_V_2_reg_1073;
    select_ln65_6_fu_829_p3 <= 
        pool_window_3_V_2_reg_1091 when (icmp_ln1496_5_reg_1103(0) = '1') else 
        pool_window_2_V_2_reg_1085;
    select_ln65_8_fu_888_p3 <= 
        pool_window_1_V_4_reg_1115 when (icmp_ln1496_7_reg_1133(0) = '1') else 
        pool_window_0_V_4_reg_1109;
    select_ln65_fu_746_p3 <= 
        pool_window_1_V_reg_1043 when (icmp_ln1496_reg_1061(0) = '1') else 
        pool_window_0_V_reg_1037;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_27_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_reg_1037),32));
    tmp_27_fu_780_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_reg_1043),32));
    tmp_27_fu_780_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_reg_1049),32));
    tmp_27_fu_780_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_reg_1055),32));
    tmp_27_fu_780_p5 <= 
        select_ln65_13_fu_751_p3 when (icmp_ln1496_2_fu_763_p2(0) = '1') else 
        zext_ln65_fu_769_p1;
    tmp_28_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_2_reg_1073),32));
    tmp_28_fu_851_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_2_reg_1079),32));
    tmp_28_fu_851_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_2_reg_1085),32));
    tmp_28_fu_851_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_2_reg_1091),32));
    tmp_28_fu_851_p5 <= 
        select_ln65_16_fu_822_p3 when (icmp_ln1496_6_fu_834_p2(0) = '1') else 
        zext_ln65_1_fu_840_p1;
    tmp_29_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_4_reg_1109),32));
    tmp_29_fu_922_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_4_reg_1115),32));
    tmp_29_fu_922_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_4_reg_1121),32));
    tmp_29_fu_922_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_4_reg_1127),32));
    tmp_29_fu_922_p5 <= 
        select_ln65_18_fu_893_p3 when (icmp_ln1496_9_fu_905_p2(0) = '1') else 
        zext_ln65_2_fu_911_p1;
    tmp_30_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_6_reg_1145),32));
    tmp_30_fu_993_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_6_reg_1151),32));
    tmp_30_fu_993_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_6_reg_1157),32));
    tmp_30_fu_993_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_6_reg_1163),32));
    tmp_30_fu_993_p5 <= 
        select_ln65_20_fu_964_p3 when (icmp_ln1496_11_fu_976_p2(0) = '1') else 
        zext_ln65_3_fu_982_p1;
    zext_ln65_1_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_4_reg_1097),2));
    zext_ln65_2_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_7_reg_1133),2));
    zext_ln65_3_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_3_reg_1169),2));
    zext_ln65_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_reg_1061),2));
end behav;
