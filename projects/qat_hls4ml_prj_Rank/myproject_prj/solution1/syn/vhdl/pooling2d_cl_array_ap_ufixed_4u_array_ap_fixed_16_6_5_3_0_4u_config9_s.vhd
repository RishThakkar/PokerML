-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv10_349 : STD_LOGIC_VECTOR (9 downto 0) := "1101001001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_3_4 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_5 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_6 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_7 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_12 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_13 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_14 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_3_15 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal line_buffer_Array_V_3_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_0_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_3_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_3_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_3_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_3_0_3_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln241_reg_913 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal and_ln191_2_reg_950 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_148 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln241_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op154 : STD_LOGIC;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln241_reg_913_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln241_fu_176_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln241_reg_917 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_data_0_V_3_reg_922 : STD_LOGIC_VECTOR (5 downto 0);
    signal io_acc_block_signal_op21 : STD_LOGIC;
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_data_1_V_3_reg_929 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_2_V_3_reg_936 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_3_V_3_reg_943 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln191_2_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_fu_368_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_reg_954 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_fu_376_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_reg_960 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_fu_384_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_reg_966 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_fu_392_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_reg_972 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_2_fu_411_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_2_reg_990 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_2_fu_419_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_2_reg_996 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_2_fu_427_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_2_reg_1002 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_2_fu_435_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_2_reg_1008 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_4_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_4_reg_1014 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_5_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_5_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_4_fu_454_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_4_reg_1026 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_4_fu_462_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_4_reg_1032 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_4_fu_470_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_4_reg_1038 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_4_fu_478_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_4_reg_1044 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_7_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_7_reg_1050 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_8_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_8_reg_1056 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_6_fu_497_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_6_reg_1062 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_6_fu_505_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_6_reg_1068 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_6_fu_513_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_6_reg_1074 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_6_fu_521_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_6_reg_1080 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_3_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_3_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_10_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_10_reg_1092 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_reg_1098 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln227_fu_564_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln227_reg_1102 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln216_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_1107 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_fu_608_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln222_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_15_fu_648_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_15_reg_1116 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_17_fu_682_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_17_reg_1121 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_19_fu_716_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_19_reg_1126 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_21_fu_750_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_21_reg_1131 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_152_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_i_i_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln220_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln191_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_1_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_2_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_3_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_1_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_fu_622_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_fu_634_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_13_fu_627_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_fu_645_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_4_fu_656_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_6_fu_668_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_6_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_16_fu_661_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_1_fu_679_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_8_fu_690_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_10_fu_702_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_9_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_18_fu_695_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_2_fu_713_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln65_12_fu_724_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_14_fu_736_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_11_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_20_fu_729_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_3_fu_747_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_27_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_775_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_775_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_775_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_811_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_811_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_811_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_811_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_811_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_847_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_847_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_847_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_847_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_883_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_883_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_883_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_883_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_883_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_318 : BOOLEAN;
    signal ap_condition_313 : BOOLEAN;
    signal ap_condition_303 : BOOLEAN;
    signal ap_condition_795 : BOOLEAN;
    signal ap_condition_263 : BOOLEAN;
    signal ap_condition_800 : BOOLEAN;

    component myproject_axi_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_btde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    line_buffer_Array_V_3_0_0_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_btde
    generic map (
        DataWidth => 6,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1C,
        ce0 => line_buffer_Array_V_3_0_0_ce0,
        we0 => line_buffer_Array_V_3_0_0_we0,
        d0 => tmp_data_0_V_3_reg_922,
        q0 => line_buffer_Array_V_3_0_0_q0);

    line_buffer_Array_V_3_0_1_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_btde
    generic map (
        DataWidth => 6,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1C,
        ce0 => line_buffer_Array_V_3_0_1_ce0,
        we0 => line_buffer_Array_V_3_0_1_we0,
        d0 => tmp_data_1_V_3_reg_929,
        q0 => line_buffer_Array_V_3_0_1_q0);

    line_buffer_Array_V_3_0_2_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_btde
    generic map (
        DataWidth => 6,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1C,
        ce0 => line_buffer_Array_V_3_0_2_ce0,
        we0 => line_buffer_Array_V_3_0_2_we0,
        d0 => tmp_data_2_V_3_reg_936,
        q0 => line_buffer_Array_V_3_0_2_q0);

    line_buffer_Array_V_3_0_3_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_btde
    generic map (
        DataWidth => 6,
        AddressRange => 29,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv5_1C,
        ce0 => line_buffer_Array_V_3_0_3_ce0,
        we0 => line_buffer_Array_V_3_0_3_we0,
        d0 => tmp_data_3_V_3_reg_943,
        q0 => line_buffer_Array_V_3_0_3_q0);

    myproject_axi_mux_42_32_1_1_U195 : component myproject_axi_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_27_fu_775_p1,
        din1 => tmp_27_fu_775_p2,
        din2 => tmp_27_fu_775_p3,
        din3 => tmp_27_fu_775_p4,
        din4 => select_ln65_15_reg_1116,
        dout => tmp_27_fu_775_p6);

    myproject_axi_mux_42_32_1_1_U196 : component myproject_axi_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_28_fu_811_p1,
        din1 => tmp_28_fu_811_p2,
        din2 => tmp_28_fu_811_p3,
        din3 => tmp_28_fu_811_p4,
        din4 => select_ln65_17_reg_1121,
        dout => tmp_28_fu_811_p6);

    myproject_axi_mux_42_32_1_1_U197 : component myproject_axi_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_29_fu_847_p1,
        din1 => tmp_29_fu_847_p2,
        din2 => tmp_29_fu_847_p3,
        din3 => tmp_29_fu_847_p4,
        din4 => select_ln65_19_reg_1126,
        dout => tmp_29_fu_847_p6);

    myproject_axi_mux_42_32_1_1_U198 : component myproject_axi_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_30_fu_883_p1,
        din1 => tmp_30_fu_883_p2,
        din2 => tmp_30_fu_883_p3,
        din3 => tmp_30_fu_883_p4,
        din4 => select_ln65_21_reg_1131,
        dout => tmp_30_fu_883_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln216_fu_584_p2 = ap_const_lv1_1) and (icmp_ln212_fu_540_p2 = ap_const_lv1_1) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_159;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_313)) then
                if ((ap_const_boolean_1 = ap_condition_318)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_159 <= select_ln222_reg_1111;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_159 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_159;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
                indvar_flatten_reg_148 <= add_ln241_reg_917;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_148 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_303)) then
                if ((icmp_ln212_fu_540_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_540_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln225_fu_546_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_795)) then
                if ((icmp_ln216_fu_584_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln216_fu_584_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln220_fu_590_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_800)) then 
                    sX <= select_ln227_reg_1102;
                elsif ((ap_const_boolean_1 = ap_condition_263)) then 
                    sX <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln241_reg_917 <= add_ln241_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then
                and_ln191_2_reg_950 <= and_ln191_2_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_fu_362_p2))) then
                icmp_ln1496_10_reg_1092 <= icmp_ln1496_10_fu_534_p2;
                icmp_ln1496_1_reg_984 <= icmp_ln1496_1_fu_405_p2;
                icmp_ln1496_3_reg_1086 <= icmp_ln1496_3_fu_528_p2;
                icmp_ln1496_4_reg_1014 <= icmp_ln1496_4_fu_442_p2;
                icmp_ln1496_5_reg_1020 <= icmp_ln1496_5_fu_448_p2;
                icmp_ln1496_7_reg_1050 <= icmp_ln1496_7_fu_485_p2;
                icmp_ln1496_8_reg_1056 <= icmp_ln1496_8_fu_491_p2;
                icmp_ln1496_reg_978 <= icmp_ln1496_fu_399_p2;
                    pool_window_0_V_2_reg_990(15 downto 10) <= pool_window_0_V_2_fu_411_p3(15 downto 10);
                    pool_window_0_V_4_reg_1026(15 downto 10) <= pool_window_0_V_4_fu_454_p3(15 downto 10);
                    pool_window_0_V_6_reg_1062(15 downto 10) <= pool_window_0_V_6_fu_497_p3(15 downto 10);
                    pool_window_0_V_reg_954(15 downto 10) <= pool_window_0_V_fu_368_p3(15 downto 10);
                    pool_window_1_V_2_reg_996(15 downto 10) <= pool_window_1_V_2_fu_419_p3(15 downto 10);
                    pool_window_1_V_4_reg_1032(15 downto 10) <= pool_window_1_V_4_fu_462_p3(15 downto 10);
                    pool_window_1_V_6_reg_1068(15 downto 10) <= pool_window_1_V_6_fu_505_p3(15 downto 10);
                    pool_window_1_V_reg_960(15 downto 10) <= pool_window_1_V_fu_376_p3(15 downto 10);
                    pool_window_2_V_2_reg_1002(15 downto 10) <= pool_window_2_V_2_fu_427_p3(15 downto 10);
                    pool_window_2_V_4_reg_1038(15 downto 10) <= pool_window_2_V_4_fu_470_p3(15 downto 10);
                    pool_window_2_V_6_reg_1074(15 downto 10) <= pool_window_2_V_6_fu_513_p3(15 downto 10);
                    pool_window_2_V_reg_966(15 downto 10) <= pool_window_2_V_fu_384_p3(15 downto 10);
                    pool_window_3_V_2_reg_1008(15 downto 10) <= pool_window_3_V_2_fu_435_p3(15 downto 10);
                    pool_window_3_V_4_reg_1044(15 downto 10) <= pool_window_3_V_4_fu_478_p3(15 downto 10);
                    pool_window_3_V_6_reg_1080(15 downto 10) <= pool_window_3_V_6_fu_521_p3(15 downto 10);
                    pool_window_3_V_reg_972(15 downto 10) <= pool_window_3_V_fu_392_p3(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln212_reg_1098 <= icmp_ln212_fu_540_p2;
                icmp_ln241_reg_913 <= icmp_ln241_fu_170_p2;
                icmp_ln241_reg_913_pp0_iter1_reg <= icmp_ln241_reg_913;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_540_p2 = ap_const_lv1_1))) then
                icmp_ln216_reg_1107 <= icmp_ln216_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then
                kernel_data_V_3_12 <= tmp_data_0_V_3_reg_922;
                kernel_data_V_3_13 <= tmp_data_1_V_3_reg_929;
                kernel_data_V_3_14 <= tmp_data_2_V_3_reg_936;
                kernel_data_V_3_15 <= tmp_data_3_V_3_reg_943;
                kernel_data_V_3_4 <= line_buffer_Array_V_3_0_0_q0;
                kernel_data_V_3_5 <= line_buffer_Array_V_3_0_1_q0;
                kernel_data_V_3_6 <= line_buffer_Array_V_3_0_2_q0;
                kernel_data_V_3_7 <= line_buffer_Array_V_3_0_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_reg_1098 = ap_const_lv1_1))) then
                sY <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_540_p2 = ap_const_lv1_1) and (icmp_ln216_fu_584_p2 = ap_const_lv1_0) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then
                select_ln222_reg_1111 <= select_ln222_fu_608_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_540_p2 = ap_const_lv1_0))) then
                select_ln227_reg_1102 <= select_ln227_fu_564_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln191_2_reg_950))) then
                select_ln65_15_reg_1116 <= select_ln65_15_fu_648_p3;
                select_ln65_17_reg_1121 <= select_ln65_17_fu_682_p3;
                select_ln65_19_reg_1126 <= select_ln65_19_fu_716_p3;
                select_ln65_21_reg_1131 <= select_ln65_21_fu_750_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then
                tmp_data_0_V_3_reg_922 <= data_V_data_0_V_dout;
                tmp_data_1_V_3_reg_929 <= data_V_data_1_V_dout;
                tmp_data_2_V_3_reg_936 <= data_V_data_2_V_dout;
                tmp_data_3_V_3_reg_943 <= data_V_data_3_V_dout;
            end if;
        end if;
    end process;
    pool_window_0_V_reg_954(9 downto 0) <= "0000000000";
    pool_window_1_V_reg_960(9 downto 0) <= "0000000000";
    pool_window_2_V_reg_966(9 downto 0) <= "0000000000";
    pool_window_3_V_reg_972(9 downto 0) <= "0000000000";
    pool_window_0_V_2_reg_990(9 downto 0) <= "0000000000";
    pool_window_1_V_2_reg_996(9 downto 0) <= "0000000000";
    pool_window_2_V_2_reg_1002(9 downto 0) <= "0000000000";
    pool_window_3_V_2_reg_1008(9 downto 0) <= "0000000000";
    pool_window_0_V_4_reg_1026(9 downto 0) <= "0000000000";
    pool_window_1_V_4_reg_1032(9 downto 0) <= "0000000000";
    pool_window_2_V_4_reg_1038(9 downto 0) <= "0000000000";
    pool_window_3_V_4_reg_1044(9 downto 0) <= "0000000000";
    pool_window_0_V_6_reg_1062(9 downto 0) <= "0000000000";
    pool_window_1_V_6_reg_1068(9 downto 0) <= "0000000000";
    pool_window_2_V_6_reg_1074(9 downto 0) <= "0000000000";
    pool_window_3_V_6_reg_1080(9 downto 0) <= "0000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln241_fu_170_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_fu_170_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_fu_170_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln220_fu_590_p2 <= std_logic_vector(unsigned(pY) + unsigned(ap_const_lv32_1));
    add_ln222_fu_602_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_load) + unsigned(ap_const_lv32_1));
    add_ln225_fu_546_p2 <= std_logic_vector(unsigned(pX) + unsigned(ap_const_lv32_1));
    add_ln227_fu_558_p2 <= std_logic_vector(unsigned(sX) + unsigned(ap_const_lv32_1));
    add_ln241_fu_176_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_152_p4) + unsigned(ap_const_lv10_1));
    and_ln191_1_fu_356_p2 <= (icmp_ln191_3_fu_344_p2 and icmp_ln191_2_fu_334_p2);
    and_ln191_2_fu_362_p2 <= (and_ln191_fu_350_p2 and and_ln191_1_fu_356_p2);
    and_ln191_fu_350_p2 <= (icmp_ln191_fu_314_p2 and icmp_ln191_1_fu_324_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_950, io_acc_block_signal_op154)
    begin
                ap_block_pp0_stage0_01001 <= ((io_acc_block_signal_op154 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_950));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_950, io_acc_block_signal_op154)
    begin
                ap_block_pp0_stage0_11001 <= ((io_acc_block_signal_op154 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_950));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_2_reg_950, io_acc_block_signal_op154)
    begin
                ap_block_pp0_stage0_subdone <= ((io_acc_block_signal_op154 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_2_reg_950));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln241_reg_913, io_acc_block_signal_op21)
    begin
                ap_block_pp0_stage1_11001 <= ((io_acc_block_signal_op21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_reg_913 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln241_reg_913, io_acc_block_signal_op21)
    begin
                ap_block_pp0_stage1_subdone <= ((io_acc_block_signal_op21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_reg_913 = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(icmp_ln241_reg_913, io_acc_block_signal_op21)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((io_acc_block_signal_op21 = ap_const_logic_0) and (icmp_ln241_reg_913 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter2_assign_proc : process(and_ln191_2_reg_950, io_acc_block_signal_op154)
    begin
                ap_block_state6_pp0_stage0_iter2 <= ((io_acc_block_signal_op154 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_2_reg_950));
    end process;


    ap_condition_263_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln212_fu_540_p2)
    begin
                ap_condition_263 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_540_p2 = ap_const_lv1_1));
    end process;


    ap_condition_303_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_303 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_313_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_313 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001));
    end process;


    ap_condition_318_assign_proc : process(icmp_ln241_reg_913_pp0_iter1_reg, icmp_ln212_reg_1098, icmp_ln216_reg_1107)
    begin
                ap_condition_318 <= ((icmp_ln212_reg_1098 = ap_const_lv1_1) and (icmp_ln216_reg_1107 = ap_const_lv1_0) and (icmp_ln241_reg_913_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_795_assign_proc : process(icmp_ln241_reg_913, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln212_fu_540_p2, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_795 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_540_p2 = ap_const_lv1_1) and (icmp_ln241_reg_913 = ap_const_lv1_0));
    end process;


    ap_condition_800_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln212_reg_1098)
    begin
                ap_condition_800 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln212_reg_1098 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln241_fu_170_p2)
    begin
        if ((icmp_ln241_fu_170_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_152_p4_assign_proc : process(icmp_ln241_reg_913, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten_reg_148, add_ln241_reg_917, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_152_p4 <= add_ln241_reg_917;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_152_p4 <= indvar_flatten_reg_148;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_159 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_load_assign_proc : process(sY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln212_reg_1098, ap_phi_reg_pp0_iter2_storemerge_i_i_reg_159)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln212_reg_1098 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_sY_load <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_159;
        else 
            ap_sig_allocacmp_sY_load <= sY;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_913)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln241_reg_913 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_913, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_913)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln241_reg_913 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_913, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_913)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln241_reg_913 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_913, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln241_reg_913)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln241_reg_913 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln241_reg_913, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_10_fu_534_p2 <= "1" when (unsigned(pool_window_2_V_6_fu_513_p3) < unsigned(pool_window_3_V_6_fu_521_p3)) else "0";
    icmp_ln1496_11_fu_741_p2 <= "1" when (unsigned(select_ln65_12_fu_724_p3) < unsigned(select_ln65_14_fu_736_p3)) else "0";
    icmp_ln1496_1_fu_405_p2 <= "1" when (unsigned(pool_window_2_V_fu_384_p3) < unsigned(pool_window_3_V_fu_392_p3)) else "0";
    icmp_ln1496_2_fu_639_p2 <= "1" when (unsigned(select_ln65_fu_622_p3) < unsigned(select_ln65_2_fu_634_p3)) else "0";
    icmp_ln1496_3_fu_528_p2 <= "1" when (unsigned(pool_window_0_V_6_fu_497_p3) < unsigned(pool_window_1_V_6_fu_505_p3)) else "0";
    icmp_ln1496_4_fu_442_p2 <= "1" when (unsigned(pool_window_0_V_2_fu_411_p3) < unsigned(pool_window_1_V_2_fu_419_p3)) else "0";
    icmp_ln1496_5_fu_448_p2 <= "1" when (unsigned(pool_window_2_V_2_fu_427_p3) < unsigned(pool_window_3_V_2_fu_435_p3)) else "0";
    icmp_ln1496_6_fu_673_p2 <= "1" when (unsigned(select_ln65_4_fu_656_p3) < unsigned(select_ln65_6_fu_668_p3)) else "0";
    icmp_ln1496_7_fu_485_p2 <= "1" when (unsigned(pool_window_0_V_4_fu_454_p3) < unsigned(pool_window_1_V_4_fu_462_p3)) else "0";
    icmp_ln1496_8_fu_491_p2 <= "1" when (unsigned(pool_window_2_V_4_fu_470_p3) < unsigned(pool_window_3_V_4_fu_478_p3)) else "0";
    icmp_ln1496_9_fu_707_p2 <= "1" when (unsigned(select_ln65_8_fu_690_p3) < unsigned(select_ln65_10_fu_702_p3)) else "0";
    icmp_ln1496_fu_399_p2 <= "1" when (unsigned(pool_window_0_V_fu_368_p3) < unsigned(pool_window_1_V_fu_376_p3)) else "0";
    icmp_ln191_1_fu_324_p2 <= "1" when (ap_sig_allocacmp_sY_load = ap_const_lv32_1) else "0";
    icmp_ln191_2_fu_334_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_3_fu_344_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_fu_314_p2 <= "1" when (sX = ap_const_lv32_1) else "0";
    icmp_ln212_fu_540_p2 <= "1" when (pX = ap_const_lv32_1C) else "0";
    icmp_ln216_fu_584_p2 <= "1" when (pY = ap_const_lv32_1C) else "0";
    icmp_ln241_fu_170_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_152_p4 = ap_const_lv10_349) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op154 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op21 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    line_buffer_Array_V_3_0_0_ce0_assign_proc : process(icmp_ln241_reg_913, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_0_we0_assign_proc : process(icmp_ln241_reg_913, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_1_ce0_assign_proc : process(icmp_ln241_reg_913, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_1_we0_assign_proc : process(icmp_ln241_reg_913, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_2_ce0_assign_proc : process(icmp_ln241_reg_913, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_2_we0_assign_proc : process(icmp_ln241_reg_913, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_3_ce0_assign_proc : process(icmp_ln241_reg_913, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_3_0_3_we0_assign_proc : process(icmp_ln241_reg_913, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_913 = ap_const_lv1_0))) then 
            line_buffer_Array_V_3_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_3_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pool_window_0_V_2_fu_411_p3 <= (kernel_data_V_3_5 & ap_const_lv10_0);
    pool_window_0_V_4_fu_454_p3 <= (kernel_data_V_3_6 & ap_const_lv10_0);
    pool_window_0_V_6_fu_497_p3 <= (kernel_data_V_3_7 & ap_const_lv10_0);
    pool_window_0_V_fu_368_p3 <= (kernel_data_V_3_4 & ap_const_lv10_0);
    pool_window_1_V_2_fu_419_p3 <= (line_buffer_Array_V_3_0_1_q0 & ap_const_lv10_0);
    pool_window_1_V_4_fu_462_p3 <= (line_buffer_Array_V_3_0_2_q0 & ap_const_lv10_0);
    pool_window_1_V_6_fu_505_p3 <= (line_buffer_Array_V_3_0_3_q0 & ap_const_lv10_0);
    pool_window_1_V_fu_376_p3 <= (line_buffer_Array_V_3_0_0_q0 & ap_const_lv10_0);
    pool_window_2_V_2_fu_427_p3 <= (kernel_data_V_3_13 & ap_const_lv10_0);
    pool_window_2_V_4_fu_470_p3 <= (kernel_data_V_3_14 & ap_const_lv10_0);
    pool_window_2_V_6_fu_513_p3 <= (kernel_data_V_3_15 & ap_const_lv10_0);
    pool_window_2_V_fu_384_p3 <= (kernel_data_V_3_12 & ap_const_lv10_0);
    pool_window_3_V_2_fu_435_p3 <= (tmp_data_1_V_3_reg_929 & ap_const_lv10_0);
    pool_window_3_V_4_fu_478_p3 <= (tmp_data_2_V_3_reg_936 & ap_const_lv10_0);
    pool_window_3_V_6_fu_521_p3 <= (tmp_data_3_V_3_reg_943 & ap_const_lv10_0);
    pool_window_3_V_fu_392_p3 <= (tmp_data_0_V_3_reg_922 & ap_const_lv10_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_2_reg_950)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln191_2_reg_950) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_27_fu_775_p6(21 downto 6);

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_950, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_950))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_2_reg_950)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln191_2_reg_950) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_28_fu_811_p6(21 downto 6);

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_950, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_950))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_2_reg_950)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln191_2_reg_950) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_29_fu_847_p6(21 downto 6);

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_950, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_950))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln191_2_reg_950)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln191_2_reg_950) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_30_fu_883_p6(21 downto 6);

    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_2_reg_950, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_2_reg_950))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln222_fu_608_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_1_fu_324_p2(0) = '1') else 
        add_ln222_fu_602_p2;
    select_ln227_fu_564_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_fu_314_p2(0) = '1') else 
        add_ln227_fu_558_p2;
    select_ln65_10_fu_702_p3 <= 
        pool_window_3_V_4_reg_1044 when (icmp_ln1496_8_reg_1056(0) = '1') else 
        pool_window_2_V_4_reg_1038;
    select_ln65_12_fu_724_p3 <= 
        pool_window_1_V_6_reg_1068 when (icmp_ln1496_3_reg_1086(0) = '1') else 
        pool_window_0_V_6_reg_1062;
    select_ln65_13_fu_627_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_1_reg_984(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_14_fu_736_p3 <= 
        pool_window_3_V_6_reg_1080 when (icmp_ln1496_10_reg_1092(0) = '1') else 
        pool_window_2_V_6_reg_1074;
    select_ln65_15_fu_648_p3 <= 
        select_ln65_13_fu_627_p3 when (icmp_ln1496_2_fu_639_p2(0) = '1') else 
        zext_ln65_fu_645_p1;
    select_ln65_16_fu_661_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_5_reg_1020(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_17_fu_682_p3 <= 
        select_ln65_16_fu_661_p3 when (icmp_ln1496_6_fu_673_p2(0) = '1') else 
        zext_ln65_1_fu_679_p1;
    select_ln65_18_fu_695_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_8_reg_1056(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_19_fu_716_p3 <= 
        select_ln65_18_fu_695_p3 when (icmp_ln1496_9_fu_707_p2(0) = '1') else 
        zext_ln65_2_fu_713_p1;
    select_ln65_20_fu_729_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_10_reg_1092(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_21_fu_750_p3 <= 
        select_ln65_20_fu_729_p3 when (icmp_ln1496_11_fu_741_p2(0) = '1') else 
        zext_ln65_3_fu_747_p1;
    select_ln65_2_fu_634_p3 <= 
        pool_window_3_V_reg_972 when (icmp_ln1496_1_reg_984(0) = '1') else 
        pool_window_2_V_reg_966;
    select_ln65_4_fu_656_p3 <= 
        pool_window_1_V_2_reg_996 when (icmp_ln1496_4_reg_1014(0) = '1') else 
        pool_window_0_V_2_reg_990;
    select_ln65_6_fu_668_p3 <= 
        pool_window_3_V_2_reg_1008 when (icmp_ln1496_5_reg_1020(0) = '1') else 
        pool_window_2_V_2_reg_1002;
    select_ln65_8_fu_690_p3 <= 
        pool_window_1_V_4_reg_1032 when (icmp_ln1496_7_reg_1050(0) = '1') else 
        pool_window_0_V_4_reg_1026;
    select_ln65_fu_622_p3 <= 
        pool_window_1_V_reg_960 when (icmp_ln1496_reg_978(0) = '1') else 
        pool_window_0_V_reg_954;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_27_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_reg_954),32));
    tmp_27_fu_775_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_reg_960),32));
    tmp_27_fu_775_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_reg_966),32));
    tmp_27_fu_775_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_reg_972),32));
    tmp_28_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_2_reg_990),32));
    tmp_28_fu_811_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_2_reg_996),32));
    tmp_28_fu_811_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_2_reg_1002),32));
    tmp_28_fu_811_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_2_reg_1008),32));
    tmp_29_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_4_reg_1026),32));
    tmp_29_fu_847_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_4_reg_1032),32));
    tmp_29_fu_847_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_4_reg_1038),32));
    tmp_29_fu_847_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_4_reg_1044),32));
    tmp_30_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_6_reg_1062),32));
    tmp_30_fu_883_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_6_reg_1068),32));
    tmp_30_fu_883_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_6_reg_1074),32));
    tmp_30_fu_883_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_6_reg_1080),32));
    zext_ln65_1_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_4_reg_1014),2));
    zext_ln65_2_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_7_reg_1050),2));
    zext_ln65_3_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_3_reg_1086),2));
    zext_ln65_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_reg_978),2));
end behav;
