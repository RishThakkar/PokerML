// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reduce_ap_fixed_18_8_0_0_0_5_Op_add_ap_fixed_18_8_0_0_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_8_V,
        x_9_V,
        x_10_V,
        x_11_V,
        x_12_V,
        ap_return,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [16:0] x_8_V;
input  [16:0] x_9_V;
input  [16:0] x_10_V;
input  [16:0] x_11_V;
input  [16:0] x_12_V;
output  [17:0] ap_return;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [17:0] p_Val2_38_fu_78_p3;
reg  signed [17:0] p_Val2_38_reg_294;
wire  signed [17:0] p_Val2_39_fu_108_p3;
reg  signed [17:0] p_Val2_39_reg_300;
wire  signed [17:0] p_Val2_42_fu_194_p3;
reg  signed [17:0] p_Val2_42_reg_306;
wire    ap_CS_fsm_state2;
reg   [16:0] ap_port_reg_x_12_V;
wire    ap_CS_fsm_state3;
wire   [17:0] p_Val2_29_fu_60_p1;
wire   [17:0] p_Val2_s_fu_56_p1;
wire   [17:0] p_Val2_33_fu_64_p2;
wire   [0:0] p_Result_s_fu_70_p3;
wire   [17:0] p_Val2_36_fu_90_p1;
wire   [17:0] p_Val2_35_fu_86_p1;
wire   [17:0] p_Val2_37_fu_94_p2;
wire   [0:0] p_Result_23_fu_100_p3;
wire  signed [18:0] lhs_V_fu_116_p1;
wire  signed [18:0] rhs_V_fu_119_p1;
wire   [18:0] ret_V_fu_122_p2;
wire   [17:0] p_Val2_41_fu_136_p2;
wire   [0:0] p_Result_25_fu_140_p3;
wire   [0:0] p_Result_24_fu_128_p3;
wire   [0:0] xor_ln786_fu_148_p2;
wire   [0:0] xor_ln340_fu_166_p2;
wire   [0:0] xor_ln340_30_fu_160_p2;
wire   [0:0] underflow_fu_154_p2;
wire   [0:0] or_ln340_fu_172_p2;
wire   [17:0] select_ln340_fu_178_p3;
wire   [17:0] select_ln388_fu_186_p3;
wire   [18:0] rhs_V_2_fu_209_p1;
wire  signed [18:0] lhs_V_2_fu_206_p1;
wire   [18:0] ret_V_2_fu_213_p2;
wire   [17:0] p_Val2_43_fu_202_p1;
wire   [17:0] p_Val2_45_fu_227_p2;
wire   [0:0] p_Result_27_fu_232_p3;
wire   [0:0] p_Result_26_fu_219_p3;
wire   [0:0] xor_ln786_13_fu_240_p2;
wire   [0:0] xor_ln340_13_fu_258_p2;
wire   [0:0] xor_ln340_31_fu_252_p2;
wire   [0:0] underflow_2_fu_246_p2;
wire   [0:0] or_ln340_15_fu_264_p2;
wire   [17:0] select_ln340_13_fu_270_p3;
wire   [17:0] select_ln388_13_fu_278_p3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_port_reg_x_12_V <= x_12_V;
        p_Val2_38_reg_294 <= p_Val2_38_fu_78_p3;
        p_Val2_39_reg_300 <= p_Val2_39_fu_108_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_42_reg_306 <= p_Val2_42_fu_194_p3;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_return = ((or_ln340_15_fu_264_p2[0:0] === 1'b1) ? select_ln340_13_fu_270_p3 : select_ln388_13_fu_278_p3);

assign lhs_V_2_fu_206_p1 = p_Val2_42_reg_306;

assign lhs_V_fu_116_p1 = p_Val2_38_reg_294;

assign or_ln340_15_fu_264_p2 = (xor_ln340_13_fu_258_p2 | p_Result_27_fu_232_p3);

assign or_ln340_fu_172_p2 = (xor_ln340_fu_166_p2 | p_Result_25_fu_140_p3);

assign p_Result_23_fu_100_p3 = p_Val2_37_fu_94_p2[32'd17];

assign p_Result_24_fu_128_p3 = ret_V_fu_122_p2[32'd18];

assign p_Result_25_fu_140_p3 = p_Val2_41_fu_136_p2[32'd17];

assign p_Result_26_fu_219_p3 = ret_V_2_fu_213_p2[32'd18];

assign p_Result_27_fu_232_p3 = p_Val2_45_fu_227_p2[32'd17];

assign p_Result_s_fu_70_p3 = p_Val2_33_fu_64_p2[32'd17];

assign p_Val2_29_fu_60_p1 = x_9_V;

assign p_Val2_33_fu_64_p2 = (p_Val2_29_fu_60_p1 + p_Val2_s_fu_56_p1);

assign p_Val2_35_fu_86_p1 = x_10_V;

assign p_Val2_36_fu_90_p1 = x_11_V;

assign p_Val2_37_fu_94_p2 = (p_Val2_36_fu_90_p1 + p_Val2_35_fu_86_p1);

assign p_Val2_38_fu_78_p3 = ((p_Result_s_fu_70_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_33_fu_64_p2);

assign p_Val2_39_fu_108_p3 = ((p_Result_23_fu_100_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_37_fu_94_p2);

assign p_Val2_41_fu_136_p2 = ($signed(p_Val2_39_reg_300) + $signed(p_Val2_38_reg_294));

assign p_Val2_42_fu_194_p3 = ((or_ln340_fu_172_p2[0:0] === 1'b1) ? select_ln340_fu_178_p3 : select_ln388_fu_186_p3);

assign p_Val2_43_fu_202_p1 = ap_port_reg_x_12_V;

assign p_Val2_45_fu_227_p2 = ($signed(p_Val2_42_reg_306) + $signed(p_Val2_43_fu_202_p1));

assign p_Val2_s_fu_56_p1 = x_8_V;

assign ret_V_2_fu_213_p2 = ($signed(rhs_V_2_fu_209_p1) + $signed(lhs_V_2_fu_206_p1));

assign ret_V_fu_122_p2 = ($signed(lhs_V_fu_116_p1) + $signed(rhs_V_fu_119_p1));

assign rhs_V_2_fu_209_p1 = ap_port_reg_x_12_V;

assign rhs_V_fu_119_p1 = p_Val2_39_reg_300;

assign select_ln340_13_fu_270_p3 = ((xor_ln340_31_fu_252_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_45_fu_227_p2);

assign select_ln340_fu_178_p3 = ((xor_ln340_30_fu_160_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_41_fu_136_p2);

assign select_ln388_13_fu_278_p3 = ((underflow_2_fu_246_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_45_fu_227_p2);

assign select_ln388_fu_186_p3 = ((underflow_fu_154_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_41_fu_136_p2);

assign underflow_2_fu_246_p2 = (xor_ln786_13_fu_240_p2 & p_Result_26_fu_219_p3);

assign underflow_fu_154_p2 = (xor_ln786_fu_148_p2 & p_Result_24_fu_128_p3);

assign xor_ln340_13_fu_258_p2 = (p_Result_26_fu_219_p3 ^ 1'd1);

assign xor_ln340_30_fu_160_p2 = (p_Result_25_fu_140_p3 ^ p_Result_24_fu_128_p3);

assign xor_ln340_31_fu_252_p2 = (p_Result_27_fu_232_p3 ^ p_Result_26_fu_219_p3);

assign xor_ln340_fu_166_p2 = (p_Result_24_fu_128_p3 ^ 1'd1);

assign xor_ln786_13_fu_240_p2 = (p_Result_27_fu_232_p3 ^ 1'd1);

assign xor_ln786_fu_148_p2 = (p_Result_25_fu_140_p3 ^ 1'd1);

endmodule //reduce_ap_fixed_18_8_0_0_0_5_Op_add_ap_fixed_18_8_0_0_0_s
