// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [5:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [5:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [5:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [5:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln41_reg_673;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln41_reg_673_pp0_iter2_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [9:0] i_0_reg_114;
wire   [0:0] icmp_ln41_fu_125_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op21;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    io_acc_block_signal_op109;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln41_reg_673_pp0_iter1_reg;
wire   [9:0] i_fu_131_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_data_0_V_reg_682;
reg   [15:0] tmp_data_1_V_reg_691;
reg   [15:0] tmp_data_2_V_reg_700;
reg   [15:0] tmp_data_3_V_reg_709;
wire   [0:0] icmp_ln718_fu_157_p2;
reg   [0:0] icmp_ln718_reg_718;
wire   [0:0] icmp_ln879_fu_173_p2;
reg   [0:0] icmp_ln879_reg_723;
wire   [0:0] icmp_ln768_fu_179_p2;
reg   [0:0] icmp_ln768_reg_728;
wire   [0:0] icmp_ln718_1_fu_189_p2;
reg   [0:0] icmp_ln718_1_reg_733;
wire   [0:0] icmp_ln879_1_fu_205_p2;
reg   [0:0] icmp_ln879_1_reg_738;
wire   [0:0] icmp_ln768_1_fu_211_p2;
reg   [0:0] icmp_ln768_1_reg_743;
wire   [0:0] icmp_ln718_2_fu_221_p2;
reg   [0:0] icmp_ln718_2_reg_748;
wire   [0:0] icmp_ln879_2_fu_237_p2;
reg   [0:0] icmp_ln879_2_reg_753;
wire   [0:0] icmp_ln768_2_fu_243_p2;
reg   [0:0] icmp_ln768_2_reg_758;
wire   [0:0] icmp_ln718_3_fu_253_p2;
reg   [0:0] icmp_ln718_3_reg_763;
wire   [0:0] icmp_ln879_3_fu_269_p2;
reg   [0:0] icmp_ln879_3_reg_768;
wire   [0:0] icmp_ln768_3_fu_275_p2;
reg   [0:0] icmp_ln768_3_reg_773;
wire   [5:0] tmp_data_0_V_1_fu_371_p3;
reg   [5:0] tmp_data_0_V_1_reg_778;
wire   [5:0] tmp_data_1_V_1_fu_469_p3;
reg   [5:0] tmp_data_1_V_1_reg_783;
wire   [5:0] tmp_data_2_V_1_fu_567_p3;
reg   [5:0] tmp_data_2_V_1_reg_788;
wire   [5:0] tmp_data_3_V_1_fu_665_p3;
reg   [5:0] tmp_data_3_V_1_reg_793;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] trunc_ln718_fu_153_p1;
wire   [5:0] p_Result_s_fu_163_p4;
wire   [2:0] trunc_ln718_1_fu_185_p1;
wire   [5:0] p_Result_10_1_fu_195_p4;
wire   [2:0] trunc_ln718_2_fu_217_p1;
wire   [5:0] p_Result_10_2_fu_227_p4;
wire   [2:0] trunc_ln718_3_fu_249_p1;
wire   [5:0] p_Result_10_3_fu_259_p4;
wire   [0:0] tmp_57_fu_295_p3;
wire   [0:0] or_ln412_fu_309_p2;
wire   [0:0] tmp_59_fu_314_p3;
wire   [0:0] and_ln415_fu_321_p2;
wire   [5:0] zext_ln415_fu_327_p1;
wire   [5:0] trunc_ln_fu_286_p4;
wire   [5:0] add_ln415_fu_331_p2;
wire   [0:0] tmp_60_fu_337_p3;
wire   [0:0] tmp_58_fu_302_p3;
wire   [0:0] xor_ln416_fu_345_p2;
wire   [0:0] and_ln416_fu_351_p2;
wire   [0:0] select_ln777_fu_357_p3;
wire   [0:0] icmp_ln1494_fu_281_p2;
wire   [5:0] select_ln340_fu_363_p3;
wire   [0:0] tmp_61_fu_393_p3;
wire   [0:0] or_ln412_1_fu_407_p2;
wire   [0:0] tmp_63_fu_412_p3;
wire   [0:0] and_ln415_1_fu_419_p2;
wire   [5:0] zext_ln415_1_fu_425_p1;
wire   [5:0] trunc_ln708_s_fu_384_p4;
wire   [5:0] add_ln415_1_fu_429_p2;
wire   [0:0] tmp_64_fu_435_p3;
wire   [0:0] tmp_62_fu_400_p3;
wire   [0:0] xor_ln416_1_fu_443_p2;
wire   [0:0] and_ln416_1_fu_449_p2;
wire   [0:0] select_ln777_1_fu_455_p3;
wire   [0:0] icmp_ln1494_1_fu_379_p2;
wire   [5:0] select_ln340_1_fu_461_p3;
wire   [0:0] tmp_65_fu_491_p3;
wire   [0:0] or_ln412_2_fu_505_p2;
wire   [0:0] tmp_67_fu_510_p3;
wire   [0:0] and_ln415_2_fu_517_p2;
wire   [5:0] zext_ln415_2_fu_523_p1;
wire   [5:0] trunc_ln708_1_fu_482_p4;
wire   [5:0] add_ln415_2_fu_527_p2;
wire   [0:0] tmp_68_fu_533_p3;
wire   [0:0] tmp_66_fu_498_p3;
wire   [0:0] xor_ln416_2_fu_541_p2;
wire   [0:0] and_ln416_2_fu_547_p2;
wire   [0:0] select_ln777_2_fu_553_p3;
wire   [0:0] icmp_ln1494_2_fu_477_p2;
wire   [5:0] select_ln340_2_fu_559_p3;
wire   [0:0] tmp_69_fu_589_p3;
wire   [0:0] or_ln412_3_fu_603_p2;
wire   [0:0] tmp_71_fu_608_p3;
wire   [0:0] and_ln415_3_fu_615_p2;
wire   [5:0] zext_ln415_3_fu_621_p1;
wire   [5:0] trunc_ln708_2_fu_580_p4;
wire   [5:0] add_ln415_3_fu_625_p2;
wire   [0:0] tmp_72_fu_631_p3;
wire   [0:0] tmp_70_fu_596_p3;
wire   [0:0] xor_ln416_3_fu_639_p2;
wire   [0:0] and_ln416_3_fu_645_p2;
wire   [0:0] select_ln777_3_fu_651_p3;
wire   [0:0] icmp_ln1494_3_fu_575_p2;
wire   [5:0] select_ln340_3_fu_657_p3;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_114 <= i_fu_131_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_114 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln41_reg_673 <= icmp_ln41_fu_125_p2;
        icmp_ln41_reg_673_pp0_iter1_reg <= icmp_ln41_reg_673;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln41_reg_673_pp0_iter2_reg <= icmp_ln41_reg_673_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_673 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln718_1_reg_733 <= icmp_ln718_1_fu_189_p2;
        icmp_ln718_2_reg_748 <= icmp_ln718_2_fu_221_p2;
        icmp_ln718_3_reg_763 <= icmp_ln718_3_fu_253_p2;
        icmp_ln718_reg_718 <= icmp_ln718_fu_157_p2;
        icmp_ln768_1_reg_743 <= icmp_ln768_1_fu_211_p2;
        icmp_ln768_2_reg_758 <= icmp_ln768_2_fu_243_p2;
        icmp_ln768_3_reg_773 <= icmp_ln768_3_fu_275_p2;
        icmp_ln768_reg_728 <= icmp_ln768_fu_179_p2;
        icmp_ln879_1_reg_738 <= icmp_ln879_1_fu_205_p2;
        icmp_ln879_2_reg_753 <= icmp_ln879_2_fu_237_p2;
        icmp_ln879_3_reg_768 <= icmp_ln879_3_fu_269_p2;
        icmp_ln879_reg_723 <= icmp_ln879_fu_173_p2;
        tmp_data_0_V_reg_682 <= data_V_data_0_V_dout;
        tmp_data_1_V_reg_691 <= data_V_data_1_V_dout;
        tmp_data_2_V_reg_700 <= data_V_data_2_V_dout;
        tmp_data_3_V_reg_709 <= data_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_673_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_1_reg_778 <= tmp_data_0_V_1_fu_371_p3;
        tmp_data_1_V_1_reg_783 <= tmp_data_1_V_1_fu_469_p3;
        tmp_data_2_V_1_reg_788 <= tmp_data_2_V_1_fu_567_p3;
        tmp_data_3_V_1_reg_793 <= tmp_data_3_V_1_fu_665_p3;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_125_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_673_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_125_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_125_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_1_fu_429_p2 = (zext_ln415_1_fu_425_p1 + trunc_ln708_s_fu_384_p4);

assign add_ln415_2_fu_527_p2 = (zext_ln415_2_fu_523_p1 + trunc_ln708_1_fu_482_p4);

assign add_ln415_3_fu_625_p2 = (zext_ln415_3_fu_621_p1 + trunc_ln708_2_fu_580_p4);

assign add_ln415_fu_331_p2 = (zext_ln415_fu_327_p1 + trunc_ln_fu_286_p4);

assign and_ln415_1_fu_419_p2 = (tmp_63_fu_412_p3 & or_ln412_1_fu_407_p2);

assign and_ln415_2_fu_517_p2 = (tmp_67_fu_510_p3 & or_ln412_2_fu_505_p2);

assign and_ln415_3_fu_615_p2 = (tmp_71_fu_608_p3 & or_ln412_3_fu_603_p2);

assign and_ln415_fu_321_p2 = (tmp_59_fu_314_p3 & or_ln412_fu_309_p2);

assign and_ln416_1_fu_449_p2 = (xor_ln416_1_fu_443_p2 & tmp_62_fu_400_p3);

assign and_ln416_2_fu_547_p2 = (xor_ln416_2_fu_541_p2 & tmp_66_fu_498_p3);

assign and_ln416_3_fu_645_p2 = (xor_ln416_3_fu_639_p2 & tmp_70_fu_596_p3);

assign and_ln416_fu_351_p2 = (xor_ln416_fu_345_p2 & tmp_58_fu_302_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln41_reg_673_pp0_iter2_reg == 1'd0) & (io_acc_block_signal_op109 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln41_reg_673 == 1'd0) & (io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln41_reg_673_pp0_iter2_reg == 1'd0) & (io_acc_block_signal_op109 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln41_reg_673 == 1'd0) & (io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln41_reg_673_pp0_iter2_reg == 1'd0) & (io_acc_block_signal_op109 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln41_reg_673 == 1'd0) & (io_acc_block_signal_op21 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln41_reg_673 == 1'd0) & (io_acc_block_signal_op21 == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((icmp_ln41_reg_673_pp0_iter2_reg == 1'd0) & (io_acc_block_signal_op109 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_131_p2 = (i_0_reg_114 + 10'd1);

assign icmp_ln1494_1_fu_379_p2 = (($signed(tmp_data_1_V_reg_691) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_477_p2 = (($signed(tmp_data_2_V_reg_700) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_575_p2 = (($signed(tmp_data_3_V_reg_709) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_281_p2 = (($signed(tmp_data_0_V_reg_682) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_125_p2 = ((i_0_reg_114 == 10'd841) ? 1'b1 : 1'b0);

assign icmp_ln718_1_fu_189_p2 = ((trunc_ln718_1_fu_185_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_2_fu_221_p2 = ((trunc_ln718_2_fu_217_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_3_fu_253_p2 = ((trunc_ln718_3_fu_249_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_fu_157_p2 = ((trunc_ln718_fu_153_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_1_fu_211_p2 = ((p_Result_10_1_fu_195_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_2_fu_243_p2 = ((p_Result_10_2_fu_227_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_3_fu_275_p2 = ((p_Result_10_3_fu_259_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_179_p2 = ((p_Result_s_fu_163_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_205_p2 = ((p_Result_10_1_fu_195_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_237_p2 = ((p_Result_10_2_fu_227_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_269_p2 = ((p_Result_10_3_fu_259_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_173_p2 = ((p_Result_s_fu_163_p4 == 6'd63) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op109 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op21 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln412_1_fu_407_p2 = (tmp_61_fu_393_p3 | icmp_ln718_1_reg_733);

assign or_ln412_2_fu_505_p2 = (tmp_65_fu_491_p3 | icmp_ln718_2_reg_748);

assign or_ln412_3_fu_603_p2 = (tmp_69_fu_589_p3 | icmp_ln718_3_reg_763);

assign or_ln412_fu_309_p2 = (tmp_57_fu_295_p3 | icmp_ln718_reg_718);

assign p_Result_10_1_fu_195_p4 = {{data_V_data_1_V_dout[15:10]}};

assign p_Result_10_2_fu_227_p4 = {{data_V_data_2_V_dout[15:10]}};

assign p_Result_10_3_fu_259_p4 = {{data_V_data_3_V_dout[15:10]}};

assign p_Result_s_fu_163_p4 = {{data_V_data_0_V_dout[15:10]}};

assign res_V_data_0_V_din = tmp_data_0_V_1_reg_778;

assign res_V_data_1_V_din = tmp_data_1_V_1_reg_783;

assign res_V_data_2_V_din = tmp_data_2_V_1_reg_788;

assign res_V_data_3_V_din = tmp_data_3_V_1_reg_793;

assign select_ln340_1_fu_461_p3 = ((select_ln777_1_fu_455_p3[0:0] === 1'b1) ? add_ln415_1_fu_429_p2 : 6'd63);

assign select_ln340_2_fu_559_p3 = ((select_ln777_2_fu_553_p3[0:0] === 1'b1) ? add_ln415_2_fu_527_p2 : 6'd63);

assign select_ln340_3_fu_657_p3 = ((select_ln777_3_fu_651_p3[0:0] === 1'b1) ? add_ln415_3_fu_625_p2 : 6'd63);

assign select_ln340_fu_363_p3 = ((select_ln777_fu_357_p3[0:0] === 1'b1) ? add_ln415_fu_331_p2 : 6'd63);

assign select_ln777_1_fu_455_p3 = ((and_ln416_1_fu_449_p2[0:0] === 1'b1) ? icmp_ln879_1_reg_738 : icmp_ln768_1_reg_743);

assign select_ln777_2_fu_553_p3 = ((and_ln416_2_fu_547_p2[0:0] === 1'b1) ? icmp_ln879_2_reg_753 : icmp_ln768_2_reg_758);

assign select_ln777_3_fu_651_p3 = ((and_ln416_3_fu_645_p2[0:0] === 1'b1) ? icmp_ln879_3_reg_768 : icmp_ln768_3_reg_773);

assign select_ln777_fu_357_p3 = ((and_ln416_fu_351_p2[0:0] === 1'b1) ? icmp_ln879_reg_723 : icmp_ln768_reg_728);

assign start_out = real_start;

assign tmp_57_fu_295_p3 = tmp_data_0_V_reg_682[32'd4];

assign tmp_58_fu_302_p3 = tmp_data_0_V_reg_682[32'd9];

assign tmp_59_fu_314_p3 = tmp_data_0_V_reg_682[32'd3];

assign tmp_60_fu_337_p3 = add_ln415_fu_331_p2[32'd5];

assign tmp_61_fu_393_p3 = tmp_data_1_V_reg_691[32'd4];

assign tmp_62_fu_400_p3 = tmp_data_1_V_reg_691[32'd9];

assign tmp_63_fu_412_p3 = tmp_data_1_V_reg_691[32'd3];

assign tmp_64_fu_435_p3 = add_ln415_1_fu_429_p2[32'd5];

assign tmp_65_fu_491_p3 = tmp_data_2_V_reg_700[32'd4];

assign tmp_66_fu_498_p3 = tmp_data_2_V_reg_700[32'd9];

assign tmp_67_fu_510_p3 = tmp_data_2_V_reg_700[32'd3];

assign tmp_68_fu_533_p3 = add_ln415_2_fu_527_p2[32'd5];

assign tmp_69_fu_589_p3 = tmp_data_3_V_reg_709[32'd4];

assign tmp_70_fu_596_p3 = tmp_data_3_V_reg_709[32'd9];

assign tmp_71_fu_608_p3 = tmp_data_3_V_reg_709[32'd3];

assign tmp_72_fu_631_p3 = add_ln415_3_fu_625_p2[32'd5];

assign tmp_data_0_V_1_fu_371_p3 = ((icmp_ln1494_fu_281_p2[0:0] === 1'b1) ? select_ln340_fu_363_p3 : 6'd0);

assign tmp_data_1_V_1_fu_469_p3 = ((icmp_ln1494_1_fu_379_p2[0:0] === 1'b1) ? select_ln340_1_fu_461_p3 : 6'd0);

assign tmp_data_2_V_1_fu_567_p3 = ((icmp_ln1494_2_fu_477_p2[0:0] === 1'b1) ? select_ln340_2_fu_559_p3 : 6'd0);

assign tmp_data_3_V_1_fu_665_p3 = ((icmp_ln1494_3_fu_575_p2[0:0] === 1'b1) ? select_ln340_3_fu_657_p3 : 6'd0);

assign trunc_ln708_1_fu_482_p4 = {{tmp_data_2_V_reg_700[9:4]}};

assign trunc_ln708_2_fu_580_p4 = {{tmp_data_3_V_reg_709[9:4]}};

assign trunc_ln708_s_fu_384_p4 = {{tmp_data_1_V_reg_691[9:4]}};

assign trunc_ln718_1_fu_185_p1 = data_V_data_1_V_dout[2:0];

assign trunc_ln718_2_fu_217_p1 = data_V_data_2_V_dout[2:0];

assign trunc_ln718_3_fu_249_p1 = data_V_data_3_V_dout[2:0];

assign trunc_ln718_fu_153_p1 = data_V_data_0_V_dout[2:0];

assign trunc_ln_fu_286_p4 = {{tmp_data_0_V_reg_682[9:4]}};

assign xor_ln416_1_fu_443_p2 = (tmp_64_fu_435_p3 ^ 1'd1);

assign xor_ln416_2_fu_541_p2 = (tmp_68_fu_533_p3 ^ 1'd1);

assign xor_ln416_3_fu_639_p2 = (tmp_72_fu_631_p3 ^ 1'd1);

assign xor_ln416_fu_345_p2 = (tmp_60_fu_337_p3 ^ 1'd1);

assign zext_ln415_1_fu_425_p1 = and_ln415_1_fu_419_p2;

assign zext_ln415_2_fu_523_p1 = and_ln415_2_fu_517_p2;

assign zext_ln415_3_fu_621_p1 = and_ln415_3_fu_615_p2;

assign zext_ln415_fu_327_p1 = and_ln415_fu_321_p2;

endmodule //relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config8_s
