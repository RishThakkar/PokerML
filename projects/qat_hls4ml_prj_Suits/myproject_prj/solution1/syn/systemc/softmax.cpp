// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "softmax.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic softmax::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic softmax::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> softmax::ap_ST_fsm_state1 = "1";
const sc_lv<11> softmax::ap_ST_fsm_state2 = "10";
const sc_lv<11> softmax::ap_ST_fsm_state3 = "100";
const sc_lv<11> softmax::ap_ST_fsm_state4 = "1000";
const sc_lv<11> softmax::ap_ST_fsm_state5 = "10000";
const sc_lv<11> softmax::ap_ST_fsm_state6 = "100000";
const sc_lv<11> softmax::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> softmax::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> softmax::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> softmax::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> softmax::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> softmax::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> softmax::ap_const_lv32_A = "1010";
const bool softmax::ap_const_boolean_1 = true;

softmax::softmax(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_softmax_stable_fu_128 = new softmax_stable("grp_softmax_stable_fu_128");
    grp_softmax_stable_fu_128->ap_clk(ap_clk);
    grp_softmax_stable_fu_128->ap_rst(ap_rst);
    grp_softmax_stable_fu_128->ap_start(grp_softmax_stable_fu_128_ap_start);
    grp_softmax_stable_fu_128->ap_done(grp_softmax_stable_fu_128_ap_done);
    grp_softmax_stable_fu_128->ap_idle(grp_softmax_stable_fu_128_ap_idle);
    grp_softmax_stable_fu_128->ap_ready(grp_softmax_stable_fu_128_ap_ready);
    grp_softmax_stable_fu_128->data_V_data_0_V_dout(data_V_data_0_V_dout);
    grp_softmax_stable_fu_128->data_V_data_0_V_empty_n(data_V_data_0_V_empty_n);
    grp_softmax_stable_fu_128->data_V_data_0_V_read(grp_softmax_stable_fu_128_data_V_data_0_V_read);
    grp_softmax_stable_fu_128->data_V_data_1_V_dout(data_V_data_1_V_dout);
    grp_softmax_stable_fu_128->data_V_data_1_V_empty_n(data_V_data_1_V_empty_n);
    grp_softmax_stable_fu_128->data_V_data_1_V_read(grp_softmax_stable_fu_128_data_V_data_1_V_read);
    grp_softmax_stable_fu_128->data_V_data_2_V_dout(data_V_data_2_V_dout);
    grp_softmax_stable_fu_128->data_V_data_2_V_empty_n(data_V_data_2_V_empty_n);
    grp_softmax_stable_fu_128->data_V_data_2_V_read(grp_softmax_stable_fu_128_data_V_data_2_V_read);
    grp_softmax_stable_fu_128->data_V_data_3_V_dout(data_V_data_3_V_dout);
    grp_softmax_stable_fu_128->data_V_data_3_V_empty_n(data_V_data_3_V_empty_n);
    grp_softmax_stable_fu_128->data_V_data_3_V_read(grp_softmax_stable_fu_128_data_V_data_3_V_read);
    grp_softmax_stable_fu_128->res_V_data_0_V_din(grp_softmax_stable_fu_128_res_V_data_0_V_din);
    grp_softmax_stable_fu_128->res_V_data_0_V_full_n(res_V_data_0_V_full_n);
    grp_softmax_stable_fu_128->res_V_data_0_V_write(grp_softmax_stable_fu_128_res_V_data_0_V_write);
    grp_softmax_stable_fu_128->res_V_data_1_V_din(grp_softmax_stable_fu_128_res_V_data_1_V_din);
    grp_softmax_stable_fu_128->res_V_data_1_V_full_n(res_V_data_1_V_full_n);
    grp_softmax_stable_fu_128->res_V_data_1_V_write(grp_softmax_stable_fu_128_res_V_data_1_V_write);
    grp_softmax_stable_fu_128->res_V_data_2_V_din(grp_softmax_stable_fu_128_res_V_data_2_V_din);
    grp_softmax_stable_fu_128->res_V_data_2_V_full_n(res_V_data_2_V_full_n);
    grp_softmax_stable_fu_128->res_V_data_2_V_write(grp_softmax_stable_fu_128_res_V_data_2_V_write);
    grp_softmax_stable_fu_128->res_V_data_3_V_din(grp_softmax_stable_fu_128_res_V_data_3_V_din);
    grp_softmax_stable_fu_128->res_V_data_3_V_full_n(res_V_data_3_V_full_n);
    grp_softmax_stable_fu_128->res_V_data_3_V_write(grp_softmax_stable_fu_128_res_V_data_3_V_write);
    grp_softmax_stable_fu_128->data_V_data_0_V_blk_n(grp_softmax_stable_fu_128_data_V_data_0_V_blk_n);
    grp_softmax_stable_fu_128->data_V_data_1_V_blk_n(grp_softmax_stable_fu_128_data_V_data_1_V_blk_n);
    grp_softmax_stable_fu_128->data_V_data_2_V_blk_n(grp_softmax_stable_fu_128_data_V_data_2_V_blk_n);
    grp_softmax_stable_fu_128->data_V_data_3_V_blk_n(grp_softmax_stable_fu_128_data_V_data_3_V_blk_n);
    grp_softmax_stable_fu_128->res_V_data_0_V_blk_n(grp_softmax_stable_fu_128_res_V_data_0_V_blk_n);
    grp_softmax_stable_fu_128->res_V_data_1_V_blk_n(grp_softmax_stable_fu_128_res_V_data_1_V_blk_n);
    grp_softmax_stable_fu_128->res_V_data_2_V_blk_n(grp_softmax_stable_fu_128_res_V_data_2_V_blk_n);
    grp_softmax_stable_fu_128->res_V_data_3_V_blk_n(grp_softmax_stable_fu_128_res_V_data_3_V_blk_n);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_0_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_1_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_2_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_3_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_0_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_1_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_2_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_3_V_blk_n );

    SC_METHOD(thread_ap_block_state11);
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_0_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_1_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_2_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_3_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_0_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_1_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_2_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_3_V_blk_n );

    SC_METHOD(thread_ap_block_state1_ignore_call8);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_0_V_blk_n );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_1_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_2_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_3_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_0_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_1_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_2_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_3_V_blk_n );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_0_V_blk_n );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_1_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_2_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_3_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_0_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_1_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_2_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_3_V_blk_n );

    SC_METHOD(thread_data_V_data_0_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_0_V_blk_n );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_data_V_data_0_V_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_0_V_read );

    SC_METHOD(thread_data_V_data_1_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_1_V_blk_n );

    SC_METHOD(thread_data_V_data_1_V_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_1_V_read );

    SC_METHOD(thread_data_V_data_2_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_2_V_blk_n );

    SC_METHOD(thread_data_V_data_2_V_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_2_V_read );

    SC_METHOD(thread_data_V_data_3_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_3_V_blk_n );

    SC_METHOD(thread_data_V_data_3_V_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_3_V_read );

    SC_METHOD(thread_grp_softmax_stable_fu_128_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_res_V_data_0_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_0_V_blk_n );

    SC_METHOD(thread_res_V_data_0_V_din);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_0_V_din );

    SC_METHOD(thread_res_V_data_0_V_write);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_0_V_write );

    SC_METHOD(thread_res_V_data_1_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_1_V_blk_n );

    SC_METHOD(thread_res_V_data_1_V_din);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_1_V_din );

    SC_METHOD(thread_res_V_data_1_V_write);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_1_V_write );

    SC_METHOD(thread_res_V_data_2_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_2_V_blk_n );

    SC_METHOD(thread_res_V_data_2_V_din);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_2_V_din );

    SC_METHOD(thread_res_V_data_2_V_write);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_2_V_write );

    SC_METHOD(thread_res_V_data_3_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_3_V_blk_n );

    SC_METHOD(thread_res_V_data_3_V_din);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_3_V_din );

    SC_METHOD(thread_res_V_data_3_V_write);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_3_V_write );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_0_V_blk_n );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_1_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_2_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_data_V_data_3_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_0_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_1_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_2_V_blk_n );
    sensitive << ( grp_softmax_stable_fu_128_res_V_data_3_V_blk_n );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "softmax_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_V_data_0_V_dout, "(port)data_V_data_0_V_dout");
    sc_trace(mVcdFile, data_V_data_0_V_empty_n, "(port)data_V_data_0_V_empty_n");
    sc_trace(mVcdFile, data_V_data_0_V_read, "(port)data_V_data_0_V_read");
    sc_trace(mVcdFile, data_V_data_1_V_dout, "(port)data_V_data_1_V_dout");
    sc_trace(mVcdFile, data_V_data_1_V_empty_n, "(port)data_V_data_1_V_empty_n");
    sc_trace(mVcdFile, data_V_data_1_V_read, "(port)data_V_data_1_V_read");
    sc_trace(mVcdFile, data_V_data_2_V_dout, "(port)data_V_data_2_V_dout");
    sc_trace(mVcdFile, data_V_data_2_V_empty_n, "(port)data_V_data_2_V_empty_n");
    sc_trace(mVcdFile, data_V_data_2_V_read, "(port)data_V_data_2_V_read");
    sc_trace(mVcdFile, data_V_data_3_V_dout, "(port)data_V_data_3_V_dout");
    sc_trace(mVcdFile, data_V_data_3_V_empty_n, "(port)data_V_data_3_V_empty_n");
    sc_trace(mVcdFile, data_V_data_3_V_read, "(port)data_V_data_3_V_read");
    sc_trace(mVcdFile, res_V_data_0_V_din, "(port)res_V_data_0_V_din");
    sc_trace(mVcdFile, res_V_data_0_V_full_n, "(port)res_V_data_0_V_full_n");
    sc_trace(mVcdFile, res_V_data_0_V_write, "(port)res_V_data_0_V_write");
    sc_trace(mVcdFile, res_V_data_1_V_din, "(port)res_V_data_1_V_din");
    sc_trace(mVcdFile, res_V_data_1_V_full_n, "(port)res_V_data_1_V_full_n");
    sc_trace(mVcdFile, res_V_data_1_V_write, "(port)res_V_data_1_V_write");
    sc_trace(mVcdFile, res_V_data_2_V_din, "(port)res_V_data_2_V_din");
    sc_trace(mVcdFile, res_V_data_2_V_full_n, "(port)res_V_data_2_V_full_n");
    sc_trace(mVcdFile, res_V_data_2_V_write, "(port)res_V_data_2_V_write");
    sc_trace(mVcdFile, res_V_data_3_V_din, "(port)res_V_data_3_V_din");
    sc_trace(mVcdFile, res_V_data_3_V_full_n, "(port)res_V_data_3_V_full_n");
    sc_trace(mVcdFile, res_V_data_3_V_write, "(port)res_V_data_3_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_data_V_data_0_V_blk_n, "grp_softmax_stable_fu_128_data_V_data_0_V_blk_n");
    sc_trace(mVcdFile, data_V_data_0_V_blk_n, "data_V_data_0_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_data_V_data_1_V_blk_n, "grp_softmax_stable_fu_128_data_V_data_1_V_blk_n");
    sc_trace(mVcdFile, data_V_data_1_V_blk_n, "data_V_data_1_V_blk_n");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_data_V_data_2_V_blk_n, "grp_softmax_stable_fu_128_data_V_data_2_V_blk_n");
    sc_trace(mVcdFile, data_V_data_2_V_blk_n, "data_V_data_2_V_blk_n");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_data_V_data_3_V_blk_n, "grp_softmax_stable_fu_128_data_V_data_3_V_blk_n");
    sc_trace(mVcdFile, data_V_data_3_V_blk_n, "data_V_data_3_V_blk_n");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_res_V_data_0_V_blk_n, "grp_softmax_stable_fu_128_res_V_data_0_V_blk_n");
    sc_trace(mVcdFile, res_V_data_0_V_blk_n, "res_V_data_0_V_blk_n");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_res_V_data_1_V_blk_n, "grp_softmax_stable_fu_128_res_V_data_1_V_blk_n");
    sc_trace(mVcdFile, res_V_data_1_V_blk_n, "res_V_data_1_V_blk_n");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_res_V_data_2_V_blk_n, "grp_softmax_stable_fu_128_res_V_data_2_V_blk_n");
    sc_trace(mVcdFile, res_V_data_2_V_blk_n, "res_V_data_2_V_blk_n");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_res_V_data_3_V_blk_n, "grp_softmax_stable_fu_128_res_V_data_3_V_blk_n");
    sc_trace(mVcdFile, res_V_data_3_V_blk_n, "res_V_data_3_V_blk_n");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_ap_start, "grp_softmax_stable_fu_128_ap_start");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_ap_done, "grp_softmax_stable_fu_128_ap_done");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_ap_idle, "grp_softmax_stable_fu_128_ap_idle");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_ap_ready, "grp_softmax_stable_fu_128_ap_ready");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_data_V_data_0_V_read, "grp_softmax_stable_fu_128_data_V_data_0_V_read");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_data_V_data_1_V_read, "grp_softmax_stable_fu_128_data_V_data_1_V_read");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_data_V_data_2_V_read, "grp_softmax_stable_fu_128_data_V_data_2_V_read");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_data_V_data_3_V_read, "grp_softmax_stable_fu_128_data_V_data_3_V_read");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_res_V_data_0_V_din, "grp_softmax_stable_fu_128_res_V_data_0_V_din");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_res_V_data_0_V_write, "grp_softmax_stable_fu_128_res_V_data_0_V_write");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_res_V_data_1_V_din, "grp_softmax_stable_fu_128_res_V_data_1_V_din");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_res_V_data_1_V_write, "grp_softmax_stable_fu_128_res_V_data_1_V_write");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_res_V_data_2_V_din, "grp_softmax_stable_fu_128_res_V_data_2_V_din");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_res_V_data_2_V_write, "grp_softmax_stable_fu_128_res_V_data_2_V_write");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_res_V_data_3_V_din, "grp_softmax_stable_fu_128_res_V_data_3_V_din");
    sc_trace(mVcdFile, grp_softmax_stable_fu_128_res_V_data_3_V_write, "grp_softmax_stable_fu_128_res_V_data_3_V_write");
    sc_trace(mVcdFile, ap_block_state1_ignore_call8, "ap_block_state1_ignore_call8");
    sc_trace(mVcdFile, ap_block_state11, "ap_block_state11");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
#endif

    }
}

softmax::~softmax() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_softmax_stable_fu_128;
}

void softmax::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_3_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_3_V_blk_n.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
}

void softmax::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void softmax::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void softmax::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_3_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_3_V_blk_n.read()));
}

void softmax::thread_ap_block_state11() {
    ap_block_state11 = (esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_3_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_3_V_blk_n.read()));
}

void softmax::thread_ap_block_state1_ignore_call8() {
    ap_block_state1_ignore_call8 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void softmax::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_3_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_3_V_blk_n.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void softmax::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void softmax::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_3_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_3_V_blk_n.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void softmax::thread_data_V_data_0_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        data_V_data_0_V_blk_n = grp_softmax_stable_fu_128_data_V_data_0_V_blk_n.read();
    } else {
        data_V_data_0_V_blk_n = ap_const_logic_1;
    }
}

void softmax::thread_data_V_data_0_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        data_V_data_0_V_read = grp_softmax_stable_fu_128_data_V_data_0_V_read.read();
    } else {
        data_V_data_0_V_read = ap_const_logic_0;
    }
}

void softmax::thread_data_V_data_1_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        data_V_data_1_V_blk_n = grp_softmax_stable_fu_128_data_V_data_1_V_blk_n.read();
    } else {
        data_V_data_1_V_blk_n = ap_const_logic_1;
    }
}

void softmax::thread_data_V_data_1_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        data_V_data_1_V_read = grp_softmax_stable_fu_128_data_V_data_1_V_read.read();
    } else {
        data_V_data_1_V_read = ap_const_logic_0;
    }
}

void softmax::thread_data_V_data_2_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        data_V_data_2_V_blk_n = grp_softmax_stable_fu_128_data_V_data_2_V_blk_n.read();
    } else {
        data_V_data_2_V_blk_n = ap_const_logic_1;
    }
}

void softmax::thread_data_V_data_2_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        data_V_data_2_V_read = grp_softmax_stable_fu_128_data_V_data_2_V_read.read();
    } else {
        data_V_data_2_V_read = ap_const_logic_0;
    }
}

void softmax::thread_data_V_data_3_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        data_V_data_3_V_blk_n = grp_softmax_stable_fu_128_data_V_data_3_V_blk_n.read();
    } else {
        data_V_data_3_V_blk_n = ap_const_logic_1;
    }
}

void softmax::thread_data_V_data_3_V_read() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        data_V_data_3_V_read = grp_softmax_stable_fu_128_data_V_data_3_V_read.read();
    } else {
        data_V_data_3_V_read = ap_const_logic_0;
    }
}

void softmax::thread_grp_softmax_stable_fu_128_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        grp_softmax_stable_fu_128_ap_start = ap_const_logic_1;
    } else {
        grp_softmax_stable_fu_128_ap_start = ap_const_logic_0;
    }
}

void softmax::thread_res_V_data_0_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        res_V_data_0_V_blk_n = grp_softmax_stable_fu_128_res_V_data_0_V_blk_n.read();
    } else {
        res_V_data_0_V_blk_n = ap_const_logic_1;
    }
}

void softmax::thread_res_V_data_0_V_din() {
    res_V_data_0_V_din = grp_softmax_stable_fu_128_res_V_data_0_V_din.read();
}

void softmax::thread_res_V_data_0_V_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        res_V_data_0_V_write = grp_softmax_stable_fu_128_res_V_data_0_V_write.read();
    } else {
        res_V_data_0_V_write = ap_const_logic_0;
    }
}

void softmax::thread_res_V_data_1_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        res_V_data_1_V_blk_n = grp_softmax_stable_fu_128_res_V_data_1_V_blk_n.read();
    } else {
        res_V_data_1_V_blk_n = ap_const_logic_1;
    }
}

void softmax::thread_res_V_data_1_V_din() {
    res_V_data_1_V_din = grp_softmax_stable_fu_128_res_V_data_1_V_din.read();
}

void softmax::thread_res_V_data_1_V_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        res_V_data_1_V_write = grp_softmax_stable_fu_128_res_V_data_1_V_write.read();
    } else {
        res_V_data_1_V_write = ap_const_logic_0;
    }
}

void softmax::thread_res_V_data_2_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        res_V_data_2_V_blk_n = grp_softmax_stable_fu_128_res_V_data_2_V_blk_n.read();
    } else {
        res_V_data_2_V_blk_n = ap_const_logic_1;
    }
}

void softmax::thread_res_V_data_2_V_din() {
    res_V_data_2_V_din = grp_softmax_stable_fu_128_res_V_data_2_V_din.read();
}

void softmax::thread_res_V_data_2_V_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        res_V_data_2_V_write = grp_softmax_stable_fu_128_res_V_data_2_V_write.read();
    } else {
        res_V_data_2_V_write = ap_const_logic_0;
    }
}

void softmax::thread_res_V_data_3_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        res_V_data_3_V_blk_n = grp_softmax_stable_fu_128_res_V_data_3_V_blk_n.read();
    } else {
        res_V_data_3_V_blk_n = ap_const_logic_1;
    }
}

void softmax::thread_res_V_data_3_V_din() {
    res_V_data_3_V_din = grp_softmax_stable_fu_128_res_V_data_3_V_din.read();
}

void softmax::thread_res_V_data_3_V_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        res_V_data_3_V_write = grp_softmax_stable_fu_128_res_V_data_3_V_write.read();
    } else {
        res_V_data_3_V_write = ap_const_logic_0;
    }
}

void softmax::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_3_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_3_V_blk_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_data_V_data_3_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_0_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_1_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_2_V_blk_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_softmax_stable_fu_128_res_V_data_3_V_blk_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXX";
            break;
    }
}

}

