// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [5:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [5:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [5:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [5:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_1;
reg   [31:0] sX_1;
reg   [31:0] pY_1;
reg   [31:0] sY_1;
reg   [5:0] kernel_data_V_2_4;
reg   [5:0] kernel_data_V_2_5;
reg   [5:0] kernel_data_V_2_6;
reg   [5:0] kernel_data_V_2_7;
reg   [5:0] kernel_data_V_2_12;
reg   [5:0] kernel_data_V_2_13;
reg   [5:0] kernel_data_V_2_14;
reg   [5:0] kernel_data_V_2_15;
reg    line_buffer_Array_V_2_0_0_ce0;
reg    line_buffer_Array_V_2_0_0_we0;
wire   [5:0] line_buffer_Array_V_2_0_0_q0;
reg    line_buffer_Array_V_2_0_1_ce0;
reg    line_buffer_Array_V_2_0_1_we0;
wire   [5:0] line_buffer_Array_V_2_0_1_q0;
reg    line_buffer_Array_V_2_0_2_ce0;
reg    line_buffer_Array_V_2_0_2_we0;
wire   [5:0] line_buffer_Array_V_2_0_2_q0;
reg    line_buffer_Array_V_2_0_3_ce0;
reg    line_buffer_Array_V_2_0_3_we0;
wire   [5:0] line_buffer_Array_V_2_0_3_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln241_reg_1026;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] and_ln191_4_reg_1035;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [11:0] indvar_flatten_reg_244;
wire   [0:0] icmp_ln241_fu_266_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op19;
reg    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op152;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] add_ln241_fu_272_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln191_4_fu_466_p2;
wire   [15:0] pool_window_0_V_fu_472_p3;
reg   [15:0] pool_window_0_V_reg_1039;
wire   [15:0] pool_window_1_V_fu_480_p3;
reg   [15:0] pool_window_1_V_reg_1045;
wire   [15:0] pool_window_2_V_fu_488_p3;
reg   [15:0] pool_window_2_V_reg_1051;
wire   [15:0] pool_window_3_V_fu_496_p3;
reg   [15:0] pool_window_3_V_reg_1057;
wire   [0:0] icmp_ln1496_fu_504_p2;
reg   [0:0] icmp_ln1496_reg_1063;
wire   [0:0] icmp_ln1496_12_fu_510_p2;
reg   [0:0] icmp_ln1496_12_reg_1069;
wire   [15:0] pool_window_0_V_9_fu_516_p3;
reg   [15:0] pool_window_0_V_9_reg_1075;
wire   [15:0] pool_window_1_V_9_fu_524_p3;
reg   [15:0] pool_window_1_V_9_reg_1081;
wire   [15:0] pool_window_2_V_9_fu_532_p3;
reg   [15:0] pool_window_2_V_9_reg_1087;
wire   [15:0] pool_window_3_V_9_fu_540_p3;
reg   [15:0] pool_window_3_V_9_reg_1093;
wire   [0:0] icmp_ln1496_1_fu_548_p2;
reg   [0:0] icmp_ln1496_1_reg_1099;
wire   [0:0] icmp_ln1496_14_fu_554_p2;
reg   [0:0] icmp_ln1496_14_reg_1105;
wire   [15:0] pool_window_0_V_11_fu_560_p3;
reg   [15:0] pool_window_0_V_11_reg_1111;
wire   [15:0] pool_window_1_V_11_fu_568_p3;
reg   [15:0] pool_window_1_V_11_reg_1117;
wire   [15:0] pool_window_2_V_11_fu_576_p3;
reg   [15:0] pool_window_2_V_11_reg_1123;
wire   [15:0] pool_window_3_V_11_fu_584_p3;
reg   [15:0] pool_window_3_V_11_reg_1129;
wire   [0:0] icmp_ln1496_2_fu_592_p2;
reg   [0:0] icmp_ln1496_2_reg_1135;
wire   [0:0] icmp_ln1496_16_fu_598_p2;
reg   [0:0] icmp_ln1496_16_reg_1141;
wire   [15:0] pool_window_0_V_13_fu_604_p3;
reg   [15:0] pool_window_0_V_13_reg_1147;
wire   [15:0] pool_window_1_V_13_fu_612_p3;
reg   [15:0] pool_window_1_V_13_reg_1153;
wire   [15:0] pool_window_2_V_13_fu_620_p3;
reg   [15:0] pool_window_2_V_13_reg_1159;
wire   [15:0] pool_window_3_V_13_fu_628_p3;
reg   [15:0] pool_window_3_V_13_reg_1165;
wire   [0:0] icmp_ln1496_18_fu_636_p2;
reg   [0:0] icmp_ln1496_18_reg_1171;
wire   [0:0] icmp_ln1496_19_fu_642_p2;
reg   [0:0] icmp_ln1496_19_reg_1177;
wire   [0:0] icmp_ln212_fu_648_p2;
reg   [0:0] icmp_ln212_reg_1183;
wire   [0:0] icmp_ln216_fu_698_p2;
wire   [31:0] select_ln222_fu_722_p3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_255;
reg   [31:0] ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255;
wire   [31:0] add_ln225_fu_654_p2;
wire   [31:0] select_ln227_fu_672_p3;
wire   [31:0] add_ln220_fu_704_p2;
reg   [31:0] ap_sig_allocacmp_sY_1_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln191_fu_418_p2;
wire   [0:0] icmp_ln191_4_fu_428_p2;
wire   [0:0] icmp_ln191_5_fu_438_p2;
wire   [0:0] icmp_ln191_6_fu_448_p2;
wire   [0:0] and_ln191_3_fu_460_p2;
wire   [0:0] and_ln191_fu_454_p2;
wire   [31:0] add_ln227_fu_666_p2;
wire   [31:0] add_ln222_fu_716_p2;
wire   [15:0] select_ln65_fu_748_p3;
wire   [15:0] select_ln65_17_fu_760_p3;
wire   [0:0] icmp_ln1496_13_fu_765_p2;
wire   [1:0] select_ln65_18_fu_753_p3;
wire   [1:0] zext_ln65_fu_771_p1;
wire   [31:0] tmp_2_fu_782_p1;
wire   [31:0] tmp_2_fu_782_p2;
wire   [31:0] tmp_2_fu_782_p3;
wire   [31:0] tmp_2_fu_782_p4;
wire   [1:0] tmp_2_fu_782_p5;
wire   [31:0] tmp_2_fu_782_p6;
wire   [15:0] select_ln65_19_fu_819_p3;
wire   [15:0] select_ln65_21_fu_831_p3;
wire   [0:0] icmp_ln1496_15_fu_836_p2;
wire   [1:0] select_ln65_22_fu_824_p3;
wire   [1:0] zext_ln65_4_fu_842_p1;
wire   [31:0] tmp_3_fu_853_p1;
wire   [31:0] tmp_3_fu_853_p2;
wire   [31:0] tmp_3_fu_853_p3;
wire   [31:0] tmp_3_fu_853_p4;
wire   [1:0] tmp_3_fu_853_p5;
wire   [31:0] tmp_3_fu_853_p6;
wire   [15:0] select_ln65_23_fu_890_p3;
wire   [15:0] select_ln65_25_fu_902_p3;
wire   [0:0] icmp_ln1496_17_fu_907_p2;
wire   [1:0] select_ln65_26_fu_895_p3;
wire   [1:0] zext_ln65_5_fu_913_p1;
wire   [31:0] tmp_4_fu_924_p1;
wire   [31:0] tmp_4_fu_924_p2;
wire   [31:0] tmp_4_fu_924_p3;
wire   [31:0] tmp_4_fu_924_p4;
wire   [1:0] tmp_4_fu_924_p5;
wire   [31:0] tmp_4_fu_924_p6;
wire   [15:0] select_ln65_27_fu_961_p3;
wire   [15:0] select_ln65_29_fu_973_p3;
wire   [0:0] icmp_ln1496_20_fu_978_p2;
wire   [1:0] select_ln65_30_fu_966_p3;
wire   [1:0] zext_ln65_6_fu_984_p1;
wire   [31:0] tmp_5_fu_995_p1;
wire   [31:0] tmp_5_fu_995_p2;
wire   [31:0] tmp_5_fu_995_p3;
wire   [31:0] tmp_5_fu_995_p4;
wire   [1:0] tmp_5_fu_995_p5;
wire   [31:0] tmp_5_fu_995_p6;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_242;
reg    ap_condition_271;
reg    ap_condition_267;
reg    ap_condition_748;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 pX_1 = 32'd0;
#0 sX_1 = 32'd0;
#0 pY_1 = 32'd0;
#0 sY_1 = 32'd0;
#0 kernel_data_V_2_4 = 6'd0;
#0 kernel_data_V_2_5 = 6'd0;
#0 kernel_data_V_2_6 = 6'd0;
#0 kernel_data_V_2_7 = 6'd0;
#0 kernel_data_V_2_12 = 6'd0;
#0 kernel_data_V_2_13 = 6'd0;
#0 kernel_data_V_2_14 = 6'd0;
#0 kernel_data_V_2_15 = 6'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s_line_bhbi #(
    .DataWidth( 6 ),
    .AddressRange( 62 ),
    .AddressWidth( 6 ))
line_buffer_Array_V_2_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd61),
    .ce0(line_buffer_Array_V_2_0_0_ce0),
    .we0(line_buffer_Array_V_2_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_2_0_0_q0)
);

pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s_line_bhbi #(
    .DataWidth( 6 ),
    .AddressRange( 62 ),
    .AddressWidth( 6 ))
line_buffer_Array_V_2_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd61),
    .ce0(line_buffer_Array_V_2_0_1_ce0),
    .we0(line_buffer_Array_V_2_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_2_0_1_q0)
);

pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s_line_bhbi #(
    .DataWidth( 6 ),
    .AddressRange( 62 ),
    .AddressWidth( 6 ))
line_buffer_Array_V_2_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd61),
    .ce0(line_buffer_Array_V_2_0_2_ce0),
    .we0(line_buffer_Array_V_2_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_2_0_2_q0)
);

pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s_line_bhbi #(
    .DataWidth( 6 ),
    .AddressRange( 62 ),
    .AddressWidth( 6 ))
line_buffer_Array_V_2_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(6'd61),
    .ce0(line_buffer_Array_V_2_0_3_ce0),
    .we0(line_buffer_Array_V_2_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_2_0_3_q0)
);

myproject_axi_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
myproject_axi_mux_42_32_1_1_U86(
    .din0(tmp_2_fu_782_p1),
    .din1(tmp_2_fu_782_p2),
    .din2(tmp_2_fu_782_p3),
    .din3(tmp_2_fu_782_p4),
    .din4(tmp_2_fu_782_p5),
    .dout(tmp_2_fu_782_p6)
);

myproject_axi_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
myproject_axi_mux_42_32_1_1_U87(
    .din0(tmp_3_fu_853_p1),
    .din1(tmp_3_fu_853_p2),
    .din2(tmp_3_fu_853_p3),
    .din3(tmp_3_fu_853_p4),
    .din4(tmp_3_fu_853_p5),
    .dout(tmp_3_fu_853_p6)
);

myproject_axi_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
myproject_axi_mux_42_32_1_1_U88(
    .din0(tmp_4_fu_924_p1),
    .din1(tmp_4_fu_924_p2),
    .din2(tmp_4_fu_924_p3),
    .din3(tmp_4_fu_924_p4),
    .din4(tmp_4_fu_924_p5),
    .dout(tmp_4_fu_924_p6)
);

myproject_axi_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
myproject_axi_mux_42_32_1_1_U89(
    .din0(tmp_5_fu_995_p1),
    .din1(tmp_5_fu_995_p2),
    .din2(tmp_5_fu_995_p3),
    .din3(tmp_5_fu_995_p4),
    .din4(tmp_5_fu_995_p5),
    .dout(tmp_5_fu_995_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_267)) begin
        if ((1'b1 == ap_condition_271)) begin
            ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255 <= 32'd0;
        end else if ((1'b1 == ap_condition_242)) begin
            ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255 <= select_ln222_fu_722_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_255;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_266_p2 == 1'd0))) begin
        indvar_flatten_reg_244 <= add_ln241_fu_272_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_244 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_267)) begin
        if ((icmp_ln212_fu_648_p2 == 1'd1)) begin
            pX_1 <= 32'd0;
        end else if ((icmp_ln212_fu_648_p2 == 1'd0)) begin
            pX_1 <= add_ln225_fu_654_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_748)) begin
        if ((icmp_ln216_fu_698_p2 == 1'd1)) begin
            pY_1 <= 32'd0;
        end else if ((icmp_ln216_fu_698_p2 == 1'd0)) begin
            pY_1 <= add_ln220_fu_704_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_267)) begin
        if ((icmp_ln212_fu_648_p2 == 1'd1)) begin
            sX_1 <= 32'd0;
        end else if ((icmp_ln212_fu_648_p2 == 1'd0)) begin
            sX_1 <= select_ln227_fu_672_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        and_ln191_4_reg_1035 <= and_ln191_4_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_255 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_fu_466_p2))) begin
        icmp_ln1496_12_reg_1069 <= icmp_ln1496_12_fu_510_p2;
        icmp_ln1496_14_reg_1105 <= icmp_ln1496_14_fu_554_p2;
        icmp_ln1496_16_reg_1141 <= icmp_ln1496_16_fu_598_p2;
        icmp_ln1496_18_reg_1171 <= icmp_ln1496_18_fu_636_p2;
        icmp_ln1496_19_reg_1177 <= icmp_ln1496_19_fu_642_p2;
        icmp_ln1496_1_reg_1099 <= icmp_ln1496_1_fu_548_p2;
        icmp_ln1496_2_reg_1135 <= icmp_ln1496_2_fu_592_p2;
        icmp_ln1496_reg_1063 <= icmp_ln1496_fu_504_p2;
        pool_window_0_V_11_reg_1111[15 : 10] <= pool_window_0_V_11_fu_560_p3[15 : 10];
        pool_window_0_V_13_reg_1147[15 : 10] <= pool_window_0_V_13_fu_604_p3[15 : 10];
        pool_window_0_V_9_reg_1075[15 : 10] <= pool_window_0_V_9_fu_516_p3[15 : 10];
        pool_window_0_V_reg_1039[15 : 10] <= pool_window_0_V_fu_472_p3[15 : 10];
        pool_window_1_V_11_reg_1117[15 : 10] <= pool_window_1_V_11_fu_568_p3[15 : 10];
        pool_window_1_V_13_reg_1153[15 : 10] <= pool_window_1_V_13_fu_612_p3[15 : 10];
        pool_window_1_V_9_reg_1081[15 : 10] <= pool_window_1_V_9_fu_524_p3[15 : 10];
        pool_window_1_V_reg_1045[15 : 10] <= pool_window_1_V_fu_480_p3[15 : 10];
        pool_window_2_V_11_reg_1123[15 : 10] <= pool_window_2_V_11_fu_576_p3[15 : 10];
        pool_window_2_V_13_reg_1159[15 : 10] <= pool_window_2_V_13_fu_620_p3[15 : 10];
        pool_window_2_V_9_reg_1087[15 : 10] <= pool_window_2_V_9_fu_532_p3[15 : 10];
        pool_window_2_V_reg_1051[15 : 10] <= pool_window_2_V_fu_488_p3[15 : 10];
        pool_window_3_V_11_reg_1129[15 : 10] <= pool_window_3_V_11_fu_584_p3[15 : 10];
        pool_window_3_V_13_reg_1165[15 : 10] <= pool_window_3_V_13_fu_628_p3[15 : 10];
        pool_window_3_V_9_reg_1093[15 : 10] <= pool_window_3_V_9_fu_540_p3[15 : 10];
        pool_window_3_V_reg_1057[15 : 10] <= pool_window_3_V_fu_496_p3[15 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln212_reg_1183 <= icmp_ln212_fu_648_p2;
        icmp_ln241_reg_1026 <= icmp_ln241_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        kernel_data_V_2_12 <= data_V_data_0_V_dout;
        kernel_data_V_2_13 <= data_V_data_1_V_dout;
        kernel_data_V_2_14 <= data_V_data_2_V_dout;
        kernel_data_V_2_15 <= data_V_data_3_V_dout;
        kernel_data_V_2_4 <= line_buffer_Array_V_2_0_0_q0;
        kernel_data_V_2_5 <= line_buffer_Array_V_2_0_1_q0;
        kernel_data_V_2_6 <= line_buffer_Array_V_2_0_2_q0;
        kernel_data_V_2_7 <= line_buffer_Array_V_2_0_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_1183 == 1'd1))) begin
        sY_1 <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_266_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln212_reg_1183 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_sY_1_load = ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255;
    end else begin
        ap_sig_allocacmp_sY_1_load = sY_1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln241_reg_1026 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln241_reg_1026 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln241_reg_1026 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln241_reg_1026 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        line_buffer_Array_V_2_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        line_buffer_Array_V_2_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        line_buffer_Array_V_2_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        line_buffer_Array_V_2_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        line_buffer_Array_V_2_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        line_buffer_Array_V_2_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        line_buffer_Array_V_2_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_1026 == 1'd0))) begin
        line_buffer_Array_V_2_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_2_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln191_4_reg_1035) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_1035))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln191_4_reg_1035) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_1035))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln191_4_reg_1035) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_1035))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln191_4_reg_1035) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_1035))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_fu_266_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln241_fu_266_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_704_p2 = (pY_1 + 32'd1);

assign add_ln222_fu_716_p2 = (ap_sig_allocacmp_sY_1_load + 32'd1);

assign add_ln225_fu_654_p2 = (pX_1 + 32'd1);

assign add_ln227_fu_666_p2 = (sX_1 + 32'd1);

assign add_ln241_fu_272_p2 = (indvar_flatten_reg_244 + 12'd1);

assign and_ln191_3_fu_460_p2 = (icmp_ln191_6_fu_448_p2 & icmp_ln191_5_fu_438_p2);

assign and_ln191_4_fu_466_p2 = (and_ln191_fu_454_p2 & and_ln191_3_fu_460_p2);

assign and_ln191_fu_454_p2 = (icmp_ln191_fu_418_p2 & icmp_ln191_4_fu_428_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op152 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln191_4_reg_1035)) | ((io_acc_block_signal_op19 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln241_reg_1026 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op152 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln191_4_reg_1035)) | ((io_acc_block_signal_op19 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln241_reg_1026 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op152 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'd1 == and_ln191_4_reg_1035)) | ((io_acc_block_signal_op19 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln241_reg_1026 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op19 == 1'b0) & (icmp_ln241_reg_1026 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((io_acc_block_signal_op152 == 1'b0) & (1'd1 == and_ln191_4_reg_1035));
end

always @ (*) begin
    ap_condition_242 = ((icmp_ln212_fu_648_p2 == 1'd1) & (icmp_ln216_fu_698_p2 == 1'd0) & (icmp_ln241_reg_1026 == 1'd0));
end

always @ (*) begin
    ap_condition_267 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_271 = ((icmp_ln216_fu_698_p2 == 1'd1) & (icmp_ln212_fu_648_p2 == 1'd1) & (icmp_ln241_reg_1026 == 1'd0));
end

always @ (*) begin
    ap_condition_748 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_648_p2 == 1'd1) & (icmp_ln241_reg_1026 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_255 = 'bx;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_12_fu_510_p2 = ((pool_window_2_V_fu_488_p3 < pool_window_3_V_fu_496_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_13_fu_765_p2 = ((select_ln65_fu_748_p3 < select_ln65_17_fu_760_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_14_fu_554_p2 = ((pool_window_2_V_9_fu_532_p3 < pool_window_3_V_9_fu_540_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_15_fu_836_p2 = ((select_ln65_19_fu_819_p3 < select_ln65_21_fu_831_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_16_fu_598_p2 = ((pool_window_2_V_11_fu_576_p3 < pool_window_3_V_11_fu_584_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_17_fu_907_p2 = ((select_ln65_23_fu_890_p3 < select_ln65_25_fu_902_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_18_fu_636_p2 = ((pool_window_0_V_13_fu_604_p3 < pool_window_1_V_13_fu_612_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_19_fu_642_p2 = ((pool_window_2_V_13_fu_620_p3 < pool_window_3_V_13_fu_628_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_548_p2 = ((pool_window_0_V_9_fu_516_p3 < pool_window_1_V_9_fu_524_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_20_fu_978_p2 = ((select_ln65_27_fu_961_p3 < select_ln65_29_fu_973_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_592_p2 = ((pool_window_0_V_11_fu_560_p3 < pool_window_1_V_11_fu_568_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_504_p2 = ((pool_window_0_V_fu_472_p3 < pool_window_1_V_fu_480_p3) ? 1'b1 : 1'b0);

assign icmp_ln191_4_fu_428_p2 = ((ap_sig_allocacmp_sY_1_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_5_fu_438_p2 = (($signed(pY_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_6_fu_448_p2 = (($signed(pX_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_418_p2 = ((sX_1 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_648_p2 = ((pX_1 == 32'd61) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_698_p2 = ((pY_1 == 32'd61) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_266_p2 = ((indvar_flatten_reg_244 == 12'd3844) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op152 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op19 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign pool_window_0_V_11_fu_560_p3 = {{kernel_data_V_2_6}, {10'd0}};

assign pool_window_0_V_13_fu_604_p3 = {{kernel_data_V_2_7}, {10'd0}};

assign pool_window_0_V_9_fu_516_p3 = {{kernel_data_V_2_5}, {10'd0}};

assign pool_window_0_V_fu_472_p3 = {{kernel_data_V_2_4}, {10'd0}};

assign pool_window_1_V_11_fu_568_p3 = {{line_buffer_Array_V_2_0_2_q0}, {10'd0}};

assign pool_window_1_V_13_fu_612_p3 = {{line_buffer_Array_V_2_0_3_q0}, {10'd0}};

assign pool_window_1_V_9_fu_524_p3 = {{line_buffer_Array_V_2_0_1_q0}, {10'd0}};

assign pool_window_1_V_fu_480_p3 = {{line_buffer_Array_V_2_0_0_q0}, {10'd0}};

assign pool_window_2_V_11_fu_576_p3 = {{kernel_data_V_2_14}, {10'd0}};

assign pool_window_2_V_13_fu_620_p3 = {{kernel_data_V_2_15}, {10'd0}};

assign pool_window_2_V_9_fu_532_p3 = {{kernel_data_V_2_13}, {10'd0}};

assign pool_window_2_V_fu_488_p3 = {{kernel_data_V_2_12}, {10'd0}};

assign pool_window_3_V_11_fu_584_p3 = {{data_V_data_2_V_dout}, {10'd0}};

assign pool_window_3_V_13_fu_628_p3 = {{data_V_data_3_V_dout}, {10'd0}};

assign pool_window_3_V_9_fu_540_p3 = {{data_V_data_1_V_dout}, {10'd0}};

assign pool_window_3_V_fu_496_p3 = {{data_V_data_0_V_dout}, {10'd0}};

assign res_V_data_0_V_din = {{tmp_2_fu_782_p6[21:6]}};

assign res_V_data_1_V_din = {{tmp_3_fu_853_p6[21:6]}};

assign res_V_data_2_V_din = {{tmp_4_fu_924_p6[21:6]}};

assign res_V_data_3_V_din = {{tmp_5_fu_995_p6[21:6]}};

assign select_ln222_fu_722_p3 = ((icmp_ln191_4_fu_428_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_716_p2);

assign select_ln227_fu_672_p3 = ((icmp_ln191_fu_418_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_666_p2);

assign select_ln65_17_fu_760_p3 = ((icmp_ln1496_12_reg_1069[0:0] === 1'b1) ? pool_window_3_V_reg_1057 : pool_window_2_V_reg_1051);

assign select_ln65_18_fu_753_p3 = ((icmp_ln1496_12_reg_1069[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_19_fu_819_p3 = ((icmp_ln1496_1_reg_1099[0:0] === 1'b1) ? pool_window_1_V_9_reg_1081 : pool_window_0_V_9_reg_1075);

assign select_ln65_21_fu_831_p3 = ((icmp_ln1496_14_reg_1105[0:0] === 1'b1) ? pool_window_3_V_9_reg_1093 : pool_window_2_V_9_reg_1087);

assign select_ln65_22_fu_824_p3 = ((icmp_ln1496_14_reg_1105[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_23_fu_890_p3 = ((icmp_ln1496_2_reg_1135[0:0] === 1'b1) ? pool_window_1_V_11_reg_1117 : pool_window_0_V_11_reg_1111);

assign select_ln65_25_fu_902_p3 = ((icmp_ln1496_16_reg_1141[0:0] === 1'b1) ? pool_window_3_V_11_reg_1129 : pool_window_2_V_11_reg_1123);

assign select_ln65_26_fu_895_p3 = ((icmp_ln1496_16_reg_1141[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_27_fu_961_p3 = ((icmp_ln1496_18_reg_1171[0:0] === 1'b1) ? pool_window_1_V_13_reg_1153 : pool_window_0_V_13_reg_1147);

assign select_ln65_29_fu_973_p3 = ((icmp_ln1496_19_reg_1177[0:0] === 1'b1) ? pool_window_3_V_13_reg_1165 : pool_window_2_V_13_reg_1159);

assign select_ln65_30_fu_966_p3 = ((icmp_ln1496_19_reg_1177[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_fu_748_p3 = ((icmp_ln1496_reg_1063[0:0] === 1'b1) ? pool_window_1_V_reg_1045 : pool_window_0_V_reg_1039);

assign start_out = real_start;

assign tmp_2_fu_782_p1 = pool_window_0_V_reg_1039;

assign tmp_2_fu_782_p2 = pool_window_1_V_reg_1045;

assign tmp_2_fu_782_p3 = pool_window_2_V_reg_1051;

assign tmp_2_fu_782_p4 = pool_window_3_V_reg_1057;

assign tmp_2_fu_782_p5 = ((icmp_ln1496_13_fu_765_p2[0:0] === 1'b1) ? select_ln65_18_fu_753_p3 : zext_ln65_fu_771_p1);

assign tmp_3_fu_853_p1 = pool_window_0_V_9_reg_1075;

assign tmp_3_fu_853_p2 = pool_window_1_V_9_reg_1081;

assign tmp_3_fu_853_p3 = pool_window_2_V_9_reg_1087;

assign tmp_3_fu_853_p4 = pool_window_3_V_9_reg_1093;

assign tmp_3_fu_853_p5 = ((icmp_ln1496_15_fu_836_p2[0:0] === 1'b1) ? select_ln65_22_fu_824_p3 : zext_ln65_4_fu_842_p1);

assign tmp_4_fu_924_p1 = pool_window_0_V_11_reg_1111;

assign tmp_4_fu_924_p2 = pool_window_1_V_11_reg_1117;

assign tmp_4_fu_924_p3 = pool_window_2_V_11_reg_1123;

assign tmp_4_fu_924_p4 = pool_window_3_V_11_reg_1129;

assign tmp_4_fu_924_p5 = ((icmp_ln1496_17_fu_907_p2[0:0] === 1'b1) ? select_ln65_26_fu_895_p3 : zext_ln65_5_fu_913_p1);

assign tmp_5_fu_995_p1 = pool_window_0_V_13_reg_1147;

assign tmp_5_fu_995_p2 = pool_window_1_V_13_reg_1153;

assign tmp_5_fu_995_p3 = pool_window_2_V_13_reg_1159;

assign tmp_5_fu_995_p4 = pool_window_3_V_13_reg_1165;

assign tmp_5_fu_995_p5 = ((icmp_ln1496_20_fu_978_p2[0:0] === 1'b1) ? select_ln65_30_fu_966_p3 : zext_ln65_6_fu_984_p1);

assign zext_ln65_4_fu_842_p1 = icmp_ln1496_1_reg_1099;

assign zext_ln65_5_fu_913_p1 = icmp_ln1496_2_reg_1135;

assign zext_ln65_6_fu_984_p1 = icmp_ln1496_18_reg_1171;

assign zext_ln65_fu_771_p1 = icmp_ln1496_reg_1063;

always @ (posedge ap_clk) begin
    pool_window_0_V_reg_1039[9:0] <= 10'b0000000000;
    pool_window_1_V_reg_1045[9:0] <= 10'b0000000000;
    pool_window_2_V_reg_1051[9:0] <= 10'b0000000000;
    pool_window_3_V_reg_1057[9:0] <= 10'b0000000000;
    pool_window_0_V_9_reg_1075[9:0] <= 10'b0000000000;
    pool_window_1_V_9_reg_1081[9:0] <= 10'b0000000000;
    pool_window_2_V_9_reg_1087[9:0] <= 10'b0000000000;
    pool_window_3_V_9_reg_1093[9:0] <= 10'b0000000000;
    pool_window_0_V_11_reg_1111[9:0] <= 10'b0000000000;
    pool_window_1_V_11_reg_1117[9:0] <= 10'b0000000000;
    pool_window_2_V_11_reg_1123[9:0] <= 10'b0000000000;
    pool_window_3_V_11_reg_1129[9:0] <= 10'b0000000000;
    pool_window_0_V_13_reg_1147[9:0] <= 10'b0000000000;
    pool_window_1_V_13_reg_1153[9:0] <= 10'b0000000000;
    pool_window_2_V_13_reg_1159[9:0] <= 10'b0000000000;
    pool_window_3_V_13_reg_1165[9:0] <= 10'b0000000000;
end

endmodule //pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s
