-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv12_F04 : STD_LOGIC_VECTOR (11 downto 0) := "111100000100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_2_4 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_2_5 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_2_6 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_2_7 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_2_12 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_2_13 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_2_14 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_2_15 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal line_buffer_Array_V_2_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_0_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_2_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_2_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_2_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_2_0_3_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln241_reg_1026 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal and_ln191_4_reg_1035 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_244 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln241_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op19 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op152 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln241_fu_272_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln191_4_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_fu_472_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_reg_1039 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_fu_480_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_reg_1045 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_fu_488_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_reg_1051 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_fu_496_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_reg_1057 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_1063 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_12_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_12_reg_1069 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_9_fu_516_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_9_reg_1075 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_9_fu_524_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_9_reg_1081 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_9_fu_532_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_9_reg_1087 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_9_fu_540_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_9_reg_1093 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_reg_1099 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_14_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_14_reg_1105 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_11_fu_560_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_11_reg_1111 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_11_fu_568_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_11_reg_1117 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_11_fu_576_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_11_reg_1123 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_11_fu_584_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_11_reg_1129 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_2_reg_1135 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_16_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_16_reg_1141 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_13_fu_604_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_0_V_13_reg_1147 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_13_fu_612_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_1_V_13_reg_1153 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_13_fu_620_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_2_V_13_reg_1159 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_13_fu_628_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal pool_window_3_V_13_reg_1165 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_18_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_18_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_19_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_19_reg_1177 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln212_reg_1183 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_fu_722_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln225_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln227_fu_672_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln220_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln191_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_4_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_5_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_6_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_3_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_fu_748_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_17_fu_760_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_13_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_18_fu_753_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_fu_771_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_782_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_782_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_782_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_782_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_19_fu_819_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_21_fu_831_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_15_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_22_fu_824_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_4_fu_842_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_853_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_853_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_853_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_853_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_853_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_853_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_23_fu_890_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_25_fu_902_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_17_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_26_fu_895_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_5_fu_913_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_924_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_924_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_924_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_924_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_924_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_924_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln65_27_fu_961_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_29_fu_973_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_20_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_30_fu_966_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_6_fu_984_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_995_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_995_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_995_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_995_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_995_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_995_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_242 : BOOLEAN;
    signal ap_condition_271 : BOOLEAN;
    signal ap_condition_267 : BOOLEAN;
    signal ap_condition_748 : BOOLEAN;

    component myproject_axi_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s_line_bhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    line_buffer_Array_V_2_0_0_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s_line_bhbi
    generic map (
        DataWidth => 6,
        AddressRange => 62,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3D,
        ce0 => line_buffer_Array_V_2_0_0_ce0,
        we0 => line_buffer_Array_V_2_0_0_we0,
        d0 => data_V_data_0_V_dout,
        q0 => line_buffer_Array_V_2_0_0_q0);

    line_buffer_Array_V_2_0_1_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s_line_bhbi
    generic map (
        DataWidth => 6,
        AddressRange => 62,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3D,
        ce0 => line_buffer_Array_V_2_0_1_ce0,
        we0 => line_buffer_Array_V_2_0_1_we0,
        d0 => data_V_data_1_V_dout,
        q0 => line_buffer_Array_V_2_0_1_q0);

    line_buffer_Array_V_2_0_2_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s_line_bhbi
    generic map (
        DataWidth => 6,
        AddressRange => 62,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3D,
        ce0 => line_buffer_Array_V_2_0_2_ce0,
        we0 => line_buffer_Array_V_2_0_2_we0,
        d0 => data_V_data_2_V_dout,
        q0 => line_buffer_Array_V_2_0_2_q0);

    line_buffer_Array_V_2_0_3_U : component pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config5_s_line_bhbi
    generic map (
        DataWidth => 6,
        AddressRange => 62,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv6_3D,
        ce0 => line_buffer_Array_V_2_0_3_ce0,
        we0 => line_buffer_Array_V_2_0_3_we0,
        d0 => data_V_data_3_V_dout,
        q0 => line_buffer_Array_V_2_0_3_q0);

    myproject_axi_mux_42_32_1_1_U86 : component myproject_axi_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_2_fu_782_p1,
        din1 => tmp_2_fu_782_p2,
        din2 => tmp_2_fu_782_p3,
        din3 => tmp_2_fu_782_p4,
        din4 => tmp_2_fu_782_p5,
        dout => tmp_2_fu_782_p6);

    myproject_axi_mux_42_32_1_1_U87 : component myproject_axi_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_3_fu_853_p1,
        din1 => tmp_3_fu_853_p2,
        din2 => tmp_3_fu_853_p3,
        din3 => tmp_3_fu_853_p4,
        din4 => tmp_3_fu_853_p5,
        dout => tmp_3_fu_853_p6);

    myproject_axi_mux_42_32_1_1_U88 : component myproject_axi_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_4_fu_924_p1,
        din1 => tmp_4_fu_924_p2,
        din2 => tmp_4_fu_924_p3,
        din3 => tmp_4_fu_924_p4,
        din4 => tmp_4_fu_924_p5,
        dout => tmp_4_fu_924_p6);

    myproject_axi_mux_42_32_1_1_U89 : component myproject_axi_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_5_fu_995_p1,
        din1 => tmp_5_fu_995_p2,
        din2 => tmp_5_fu_995_p3,
        din3 => tmp_5_fu_995_p4,
        din4 => tmp_5_fu_995_p5,
        dout => tmp_5_fu_995_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_267)) then
                if ((ap_const_boolean_1 = ap_condition_271)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_242)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255 <= select_ln222_fu_722_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_255;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_fu_266_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_244 <= add_ln241_fu_272_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_244 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    pX_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_267)) then
                if ((icmp_ln212_fu_648_p2 = ap_const_lv1_1)) then 
                    pX_1 <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_648_p2 = ap_const_lv1_0)) then 
                    pX_1 <= add_ln225_fu_654_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_748)) then
                if ((icmp_ln216_fu_698_p2 = ap_const_lv1_1)) then 
                    pY_1 <= ap_const_lv32_0;
                elsif ((icmp_ln216_fu_698_p2 = ap_const_lv1_0)) then 
                    pY_1 <= add_ln220_fu_704_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_267)) then
                if ((icmp_ln212_fu_648_p2 = ap_const_lv1_1)) then 
                    sX_1 <= ap_const_lv32_0;
                elsif ((icmp_ln212_fu_648_p2 = ap_const_lv1_0)) then 
                    sX_1 <= select_ln227_fu_672_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then
                and_ln191_4_reg_1035 <= and_ln191_4_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_255 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_fu_466_p2))) then
                icmp_ln1496_12_reg_1069 <= icmp_ln1496_12_fu_510_p2;
                icmp_ln1496_14_reg_1105 <= icmp_ln1496_14_fu_554_p2;
                icmp_ln1496_16_reg_1141 <= icmp_ln1496_16_fu_598_p2;
                icmp_ln1496_18_reg_1171 <= icmp_ln1496_18_fu_636_p2;
                icmp_ln1496_19_reg_1177 <= icmp_ln1496_19_fu_642_p2;
                icmp_ln1496_1_reg_1099 <= icmp_ln1496_1_fu_548_p2;
                icmp_ln1496_2_reg_1135 <= icmp_ln1496_2_fu_592_p2;
                icmp_ln1496_reg_1063 <= icmp_ln1496_fu_504_p2;
                    pool_window_0_V_11_reg_1111(15 downto 10) <= pool_window_0_V_11_fu_560_p3(15 downto 10);
                    pool_window_0_V_13_reg_1147(15 downto 10) <= pool_window_0_V_13_fu_604_p3(15 downto 10);
                    pool_window_0_V_9_reg_1075(15 downto 10) <= pool_window_0_V_9_fu_516_p3(15 downto 10);
                    pool_window_0_V_reg_1039(15 downto 10) <= pool_window_0_V_fu_472_p3(15 downto 10);
                    pool_window_1_V_11_reg_1117(15 downto 10) <= pool_window_1_V_11_fu_568_p3(15 downto 10);
                    pool_window_1_V_13_reg_1153(15 downto 10) <= pool_window_1_V_13_fu_612_p3(15 downto 10);
                    pool_window_1_V_9_reg_1081(15 downto 10) <= pool_window_1_V_9_fu_524_p3(15 downto 10);
                    pool_window_1_V_reg_1045(15 downto 10) <= pool_window_1_V_fu_480_p3(15 downto 10);
                    pool_window_2_V_11_reg_1123(15 downto 10) <= pool_window_2_V_11_fu_576_p3(15 downto 10);
                    pool_window_2_V_13_reg_1159(15 downto 10) <= pool_window_2_V_13_fu_620_p3(15 downto 10);
                    pool_window_2_V_9_reg_1087(15 downto 10) <= pool_window_2_V_9_fu_532_p3(15 downto 10);
                    pool_window_2_V_reg_1051(15 downto 10) <= pool_window_2_V_fu_488_p3(15 downto 10);
                    pool_window_3_V_11_reg_1129(15 downto 10) <= pool_window_3_V_11_fu_584_p3(15 downto 10);
                    pool_window_3_V_13_reg_1165(15 downto 10) <= pool_window_3_V_13_fu_628_p3(15 downto 10);
                    pool_window_3_V_9_reg_1093(15 downto 10) <= pool_window_3_V_9_fu_540_p3(15 downto 10);
                    pool_window_3_V_reg_1057(15 downto 10) <= pool_window_3_V_fu_496_p3(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln212_reg_1183 <= icmp_ln212_fu_648_p2;
                icmp_ln241_reg_1026 <= icmp_ln241_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then
                kernel_data_V_2_12 <= data_V_data_0_V_dout;
                kernel_data_V_2_13 <= data_V_data_1_V_dout;
                kernel_data_V_2_14 <= data_V_data_2_V_dout;
                kernel_data_V_2_15 <= data_V_data_3_V_dout;
                kernel_data_V_2_4 <= line_buffer_Array_V_2_0_0_q0;
                kernel_data_V_2_5 <= line_buffer_Array_V_2_0_1_q0;
                kernel_data_V_2_6 <= line_buffer_Array_V_2_0_2_q0;
                kernel_data_V_2_7 <= line_buffer_Array_V_2_0_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_reg_1183 = ap_const_lv1_1))) then
                sY_1 <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255;
            end if;
        end if;
    end process;
    pool_window_0_V_reg_1039(9 downto 0) <= "0000000000";
    pool_window_1_V_reg_1045(9 downto 0) <= "0000000000";
    pool_window_2_V_reg_1051(9 downto 0) <= "0000000000";
    pool_window_3_V_reg_1057(9 downto 0) <= "0000000000";
    pool_window_0_V_9_reg_1075(9 downto 0) <= "0000000000";
    pool_window_1_V_9_reg_1081(9 downto 0) <= "0000000000";
    pool_window_2_V_9_reg_1087(9 downto 0) <= "0000000000";
    pool_window_3_V_9_reg_1093(9 downto 0) <= "0000000000";
    pool_window_0_V_11_reg_1111(9 downto 0) <= "0000000000";
    pool_window_1_V_11_reg_1117(9 downto 0) <= "0000000000";
    pool_window_2_V_11_reg_1123(9 downto 0) <= "0000000000";
    pool_window_3_V_11_reg_1129(9 downto 0) <= "0000000000";
    pool_window_0_V_13_reg_1147(9 downto 0) <= "0000000000";
    pool_window_1_V_13_reg_1153(9 downto 0) <= "0000000000";
    pool_window_2_V_13_reg_1159(9 downto 0) <= "0000000000";
    pool_window_3_V_13_reg_1165(9 downto 0) <= "0000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln241_fu_266_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_fu_266_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln241_fu_266_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln220_fu_704_p2 <= std_logic_vector(unsigned(pY_1) + unsigned(ap_const_lv32_1));
    add_ln222_fu_716_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_1_load) + unsigned(ap_const_lv32_1));
    add_ln225_fu_654_p2 <= std_logic_vector(unsigned(pX_1) + unsigned(ap_const_lv32_1));
    add_ln227_fu_666_p2 <= std_logic_vector(unsigned(sX_1) + unsigned(ap_const_lv32_1));
    add_ln241_fu_272_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_244) + unsigned(ap_const_lv12_1));
    and_ln191_3_fu_460_p2 <= (icmp_ln191_6_fu_448_p2 and icmp_ln191_5_fu_438_p2);
    and_ln191_4_fu_466_p2 <= (and_ln191_fu_454_p2 and and_ln191_3_fu_460_p2);
    and_ln191_fu_454_p2 <= (icmp_ln191_fu_418_p2 and icmp_ln191_4_fu_428_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_enable_reg_pp0_iter2, and_ln191_4_reg_1035, io_acc_block_signal_op19, io_acc_block_signal_op152)
    begin
                ap_block_pp0_stage0_01001 <= (((io_acc_block_signal_op152 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_4_reg_1035)) or ((io_acc_block_signal_op19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln241_reg_1026 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_enable_reg_pp0_iter2, and_ln191_4_reg_1035, io_acc_block_signal_op19, io_acc_block_signal_op152)
    begin
                ap_block_pp0_stage0_11001 <= (((io_acc_block_signal_op152 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_4_reg_1035)) or ((io_acc_block_signal_op19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln241_reg_1026 = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_enable_reg_pp0_iter2, and_ln191_4_reg_1035, io_acc_block_signal_op19, io_acc_block_signal_op152)
    begin
                ap_block_pp0_stage0_subdone <= (((io_acc_block_signal_op152 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_4_reg_1035)) or ((io_acc_block_signal_op19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln241_reg_1026 = ap_const_lv1_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(icmp_ln241_reg_1026, io_acc_block_signal_op19)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((io_acc_block_signal_op19 = ap_const_logic_0) and (icmp_ln241_reg_1026 = ap_const_lv1_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(and_ln191_4_reg_1035, io_acc_block_signal_op152)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((io_acc_block_signal_op152 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln191_4_reg_1035));
    end process;


    ap_condition_242_assign_proc : process(icmp_ln241_reg_1026, icmp_ln212_fu_648_p2, icmp_ln216_fu_698_p2)
    begin
                ap_condition_242 <= ((icmp_ln212_fu_648_p2 = ap_const_lv1_1) and (icmp_ln216_fu_698_p2 = ap_const_lv1_0) and (icmp_ln241_reg_1026 = ap_const_lv1_0));
    end process;


    ap_condition_267_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_267 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_271_assign_proc : process(icmp_ln241_reg_1026, icmp_ln212_fu_648_p2, icmp_ln216_fu_698_p2)
    begin
                ap_condition_271 <= ((icmp_ln216_fu_698_p2 = ap_const_lv1_1) and (icmp_ln212_fu_648_p2 = ap_const_lv1_1) and (icmp_ln241_reg_1026 = ap_const_lv1_0));
    end process;


    ap_condition_748_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001, icmp_ln212_fu_648_p2)
    begin
                ap_condition_748 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln212_fu_648_p2 = ap_const_lv1_1) and (icmp_ln241_reg_1026 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln241_fu_266_p2)
    begin
        if ((icmp_ln241_fu_266_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_255 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_1_load_assign_proc : process(sY_1, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln212_reg_1183, ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln212_reg_1183 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_sY_1_load <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_255;
        else 
            ap_sig_allocacmp_sY_1_load <= sY_1;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1026)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln241_reg_1026 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1026)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln241_reg_1026 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1026)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln241_reg_1026 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln241_reg_1026)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln241_reg_1026 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_12_fu_510_p2 <= "1" when (unsigned(pool_window_2_V_fu_488_p3) < unsigned(pool_window_3_V_fu_496_p3)) else "0";
    icmp_ln1496_13_fu_765_p2 <= "1" when (unsigned(select_ln65_fu_748_p3) < unsigned(select_ln65_17_fu_760_p3)) else "0";
    icmp_ln1496_14_fu_554_p2 <= "1" when (unsigned(pool_window_2_V_9_fu_532_p3) < unsigned(pool_window_3_V_9_fu_540_p3)) else "0";
    icmp_ln1496_15_fu_836_p2 <= "1" when (unsigned(select_ln65_19_fu_819_p3) < unsigned(select_ln65_21_fu_831_p3)) else "0";
    icmp_ln1496_16_fu_598_p2 <= "1" when (unsigned(pool_window_2_V_11_fu_576_p3) < unsigned(pool_window_3_V_11_fu_584_p3)) else "0";
    icmp_ln1496_17_fu_907_p2 <= "1" when (unsigned(select_ln65_23_fu_890_p3) < unsigned(select_ln65_25_fu_902_p3)) else "0";
    icmp_ln1496_18_fu_636_p2 <= "1" when (unsigned(pool_window_0_V_13_fu_604_p3) < unsigned(pool_window_1_V_13_fu_612_p3)) else "0";
    icmp_ln1496_19_fu_642_p2 <= "1" when (unsigned(pool_window_2_V_13_fu_620_p3) < unsigned(pool_window_3_V_13_fu_628_p3)) else "0";
    icmp_ln1496_1_fu_548_p2 <= "1" when (unsigned(pool_window_0_V_9_fu_516_p3) < unsigned(pool_window_1_V_9_fu_524_p3)) else "0";
    icmp_ln1496_20_fu_978_p2 <= "1" when (unsigned(select_ln65_27_fu_961_p3) < unsigned(select_ln65_29_fu_973_p3)) else "0";
    icmp_ln1496_2_fu_592_p2 <= "1" when (unsigned(pool_window_0_V_11_fu_560_p3) < unsigned(pool_window_1_V_11_fu_568_p3)) else "0";
    icmp_ln1496_fu_504_p2 <= "1" when (unsigned(pool_window_0_V_fu_472_p3) < unsigned(pool_window_1_V_fu_480_p3)) else "0";
    icmp_ln191_4_fu_428_p2 <= "1" when (ap_sig_allocacmp_sY_1_load = ap_const_lv32_1) else "0";
    icmp_ln191_5_fu_438_p2 <= "1" when (signed(pY_1) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_6_fu_448_p2 <= "1" when (signed(pX_1) > signed(ap_const_lv32_0)) else "0";
    icmp_ln191_fu_418_p2 <= "1" when (sX_1 = ap_const_lv32_1) else "0";
    icmp_ln212_fu_648_p2 <= "1" when (pX_1 = ap_const_lv32_3D) else "0";
    icmp_ln216_fu_698_p2 <= "1" when (pY_1 = ap_const_lv32_3D) else "0";
    icmp_ln241_fu_266_p2 <= "1" when (indvar_flatten_reg_244 = ap_const_lv12_F04) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op152 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op19 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    line_buffer_Array_V_2_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then 
            line_buffer_Array_V_2_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then 
            line_buffer_Array_V_2_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then 
            line_buffer_Array_V_2_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then 
            line_buffer_Array_V_2_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then 
            line_buffer_Array_V_2_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then 
            line_buffer_Array_V_2_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then 
            line_buffer_Array_V_2_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_2_0_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln241_reg_1026, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln241_reg_1026 = ap_const_lv1_0))) then 
            line_buffer_Array_V_2_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_2_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pool_window_0_V_11_fu_560_p3 <= (kernel_data_V_2_6 & ap_const_lv10_0);
    pool_window_0_V_13_fu_604_p3 <= (kernel_data_V_2_7 & ap_const_lv10_0);
    pool_window_0_V_9_fu_516_p3 <= (kernel_data_V_2_5 & ap_const_lv10_0);
    pool_window_0_V_fu_472_p3 <= (kernel_data_V_2_4 & ap_const_lv10_0);
    pool_window_1_V_11_fu_568_p3 <= (line_buffer_Array_V_2_0_2_q0 & ap_const_lv10_0);
    pool_window_1_V_13_fu_612_p3 <= (line_buffer_Array_V_2_0_3_q0 & ap_const_lv10_0);
    pool_window_1_V_9_fu_524_p3 <= (line_buffer_Array_V_2_0_1_q0 & ap_const_lv10_0);
    pool_window_1_V_fu_480_p3 <= (line_buffer_Array_V_2_0_0_q0 & ap_const_lv10_0);
    pool_window_2_V_11_fu_576_p3 <= (kernel_data_V_2_14 & ap_const_lv10_0);
    pool_window_2_V_13_fu_620_p3 <= (kernel_data_V_2_15 & ap_const_lv10_0);
    pool_window_2_V_9_fu_532_p3 <= (kernel_data_V_2_13 & ap_const_lv10_0);
    pool_window_2_V_fu_488_p3 <= (kernel_data_V_2_12 & ap_const_lv10_0);
    pool_window_3_V_11_fu_584_p3 <= (data_V_data_2_V_dout & ap_const_lv10_0);
    pool_window_3_V_13_fu_628_p3 <= (data_V_data_3_V_dout & ap_const_lv10_0);
    pool_window_3_V_9_fu_540_p3 <= (data_V_data_1_V_dout & ap_const_lv10_0);
    pool_window_3_V_fu_496_p3 <= (data_V_data_0_V_dout & ap_const_lv10_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_4_reg_1035)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_4_reg_1035) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_2_fu_782_p6(21 downto 6);

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_4_reg_1035, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_1035))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_4_reg_1035)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_4_reg_1035) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_3_fu_853_p6(21 downto 6);

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_4_reg_1035, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_1035))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_4_reg_1035)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_4_reg_1035) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_4_fu_924_p6(21 downto 6);

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_4_reg_1035, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_1035))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln191_4_reg_1035)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln191_4_reg_1035) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_5_fu_995_p6(21 downto 6);

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln191_4_reg_1035, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln191_4_reg_1035))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln222_fu_722_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_4_fu_428_p2(0) = '1') else 
        add_ln222_fu_716_p2;
    select_ln227_fu_672_p3 <= 
        ap_const_lv32_0 when (icmp_ln191_fu_418_p2(0) = '1') else 
        add_ln227_fu_666_p2;
    select_ln65_17_fu_760_p3 <= 
        pool_window_3_V_reg_1057 when (icmp_ln1496_12_reg_1069(0) = '1') else 
        pool_window_2_V_reg_1051;
    select_ln65_18_fu_753_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_12_reg_1069(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_19_fu_819_p3 <= 
        pool_window_1_V_9_reg_1081 when (icmp_ln1496_1_reg_1099(0) = '1') else 
        pool_window_0_V_9_reg_1075;
    select_ln65_21_fu_831_p3 <= 
        pool_window_3_V_9_reg_1093 when (icmp_ln1496_14_reg_1105(0) = '1') else 
        pool_window_2_V_9_reg_1087;
    select_ln65_22_fu_824_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_14_reg_1105(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_23_fu_890_p3 <= 
        pool_window_1_V_11_reg_1117 when (icmp_ln1496_2_reg_1135(0) = '1') else 
        pool_window_0_V_11_reg_1111;
    select_ln65_25_fu_902_p3 <= 
        pool_window_3_V_11_reg_1129 when (icmp_ln1496_16_reg_1141(0) = '1') else 
        pool_window_2_V_11_reg_1123;
    select_ln65_26_fu_895_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_16_reg_1141(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_27_fu_961_p3 <= 
        pool_window_1_V_13_reg_1153 when (icmp_ln1496_18_reg_1171(0) = '1') else 
        pool_window_0_V_13_reg_1147;
    select_ln65_29_fu_973_p3 <= 
        pool_window_3_V_13_reg_1165 when (icmp_ln1496_19_reg_1177(0) = '1') else 
        pool_window_2_V_13_reg_1159;
    select_ln65_30_fu_966_p3 <= 
        ap_const_lv2_3 when (icmp_ln1496_19_reg_1177(0) = '1') else 
        ap_const_lv2_2;
    select_ln65_fu_748_p3 <= 
        pool_window_1_V_reg_1045 when (icmp_ln1496_reg_1063(0) = '1') else 
        pool_window_0_V_reg_1039;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_reg_1039),32));
    tmp_2_fu_782_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_reg_1045),32));
    tmp_2_fu_782_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_reg_1051),32));
    tmp_2_fu_782_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_reg_1057),32));
    tmp_2_fu_782_p5 <= 
        select_ln65_18_fu_753_p3 when (icmp_ln1496_13_fu_765_p2(0) = '1') else 
        zext_ln65_fu_771_p1;
    tmp_3_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_9_reg_1075),32));
    tmp_3_fu_853_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_9_reg_1081),32));
    tmp_3_fu_853_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_9_reg_1087),32));
    tmp_3_fu_853_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_9_reg_1093),32));
    tmp_3_fu_853_p5 <= 
        select_ln65_22_fu_824_p3 when (icmp_ln1496_15_fu_836_p2(0) = '1') else 
        zext_ln65_4_fu_842_p1;
    tmp_4_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_11_reg_1111),32));
    tmp_4_fu_924_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_11_reg_1117),32));
    tmp_4_fu_924_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_11_reg_1123),32));
    tmp_4_fu_924_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_11_reg_1129),32));
    tmp_4_fu_924_p5 <= 
        select_ln65_26_fu_895_p3 when (icmp_ln1496_17_fu_907_p2(0) = '1') else 
        zext_ln65_5_fu_913_p1;
    tmp_5_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_13_reg_1147),32));
    tmp_5_fu_995_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_13_reg_1153),32));
    tmp_5_fu_995_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_13_reg_1159),32));
    tmp_5_fu_995_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_13_reg_1165),32));
    tmp_5_fu_995_p5 <= 
        select_ln65_30_fu_966_p3 when (icmp_ln1496_20_fu_978_p2(0) = '1') else 
        zext_ln65_6_fu_984_p1;
    zext_ln65_4_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_1_reg_1099),2));
    zext_ln65_5_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_2_reg_1135),2));
    zext_ln65_6_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_18_reg_1171),2));
    zext_ln65_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1496_reg_1063),2));
end behav;
