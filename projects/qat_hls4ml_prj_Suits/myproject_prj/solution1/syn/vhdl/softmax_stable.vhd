-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC;
    data_V_data_0_V_blk_n : OUT STD_LOGIC;
    data_V_data_1_V_blk_n : OUT STD_LOGIC;
    data_V_data_2_V_blk_n : OUT STD_LOGIC;
    data_V_data_3_V_blk_n : OUT STD_LOGIC;
    res_V_data_0_V_blk_n : OUT STD_LOGIC;
    res_V_data_1_V_blk_n : OUT STD_LOGIC;
    res_V_data_2_V_blk_n : OUT STD_LOGIC;
    res_V_data_3_V_blk_n : OUT STD_LOGIC );
end;


architecture behav of softmax_stable is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_data_0_V_1_reg_910 : STD_LOGIC_VECTOR (15 downto 0);
    signal io_acc_block_signal_op12 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_data_1_V_1_reg_915 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_1_reg_920 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_1_reg_925 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_319_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_reg_930 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_333_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_reg_936 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal y_V_1_fu_640_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_reg_947 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_674_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_reg_952 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_708_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_reg_957 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_962 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal io_acc_block_signal_op157 : STD_LOGIC;
    signal ap_block_state11_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal exp_res_0_V_reg_962_pp0_iter1_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_973 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_973_pp0_iter1_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_984 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_984_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_995 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_995_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln241_fu_889_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln241_reg_1006 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_data_0_V_reg_1011 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_reg_1016 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_reg_1021 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal zext_ln225_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln225_1_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_2_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln225_3_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln235_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal grp_fu_266_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1118_fu_894_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln1118_1_fu_898_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln1118_2_fu_902_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln1118_3_fu_906_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln1496_fu_313_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_313_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_319_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_319_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_327_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_327_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_1_fu_333_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_333_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_345_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_fu_351_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_1_fu_354_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_fu_358_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_372_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_2_fu_410_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_1_fu_413_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_fu_427_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_419_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_3_fu_465_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_2_fu_468_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_482_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_474_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_4_fu_520_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_3_fu_523_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_fu_537_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_529_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_575_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_585_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_593_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_fu_601_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_6_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_614_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_1_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_624_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_632_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_7_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_648_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_2_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_658_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_666_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_8_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_682_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_3_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_692_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_700_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_5_fu_728_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_6_fu_731_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_fu_734_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_740_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_756_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_9_fu_759_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_10_fu_762_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_10_fu_768_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_fu_748_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_12_fu_776_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_fu_784_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_fu_788_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_792_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_14_fu_806_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_12_fu_812_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_798_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_9_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_850_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal underflow_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_10_fu_860_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_4_fu_868_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_fu_876_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component softmax_stable_exEe0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component softmax_stable_inFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_stable_exEe0
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0);

    invert_table2_U : component softmax_stable_inFfa
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                exp_res_0_V_reg_962 <= exp_table1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                exp_res_0_V_reg_962_pp0_iter1_reg <= exp_res_0_V_reg_962;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                exp_res_1_V_reg_973 <= exp_table1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                exp_res_1_V_reg_973_pp0_iter1_reg <= exp_res_1_V_reg_973;
                sext_ln241_reg_1006 <= sext_ln241_fu_889_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_res_2_V_reg_984 <= exp_table1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_res_2_V_reg_984_pp0_iter2_reg <= exp_res_2_V_reg_984;
                select_ln65_1_reg_936 <= select_ln65_1_fu_333_p3;
                select_ln65_reg_930 <= select_ln65_fu_319_p3;
                tmp_data_0_V_1_reg_910 <= data_V_data_0_V_dout;
                tmp_data_1_V_1_reg_915 <= data_V_data_1_V_dout;
                tmp_data_2_V_1_reg_920 <= data_V_data_2_V_dout;
                tmp_data_3_V_1_reg_925 <= data_V_data_3_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                exp_res_3_V_reg_995 <= exp_table1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                exp_res_3_V_reg_995_pp0_iter2_reg <= exp_res_3_V_reg_995;
                y_V_1_reg_947 <= y_V_1_fu_640_p3;
                y_V_2_reg_952 <= y_V_2_fu_674_p3;
                y_V_3_reg_957 <= y_V_3_fu_708_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                tmp_data_0_V_reg_1011 <= grp_fu_266_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_1_V_reg_1016 <= grp_fu_266_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_data_2_V_reg_1021 <= grp_fu_266_p2(25 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    and_ln786_1_fu_441_p2 <= (xor_ln786_1_fu_435_p2 and tmp_11_fu_419_p3);
    and_ln786_2_fu_496_p2 <= (xor_ln786_2_fu_490_p2 and tmp_13_fu_474_p3);
    and_ln786_3_fu_551_p2 <= (xor_ln786_3_fu_545_p2 and tmp_15_fu_529_p3);
    and_ln786_fu_386_p2 <= (xor_ln786_fu_380_p2 and tmp_8_fu_364_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, io_acc_block_signal_op12)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, io_acc_block_signal_op12)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter2, io_acc_block_signal_op157)
    begin
                ap_block_pp0_stage2_01001 <= ((io_acc_block_signal_op157 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter2, io_acc_block_signal_op157)
    begin
                ap_block_pp0_stage2_11001 <= ((io_acc_block_signal_op157 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, io_acc_block_signal_op157)
    begin
                ap_block_pp0_stage2_subdone <= ((io_acc_block_signal_op157 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage2_iter2_assign_proc : process(io_acc_block_signal_op157)
    begin
                ap_block_state11_pp0_stage2_iter2 <= (io_acc_block_signal_op157 = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, io_acc_block_signal_op12)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (io_acc_block_signal_op12 = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, data_V_data_0_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, data_V_data_1_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, data_V_data_2_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, data_V_data_3_V_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, zext_ln225_fu_609_p1, ap_block_pp0_stage1, zext_ln225_1_fu_716_p1, zext_ln225_2_fu_720_p1, ap_block_pp0_stage3, zext_ln225_3_fu_724_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_address0 <= zext_ln225_3_fu_724_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            exp_table1_address0 <= zext_ln225_2_fu_720_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            exp_table1_address0 <= zext_ln225_1_fu_716_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            exp_table1_address0 <= zext_ln225_fu_609_p1(10 - 1 downto 0);
        else 
            exp_table1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    exp_table1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_266_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, sext_ln241_fu_889_p1, sext_ln241_reg_1006, ap_block_pp0_stage1, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)))) then 
            grp_fu_266_p0 <= sext_ln241_reg_1006(18 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_266_p0 <= sext_ln241_fu_889_p1(18 - 1 downto 0);
        else 
            grp_fu_266_p0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_266_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage3, zext_ln1118_fu_894_p1, zext_ln1118_1_fu_898_p1, zext_ln1118_2_fu_902_p1, zext_ln1118_3_fu_906_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_266_p1 <= zext_ln1118_3_fu_906_p1(17 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_266_p1 <= zext_ln1118_2_fu_902_p1(17 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_266_p1 <= zext_ln1118_1_fu_898_p1(17 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_266_p1 <= zext_ln1118_fu_894_p1(17 - 1 downto 0);
        else 
            grp_fu_266_p1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_266_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_266_p0) * signed('0' &grp_fu_266_p1))), 26));
    icmp_ln1496_1_fu_327_p0 <= data_V_data_2_V_dout;
    icmp_ln1496_1_fu_327_p1 <= data_V_data_3_V_dout;
    icmp_ln1496_1_fu_327_p2 <= "1" when (signed(icmp_ln1496_1_fu_327_p0) < signed(icmp_ln1496_1_fu_327_p1)) else "0";
    icmp_ln1496_2_fu_341_p2 <= "1" when (signed(select_ln65_reg_930) < signed(select_ln65_1_reg_936)) else "0";
    icmp_ln1496_fu_313_p0 <= data_V_data_0_V_dout;
    icmp_ln1496_fu_313_p1 <= data_V_data_1_V_dout;
    icmp_ln1496_fu_313_p2 <= "1" when (signed(icmp_ln1496_fu_313_p0) < signed(icmp_ln1496_fu_313_p1)) else "0";
    invert_table2_address0 <= zext_ln235_fu_884_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op12 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);
    io_acc_block_signal_op157 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
        lhs_V_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_fu_748_p3),19));

    or_ln340_1_fu_459_p2 <= (xor_ln340_1_fu_453_p2 or tmp_12_fu_427_p3);
    or_ln340_2_fu_514_p2 <= (xor_ln340_2_fu_508_p2 or tmp_14_fu_482_p3);
    or_ln340_3_fu_569_p2 <= (xor_ln340_3_fu_563_p2 or tmp_16_fu_537_p3);
    or_ln340_4_fu_844_p2 <= (xor_ln340_4_fu_838_p2 or p_Result_12_fu_812_p3);
    or_ln340_fu_404_p2 <= (xor_ln340_fu_398_p2 or tmp_10_fu_372_p3);
    p_Result_10_fu_768_p3 <= p_Val2_10_fu_762_p2(17 downto 17);
    p_Result_11_fu_798_p3 <= ret_V_fu_792_p2(18 downto 18);
    p_Result_12_fu_812_p3 <= p_Val2_14_fu_806_p2(17 downto 17);
    p_Result_s_fu_740_p3 <= p_Val2_7_fu_734_p2(17 downto 17);
    p_Val2_10_fu_762_p2 <= std_logic_vector(unsigned(p_Val2_8_fu_756_p1) + unsigned(p_Val2_9_fu_759_p1));
    p_Val2_11_fu_748_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_s_fu_740_p3(0) = '1') else 
        p_Val2_7_fu_734_p2;
    p_Val2_12_fu_776_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_10_fu_768_p3(0) = '1') else 
        p_Val2_10_fu_762_p2;
    p_Val2_14_fu_806_p2 <= std_logic_vector(signed(p_Val2_12_fu_776_p3) + signed(p_Val2_11_fu_748_p3));
    p_Val2_5_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_962),18));
    p_Val2_6_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_973),18));
    p_Val2_7_fu_734_p2 <= std_logic_vector(unsigned(p_Val2_5_fu_728_p1) + unsigned(p_Val2_6_fu_731_p1));
    p_Val2_8_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_984),18));
    p_Val2_9_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_995),18));

    res_V_data_0_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, res_V_data_0_V_full_n, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_reg_1011;

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, res_V_data_1_V_full_n, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_reg_1016;

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, res_V_data_2_V_full_n, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_reg_1021;

    res_V_data_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, res_V_data_3_V_full_n, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= grp_fu_266_p2(25 downto 10);

    res_V_data_3_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_792_p2 <= std_logic_vector(signed(lhs_V_fu_784_p1) + signed(rhs_V_fu_788_p1));
        rhs_V_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_12_fu_776_p3),19));

    select_ln340_10_fu_860_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_9_fu_832_p2(0) = '1') else 
        tmp_6_fu_850_p4;
    select_ln340_2_fu_624_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_6_fu_447_p2(0) = '1') else 
        tmp_7_fu_614_p4;
    select_ln340_4_fu_658_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_7_fu_502_p2(0) = '1') else 
        tmp_9_fu_648_p4;
    select_ln340_6_fu_692_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_8_fu_557_p2(0) = '1') else 
        tmp_s_fu_682_p4;
    select_ln340_fu_585_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_5_fu_392_p2(0) = '1') else 
        tmp_fu_575_p4;
    select_ln388_1_fu_632_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_441_p2(0) = '1') else 
        tmp_7_fu_614_p4;
    select_ln388_2_fu_666_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_496_p2(0) = '1') else 
        tmp_9_fu_648_p4;
    select_ln388_3_fu_700_p3 <= 
        ap_const_lv10_200 when (and_ln786_3_fu_551_p2(0) = '1') else 
        tmp_s_fu_682_p4;
    select_ln388_4_fu_868_p3 <= 
        ap_const_lv10_200 when (underflow_fu_826_p2(0) = '1') else 
        tmp_6_fu_850_p4;
    select_ln388_fu_593_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_386_p2(0) = '1') else 
        tmp_fu_575_p4;
    select_ln65_1_fu_333_p1 <= data_V_data_3_V_dout;
    select_ln65_1_fu_333_p2 <= data_V_data_2_V_dout;
    select_ln65_1_fu_333_p3 <= 
        select_ln65_1_fu_333_p1 when (icmp_ln1496_1_fu_327_p2(0) = '1') else 
        select_ln65_1_fu_333_p2;
    select_ln65_fu_319_p1 <= data_V_data_1_V_dout;
    select_ln65_fu_319_p2 <= data_V_data_0_V_dout;
    select_ln65_fu_319_p3 <= 
        select_ln65_fu_319_p1 when (icmp_ln1496_fu_313_p2(0) = '1') else 
        select_ln65_fu_319_p2;
        sext_ln241_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table2_q0),26));

        sext_ln703_1_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_345_p3),17));

        sext_ln703_2_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_1_V_1_reg_915),17));

        sext_ln703_3_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_2_V_1_reg_920),17));

        sext_ln703_4_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_3_V_1_reg_925),17));

        sext_ln703_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_data_0_V_1_reg_910),17));

    sub_ln1193_1_fu_413_p2 <= std_logic_vector(signed(sext_ln703_2_fu_410_p1) - signed(sext_ln703_1_fu_354_p1));
    sub_ln1193_2_fu_468_p2 <= std_logic_vector(signed(sext_ln703_3_fu_465_p1) - signed(sext_ln703_1_fu_354_p1));
    sub_ln1193_3_fu_523_p2 <= std_logic_vector(signed(sext_ln703_4_fu_520_p1) - signed(sext_ln703_1_fu_354_p1));
    sub_ln1193_fu_358_p2 <= std_logic_vector(signed(sext_ln703_fu_351_p1) - signed(sext_ln703_1_fu_354_p1));
    tmp_10_fu_372_p3 <= sub_ln1193_fu_358_p2(15 downto 15);
    tmp_11_fu_419_p3 <= sub_ln1193_1_fu_413_p2(16 downto 16);
    tmp_12_fu_427_p3 <= sub_ln1193_1_fu_413_p2(15 downto 15);
    tmp_13_fu_474_p3 <= sub_ln1193_2_fu_468_p2(16 downto 16);
    tmp_14_fu_482_p3 <= sub_ln1193_2_fu_468_p2(15 downto 15);
    tmp_15_fu_529_p3 <= sub_ln1193_3_fu_523_p2(16 downto 16);
    tmp_16_fu_537_p3 <= sub_ln1193_3_fu_523_p2(15 downto 15);
    tmp_6_fu_850_p4 <= p_Val2_14_fu_806_p2(17 downto 8);
    tmp_7_fu_614_p4 <= sub_ln1193_1_fu_413_p2(15 downto 6);
    tmp_8_fu_364_p3 <= sub_ln1193_fu_358_p2(16 downto 16);
    tmp_9_fu_648_p4 <= sub_ln1193_2_fu_468_p2(15 downto 6);
    tmp_fu_575_p4 <= sub_ln1193_fu_358_p2(15 downto 6);
    tmp_s_fu_682_p4 <= sub_ln1193_3_fu_523_p2(15 downto 6);
    underflow_fu_826_p2 <= (xor_ln786_4_fu_820_p2 and p_Result_11_fu_798_p3);
    x_max_V_fu_345_p3 <= 
        select_ln65_1_reg_936 when (icmp_ln1496_2_fu_341_p2(0) = '1') else 
        select_ln65_reg_930;
    xor_ln340_1_fu_453_p2 <= (tmp_11_fu_419_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_508_p2 <= (tmp_13_fu_474_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_563_p2 <= (tmp_15_fu_529_p3 xor ap_const_lv1_1);
    xor_ln340_4_fu_838_p2 <= (p_Result_11_fu_798_p3 xor ap_const_lv1_1);
    xor_ln340_5_fu_392_p2 <= (tmp_8_fu_364_p3 xor tmp_10_fu_372_p3);
    xor_ln340_6_fu_447_p2 <= (tmp_12_fu_427_p3 xor tmp_11_fu_419_p3);
    xor_ln340_7_fu_502_p2 <= (tmp_14_fu_482_p3 xor tmp_13_fu_474_p3);
    xor_ln340_8_fu_557_p2 <= (tmp_16_fu_537_p3 xor tmp_15_fu_529_p3);
    xor_ln340_9_fu_832_p2 <= (p_Result_12_fu_812_p3 xor p_Result_11_fu_798_p3);
    xor_ln340_fu_398_p2 <= (tmp_8_fu_364_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_435_p2 <= (tmp_12_fu_427_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_490_p2 <= (tmp_14_fu_482_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_545_p2 <= (tmp_16_fu_537_p3 xor ap_const_lv1_1);
    xor_ln786_4_fu_820_p2 <= (p_Result_12_fu_812_p3 xor ap_const_lv1_1);
    xor_ln786_fu_380_p2 <= (tmp_10_fu_372_p3 xor ap_const_lv1_1);
    y_V_1_fu_640_p3 <= 
        select_ln340_2_fu_624_p3 when (or_ln340_1_fu_459_p2(0) = '1') else 
        select_ln388_1_fu_632_p3;
    y_V_2_fu_674_p3 <= 
        select_ln340_4_fu_658_p3 when (or_ln340_2_fu_514_p2(0) = '1') else 
        select_ln388_2_fu_666_p3;
    y_V_3_fu_708_p3 <= 
        select_ln340_6_fu_692_p3 when (or_ln340_3_fu_569_p2(0) = '1') else 
        select_ln388_3_fu_700_p3;
    y_V_4_fu_876_p3 <= 
        select_ln340_10_fu_860_p3 when (or_ln340_4_fu_844_p2(0) = '1') else 
        select_ln388_4_fu_868_p3;
    y_V_fu_601_p3 <= 
        select_ln340_fu_585_p3 when (or_ln340_fu_404_p2(0) = '1') else 
        select_ln388_fu_593_p3;
    zext_ln1118_1_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_973_pp0_iter1_reg),26));
    zext_ln1118_2_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_984_pp0_iter2_reg),26));
    zext_ln1118_3_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_995_pp0_iter2_reg),26));
    zext_ln1118_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_962_pp0_iter1_reg),26));
    zext_ln225_1_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_reg_947),64));
    zext_ln225_2_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_reg_952),64));
    zext_ln225_3_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_reg_957),64));
    zext_ln225_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_601_p3),64));
    zext_ln235_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_fu_876_p3),64));
end behav;
