-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    conv1_input_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    conv1_input_V_data_0_V_empty_n : IN STD_LOGIC;
    conv1_input_V_data_0_V_read : OUT STD_LOGIC;
    conv1_input_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    conv1_input_V_data_1_V_empty_n : IN STD_LOGIC;
    conv1_input_V_data_1_V_read : OUT STD_LOGIC;
    conv1_input_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    conv1_input_V_data_2_V_empty_n : IN STD_LOGIC;
    conv1_input_V_data_2_V_read : OUT STD_LOGIC;
    layer12_out_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer12_out_V_data_0_V_full_n : IN STD_LOGIC;
    layer12_out_V_data_0_V_write : OUT STD_LOGIC;
    layer12_out_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer12_out_V_data_1_V_full_n : IN STD_LOGIC;
    layer12_out_V_data_1_V_write : OUT STD_LOGIC;
    layer12_out_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer12_out_V_data_2_V_full_n : IN STD_LOGIC;
    layer12_out_V_data_2_V_write : OUT STD_LOGIC;
    layer12_out_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer12_out_V_data_3_V_full_n : IN STD_LOGIC;
    layer12_out_V_data_3_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of myproject is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal conv_2d_cl_1_U0_ap_start : STD_LOGIC;
    signal conv_2d_cl_1_U0_ap_done : STD_LOGIC;
    signal conv_2d_cl_1_U0_ap_continue : STD_LOGIC;
    signal conv_2d_cl_1_U0_ap_idle : STD_LOGIC;
    signal conv_2d_cl_1_U0_ap_ready : STD_LOGIC;
    signal conv_2d_cl_1_U0_start_out : STD_LOGIC;
    signal conv_2d_cl_1_U0_start_write : STD_LOGIC;
    signal conv_2d_cl_1_U0_data_V_data_0_V_read : STD_LOGIC;
    signal conv_2d_cl_1_U0_data_V_data_1_V_read : STD_LOGIC;
    signal conv_2d_cl_1_U0_data_V_data_2_V_read : STD_LOGIC;
    signal conv_2d_cl_1_U0_res_V_data_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_2d_cl_1_U0_res_V_data_0_V_write : STD_LOGIC;
    signal conv_2d_cl_1_U0_res_V_data_1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_2d_cl_1_U0_res_V_data_1_V_write : STD_LOGIC;
    signal conv_2d_cl_1_U0_res_V_data_2_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_2d_cl_1_U0_res_V_data_2_V_write : STD_LOGIC;
    signal conv_2d_cl_1_U0_res_V_data_3_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_2d_cl_1_U0_res_V_data_3_V_write : STD_LOGIC;
    signal relu_1_U0_ap_start : STD_LOGIC;
    signal relu_1_U0_ap_done : STD_LOGIC;
    signal relu_1_U0_ap_continue : STD_LOGIC;
    signal relu_1_U0_ap_idle : STD_LOGIC;
    signal relu_1_U0_ap_ready : STD_LOGIC;
    signal relu_1_U0_start_out : STD_LOGIC;
    signal relu_1_U0_start_write : STD_LOGIC;
    signal relu_1_U0_data_V_data_0_V_read : STD_LOGIC;
    signal relu_1_U0_data_V_data_1_V_read : STD_LOGIC;
    signal relu_1_U0_data_V_data_2_V_read : STD_LOGIC;
    signal relu_1_U0_data_V_data_3_V_read : STD_LOGIC;
    signal relu_1_U0_res_V_data_0_V_din : STD_LOGIC_VECTOR (5 downto 0);
    signal relu_1_U0_res_V_data_0_V_write : STD_LOGIC;
    signal relu_1_U0_res_V_data_1_V_din : STD_LOGIC_VECTOR (5 downto 0);
    signal relu_1_U0_res_V_data_1_V_write : STD_LOGIC;
    signal relu_1_U0_res_V_data_2_V_din : STD_LOGIC_VECTOR (5 downto 0);
    signal relu_1_U0_res_V_data_2_V_write : STD_LOGIC;
    signal relu_1_U0_res_V_data_3_V_din : STD_LOGIC_VECTOR (5 downto 0);
    signal relu_1_U0_res_V_data_3_V_write : STD_LOGIC;
    signal pooling2d_cl_1_U0_ap_start : STD_LOGIC;
    signal pooling2d_cl_1_U0_ap_done : STD_LOGIC;
    signal pooling2d_cl_1_U0_ap_continue : STD_LOGIC;
    signal pooling2d_cl_1_U0_ap_idle : STD_LOGIC;
    signal pooling2d_cl_1_U0_ap_ready : STD_LOGIC;
    signal pooling2d_cl_1_U0_start_out : STD_LOGIC;
    signal pooling2d_cl_1_U0_start_write : STD_LOGIC;
    signal pooling2d_cl_1_U0_data_V_data_0_V_read : STD_LOGIC;
    signal pooling2d_cl_1_U0_data_V_data_1_V_read : STD_LOGIC;
    signal pooling2d_cl_1_U0_data_V_data_2_V_read : STD_LOGIC;
    signal pooling2d_cl_1_U0_data_V_data_3_V_read : STD_LOGIC;
    signal pooling2d_cl_1_U0_res_V_data_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal pooling2d_cl_1_U0_res_V_data_0_V_write : STD_LOGIC;
    signal pooling2d_cl_1_U0_res_V_data_1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal pooling2d_cl_1_U0_res_V_data_1_V_write : STD_LOGIC;
    signal pooling2d_cl_1_U0_res_V_data_2_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal pooling2d_cl_1_U0_res_V_data_2_V_write : STD_LOGIC;
    signal pooling2d_cl_1_U0_res_V_data_3_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal pooling2d_cl_1_U0_res_V_data_3_V_write : STD_LOGIC;
    signal conv_2d_cl_U0_ap_start : STD_LOGIC;
    signal conv_2d_cl_U0_ap_done : STD_LOGIC;
    signal conv_2d_cl_U0_ap_continue : STD_LOGIC;
    signal conv_2d_cl_U0_ap_idle : STD_LOGIC;
    signal conv_2d_cl_U0_ap_ready : STD_LOGIC;
    signal conv_2d_cl_U0_start_out : STD_LOGIC;
    signal conv_2d_cl_U0_start_write : STD_LOGIC;
    signal conv_2d_cl_U0_data_V_data_0_V_read : STD_LOGIC;
    signal conv_2d_cl_U0_data_V_data_1_V_read : STD_LOGIC;
    signal conv_2d_cl_U0_data_V_data_2_V_read : STD_LOGIC;
    signal conv_2d_cl_U0_data_V_data_3_V_read : STD_LOGIC;
    signal conv_2d_cl_U0_res_V_data_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_2d_cl_U0_res_V_data_0_V_write : STD_LOGIC;
    signal conv_2d_cl_U0_res_V_data_1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_2d_cl_U0_res_V_data_1_V_write : STD_LOGIC;
    signal conv_2d_cl_U0_res_V_data_2_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_2d_cl_U0_res_V_data_2_V_write : STD_LOGIC;
    signal conv_2d_cl_U0_res_V_data_3_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_2d_cl_U0_res_V_data_3_V_write : STD_LOGIC;
    signal relu_U0_ap_start : STD_LOGIC;
    signal relu_U0_ap_done : STD_LOGIC;
    signal relu_U0_ap_continue : STD_LOGIC;
    signal relu_U0_ap_idle : STD_LOGIC;
    signal relu_U0_ap_ready : STD_LOGIC;
    signal relu_U0_start_out : STD_LOGIC;
    signal relu_U0_start_write : STD_LOGIC;
    signal relu_U0_data_V_data_0_V_read : STD_LOGIC;
    signal relu_U0_data_V_data_1_V_read : STD_LOGIC;
    signal relu_U0_data_V_data_2_V_read : STD_LOGIC;
    signal relu_U0_data_V_data_3_V_read : STD_LOGIC;
    signal relu_U0_res_V_data_0_V_din : STD_LOGIC_VECTOR (5 downto 0);
    signal relu_U0_res_V_data_0_V_write : STD_LOGIC;
    signal relu_U0_res_V_data_1_V_din : STD_LOGIC_VECTOR (5 downto 0);
    signal relu_U0_res_V_data_1_V_write : STD_LOGIC;
    signal relu_U0_res_V_data_2_V_din : STD_LOGIC_VECTOR (5 downto 0);
    signal relu_U0_res_V_data_2_V_write : STD_LOGIC;
    signal relu_U0_res_V_data_3_V_din : STD_LOGIC_VECTOR (5 downto 0);
    signal relu_U0_res_V_data_3_V_write : STD_LOGIC;
    signal pooling2d_cl_U0_ap_start : STD_LOGIC;
    signal pooling2d_cl_U0_ap_done : STD_LOGIC;
    signal pooling2d_cl_U0_ap_continue : STD_LOGIC;
    signal pooling2d_cl_U0_ap_idle : STD_LOGIC;
    signal pooling2d_cl_U0_ap_ready : STD_LOGIC;
    signal pooling2d_cl_U0_start_out : STD_LOGIC;
    signal pooling2d_cl_U0_start_write : STD_LOGIC;
    signal pooling2d_cl_U0_data_V_data_0_V_read : STD_LOGIC;
    signal pooling2d_cl_U0_data_V_data_1_V_read : STD_LOGIC;
    signal pooling2d_cl_U0_data_V_data_2_V_read : STD_LOGIC;
    signal pooling2d_cl_U0_data_V_data_3_V_read : STD_LOGIC;
    signal pooling2d_cl_U0_res_V_data_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal pooling2d_cl_U0_res_V_data_0_V_write : STD_LOGIC;
    signal pooling2d_cl_U0_res_V_data_1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal pooling2d_cl_U0_res_V_data_1_V_write : STD_LOGIC;
    signal pooling2d_cl_U0_res_V_data_2_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal pooling2d_cl_U0_res_V_data_2_V_write : STD_LOGIC;
    signal pooling2d_cl_U0_res_V_data_3_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal pooling2d_cl_U0_res_V_data_3_V_write : STD_LOGIC;
    signal dense_U0_ap_start : STD_LOGIC;
    signal dense_U0_ap_done : STD_LOGIC;
    signal dense_U0_ap_continue : STD_LOGIC;
    signal dense_U0_ap_idle : STD_LOGIC;
    signal dense_U0_ap_ready : STD_LOGIC;
    signal dense_U0_start_out : STD_LOGIC;
    signal dense_U0_start_write : STD_LOGIC;
    signal dense_U0_data_stream_V_data_0_V_read : STD_LOGIC;
    signal dense_U0_data_stream_V_data_1_V_read : STD_LOGIC;
    signal dense_U0_data_stream_V_data_2_V_read : STD_LOGIC;
    signal dense_U0_data_stream_V_data_3_V_read : STD_LOGIC;
    signal dense_U0_res_stream_V_data_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_U0_res_stream_V_data_0_V_write : STD_LOGIC;
    signal dense_U0_res_stream_V_data_1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_U0_res_stream_V_data_1_V_write : STD_LOGIC;
    signal dense_U0_res_stream_V_data_2_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_U0_res_stream_V_data_2_V_write : STD_LOGIC;
    signal dense_U0_res_stream_V_data_3_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_U0_res_stream_V_data_3_V_write : STD_LOGIC;
    signal softmax_U0_ap_start : STD_LOGIC;
    signal softmax_U0_ap_done : STD_LOGIC;
    signal softmax_U0_ap_continue : STD_LOGIC;
    signal softmax_U0_ap_idle : STD_LOGIC;
    signal softmax_U0_ap_ready : STD_LOGIC;
    signal softmax_U0_data_V_data_0_V_read : STD_LOGIC;
    signal softmax_U0_data_V_data_1_V_read : STD_LOGIC;
    signal softmax_U0_data_V_data_2_V_read : STD_LOGIC;
    signal softmax_U0_data_V_data_3_V_read : STD_LOGIC;
    signal softmax_U0_res_V_data_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal softmax_U0_res_V_data_0_V_write : STD_LOGIC;
    signal softmax_U0_res_V_data_1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal softmax_U0_res_V_data_1_V_write : STD_LOGIC;
    signal softmax_U0_res_V_data_2_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal softmax_U0_res_V_data_2_V_write : STD_LOGIC;
    signal softmax_U0_res_V_data_3_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal softmax_U0_res_V_data_3_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal layer2_out_V_data_0_full_n : STD_LOGIC;
    signal layer2_out_V_data_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_V_data_0_empty_n : STD_LOGIC;
    signal layer2_out_V_data_1_full_n : STD_LOGIC;
    signal layer2_out_V_data_1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_V_data_1_empty_n : STD_LOGIC;
    signal layer2_out_V_data_2_full_n : STD_LOGIC;
    signal layer2_out_V_data_2_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_V_data_2_empty_n : STD_LOGIC;
    signal layer2_out_V_data_3_full_n : STD_LOGIC;
    signal layer2_out_V_data_3_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_V_data_3_empty_n : STD_LOGIC;
    signal layer4_out_V_data_0_full_n : STD_LOGIC;
    signal layer4_out_V_data_0_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal layer4_out_V_data_0_empty_n : STD_LOGIC;
    signal layer4_out_V_data_1_full_n : STD_LOGIC;
    signal layer4_out_V_data_1_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal layer4_out_V_data_1_empty_n : STD_LOGIC;
    signal layer4_out_V_data_2_full_n : STD_LOGIC;
    signal layer4_out_V_data_2_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal layer4_out_V_data_2_empty_n : STD_LOGIC;
    signal layer4_out_V_data_3_full_n : STD_LOGIC;
    signal layer4_out_V_data_3_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal layer4_out_V_data_3_empty_n : STD_LOGIC;
    signal layer5_out_V_data_0_full_n : STD_LOGIC;
    signal layer5_out_V_data_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer5_out_V_data_0_empty_n : STD_LOGIC;
    signal layer5_out_V_data_1_full_n : STD_LOGIC;
    signal layer5_out_V_data_1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer5_out_V_data_1_empty_n : STD_LOGIC;
    signal layer5_out_V_data_2_full_n : STD_LOGIC;
    signal layer5_out_V_data_2_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer5_out_V_data_2_empty_n : STD_LOGIC;
    signal layer5_out_V_data_3_full_n : STD_LOGIC;
    signal layer5_out_V_data_3_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer5_out_V_data_3_empty_n : STD_LOGIC;
    signal layer6_out_V_data_0_full_n : STD_LOGIC;
    signal layer6_out_V_data_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_V_data_0_empty_n : STD_LOGIC;
    signal layer6_out_V_data_1_full_n : STD_LOGIC;
    signal layer6_out_V_data_1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_V_data_1_empty_n : STD_LOGIC;
    signal layer6_out_V_data_2_full_n : STD_LOGIC;
    signal layer6_out_V_data_2_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_V_data_2_empty_n : STD_LOGIC;
    signal layer6_out_V_data_3_full_n : STD_LOGIC;
    signal layer6_out_V_data_3_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_V_data_3_empty_n : STD_LOGIC;
    signal layer8_out_V_data_0_full_n : STD_LOGIC;
    signal layer8_out_V_data_0_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal layer8_out_V_data_0_empty_n : STD_LOGIC;
    signal layer8_out_V_data_1_full_n : STD_LOGIC;
    signal layer8_out_V_data_1_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal layer8_out_V_data_1_empty_n : STD_LOGIC;
    signal layer8_out_V_data_2_full_n : STD_LOGIC;
    signal layer8_out_V_data_2_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal layer8_out_V_data_2_empty_n : STD_LOGIC;
    signal layer8_out_V_data_3_full_n : STD_LOGIC;
    signal layer8_out_V_data_3_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal layer8_out_V_data_3_empty_n : STD_LOGIC;
    signal layer9_out_V_data_0_full_n : STD_LOGIC;
    signal layer9_out_V_data_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer9_out_V_data_0_empty_n : STD_LOGIC;
    signal layer9_out_V_data_1_full_n : STD_LOGIC;
    signal layer9_out_V_data_1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer9_out_V_data_1_empty_n : STD_LOGIC;
    signal layer9_out_V_data_2_full_n : STD_LOGIC;
    signal layer9_out_V_data_2_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer9_out_V_data_2_empty_n : STD_LOGIC;
    signal layer9_out_V_data_3_full_n : STD_LOGIC;
    signal layer9_out_V_data_3_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer9_out_V_data_3_empty_n : STD_LOGIC;
    signal layer11_out_V_data_0_full_n : STD_LOGIC;
    signal layer11_out_V_data_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer11_out_V_data_0_empty_n : STD_LOGIC;
    signal layer11_out_V_data_1_full_n : STD_LOGIC;
    signal layer11_out_V_data_1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer11_out_V_data_1_empty_n : STD_LOGIC;
    signal layer11_out_V_data_2_full_n : STD_LOGIC;
    signal layer11_out_V_data_2_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer11_out_V_data_2_empty_n : STD_LOGIC;
    signal layer11_out_V_data_3_full_n : STD_LOGIC;
    signal layer11_out_V_data_3_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal layer11_out_V_data_3_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_relu_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_1_U0_full_n : STD_LOGIC;
    signal start_for_relu_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_1_U0_empty_n : STD_LOGIC;
    signal start_for_pooling2d_cl_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pooling2d_cl_1_U0_full_n : STD_LOGIC;
    signal start_for_pooling2d_cl_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pooling2d_cl_1_U0_empty_n : STD_LOGIC;
    signal start_for_conv_2d_cl_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv_2d_cl_U0_full_n : STD_LOGIC;
    signal start_for_conv_2d_cl_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv_2d_cl_U0_empty_n : STD_LOGIC;
    signal start_for_relu_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_U0_full_n : STD_LOGIC;
    signal start_for_relu_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_U0_empty_n : STD_LOGIC;
    signal start_for_pooling2d_cl_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pooling2d_cl_U0_full_n : STD_LOGIC;
    signal start_for_pooling2d_cl_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pooling2d_cl_U0_empty_n : STD_LOGIC;
    signal start_for_dense_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dense_U0_full_n : STD_LOGIC;
    signal start_for_dense_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dense_U0_empty_n : STD_LOGIC;
    signal start_for_softmax_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_softmax_U0_full_n : STD_LOGIC;
    signal start_for_softmax_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_softmax_U0_empty_n : STD_LOGIC;
    signal softmax_U0_start_full_n : STD_LOGIC;
    signal softmax_U0_start_write : STD_LOGIC;

    component conv_2d_cl_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_0_V_empty_n : IN STD_LOGIC;
        data_V_data_0_V_read : OUT STD_LOGIC;
        data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_1_V_empty_n : IN STD_LOGIC;
        data_V_data_1_V_read : OUT STD_LOGIC;
        data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_2_V_empty_n : IN STD_LOGIC;
        data_V_data_2_V_read : OUT STD_LOGIC;
        res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_0_V_full_n : IN STD_LOGIC;
        res_V_data_0_V_write : OUT STD_LOGIC;
        res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_1_V_full_n : IN STD_LOGIC;
        res_V_data_1_V_write : OUT STD_LOGIC;
        res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_2_V_full_n : IN STD_LOGIC;
        res_V_data_2_V_write : OUT STD_LOGIC;
        res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_3_V_full_n : IN STD_LOGIC;
        res_V_data_3_V_write : OUT STD_LOGIC );
    end component;


    component relu_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_0_V_empty_n : IN STD_LOGIC;
        data_V_data_0_V_read : OUT STD_LOGIC;
        data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_1_V_empty_n : IN STD_LOGIC;
        data_V_data_1_V_read : OUT STD_LOGIC;
        data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_2_V_empty_n : IN STD_LOGIC;
        data_V_data_2_V_read : OUT STD_LOGIC;
        data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_3_V_empty_n : IN STD_LOGIC;
        data_V_data_3_V_read : OUT STD_LOGIC;
        res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_V_data_0_V_full_n : IN STD_LOGIC;
        res_V_data_0_V_write : OUT STD_LOGIC;
        res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_V_data_1_V_full_n : IN STD_LOGIC;
        res_V_data_1_V_write : OUT STD_LOGIC;
        res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_V_data_2_V_full_n : IN STD_LOGIC;
        res_V_data_2_V_write : OUT STD_LOGIC;
        res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_V_data_3_V_full_n : IN STD_LOGIC;
        res_V_data_3_V_write : OUT STD_LOGIC );
    end component;


    component pooling2d_cl_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        data_V_data_0_V_empty_n : IN STD_LOGIC;
        data_V_data_0_V_read : OUT STD_LOGIC;
        data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        data_V_data_1_V_empty_n : IN STD_LOGIC;
        data_V_data_1_V_read : OUT STD_LOGIC;
        data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        data_V_data_2_V_empty_n : IN STD_LOGIC;
        data_V_data_2_V_read : OUT STD_LOGIC;
        data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        data_V_data_3_V_empty_n : IN STD_LOGIC;
        data_V_data_3_V_read : OUT STD_LOGIC;
        res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_0_V_full_n : IN STD_LOGIC;
        res_V_data_0_V_write : OUT STD_LOGIC;
        res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_1_V_full_n : IN STD_LOGIC;
        res_V_data_1_V_write : OUT STD_LOGIC;
        res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_2_V_full_n : IN STD_LOGIC;
        res_V_data_2_V_write : OUT STD_LOGIC;
        res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_3_V_full_n : IN STD_LOGIC;
        res_V_data_3_V_write : OUT STD_LOGIC );
    end component;


    component conv_2d_cl IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_0_V_empty_n : IN STD_LOGIC;
        data_V_data_0_V_read : OUT STD_LOGIC;
        data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_1_V_empty_n : IN STD_LOGIC;
        data_V_data_1_V_read : OUT STD_LOGIC;
        data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_2_V_empty_n : IN STD_LOGIC;
        data_V_data_2_V_read : OUT STD_LOGIC;
        data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_3_V_empty_n : IN STD_LOGIC;
        data_V_data_3_V_read : OUT STD_LOGIC;
        res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_0_V_full_n : IN STD_LOGIC;
        res_V_data_0_V_write : OUT STD_LOGIC;
        res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_1_V_full_n : IN STD_LOGIC;
        res_V_data_1_V_write : OUT STD_LOGIC;
        res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_2_V_full_n : IN STD_LOGIC;
        res_V_data_2_V_write : OUT STD_LOGIC;
        res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_3_V_full_n : IN STD_LOGIC;
        res_V_data_3_V_write : OUT STD_LOGIC );
    end component;


    component relu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_0_V_empty_n : IN STD_LOGIC;
        data_V_data_0_V_read : OUT STD_LOGIC;
        data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_1_V_empty_n : IN STD_LOGIC;
        data_V_data_1_V_read : OUT STD_LOGIC;
        data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_2_V_empty_n : IN STD_LOGIC;
        data_V_data_2_V_read : OUT STD_LOGIC;
        data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_3_V_empty_n : IN STD_LOGIC;
        data_V_data_3_V_read : OUT STD_LOGIC;
        res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_V_data_0_V_full_n : IN STD_LOGIC;
        res_V_data_0_V_write : OUT STD_LOGIC;
        res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_V_data_1_V_full_n : IN STD_LOGIC;
        res_V_data_1_V_write : OUT STD_LOGIC;
        res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_V_data_2_V_full_n : IN STD_LOGIC;
        res_V_data_2_V_write : OUT STD_LOGIC;
        res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_V_data_3_V_full_n : IN STD_LOGIC;
        res_V_data_3_V_write : OUT STD_LOGIC );
    end component;


    component pooling2d_cl IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        data_V_data_0_V_empty_n : IN STD_LOGIC;
        data_V_data_0_V_read : OUT STD_LOGIC;
        data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        data_V_data_1_V_empty_n : IN STD_LOGIC;
        data_V_data_1_V_read : OUT STD_LOGIC;
        data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        data_V_data_2_V_empty_n : IN STD_LOGIC;
        data_V_data_2_V_read : OUT STD_LOGIC;
        data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        data_V_data_3_V_empty_n : IN STD_LOGIC;
        data_V_data_3_V_read : OUT STD_LOGIC;
        res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_0_V_full_n : IN STD_LOGIC;
        res_V_data_0_V_write : OUT STD_LOGIC;
        res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_1_V_full_n : IN STD_LOGIC;
        res_V_data_1_V_write : OUT STD_LOGIC;
        res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_2_V_full_n : IN STD_LOGIC;
        res_V_data_2_V_write : OUT STD_LOGIC;
        res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_3_V_full_n : IN STD_LOGIC;
        res_V_data_3_V_write : OUT STD_LOGIC );
    end component;


    component dense IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_stream_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_stream_V_data_0_V_empty_n : IN STD_LOGIC;
        data_stream_V_data_0_V_read : OUT STD_LOGIC;
        data_stream_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_stream_V_data_1_V_empty_n : IN STD_LOGIC;
        data_stream_V_data_1_V_read : OUT STD_LOGIC;
        data_stream_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_stream_V_data_2_V_empty_n : IN STD_LOGIC;
        data_stream_V_data_2_V_read : OUT STD_LOGIC;
        data_stream_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_stream_V_data_3_V_empty_n : IN STD_LOGIC;
        data_stream_V_data_3_V_read : OUT STD_LOGIC;
        res_stream_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_0_V_full_n : IN STD_LOGIC;
        res_stream_V_data_0_V_write : OUT STD_LOGIC;
        res_stream_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_1_V_full_n : IN STD_LOGIC;
        res_stream_V_data_1_V_write : OUT STD_LOGIC;
        res_stream_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_2_V_full_n : IN STD_LOGIC;
        res_stream_V_data_2_V_write : OUT STD_LOGIC;
        res_stream_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_stream_V_data_3_V_full_n : IN STD_LOGIC;
        res_stream_V_data_3_V_write : OUT STD_LOGIC );
    end component;


    component softmax IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_0_V_empty_n : IN STD_LOGIC;
        data_V_data_0_V_read : OUT STD_LOGIC;
        data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_1_V_empty_n : IN STD_LOGIC;
        data_V_data_1_V_read : OUT STD_LOGIC;
        data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_2_V_empty_n : IN STD_LOGIC;
        data_V_data_2_V_read : OUT STD_LOGIC;
        data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        data_V_data_3_V_empty_n : IN STD_LOGIC;
        data_V_data_3_V_read : OUT STD_LOGIC;
        res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_0_V_full_n : IN STD_LOGIC;
        res_V_data_0_V_write : OUT STD_LOGIC;
        res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_1_V_full_n : IN STD_LOGIC;
        res_V_data_1_V_write : OUT STD_LOGIC;
        res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_2_V_full_n : IN STD_LOGIC;
        res_V_data_2_V_write : OUT STD_LOGIC;
        res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        res_V_data_3_V_full_n : IN STD_LOGIC;
        res_V_data_3_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w16_d3844_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w6_d3844_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (5 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d961_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d841_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w6_d841_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (5 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d196_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_relu_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_poolingGfk IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_conv_2dHfu IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_relu_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_poolingIfE IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_dense_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_softmaxJfO IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    conv_2d_cl_1_U0 : component conv_2d_cl_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => conv_2d_cl_1_U0_ap_start,
        start_full_n => start_for_relu_1_U0_full_n,
        ap_done => conv_2d_cl_1_U0_ap_done,
        ap_continue => conv_2d_cl_1_U0_ap_continue,
        ap_idle => conv_2d_cl_1_U0_ap_idle,
        ap_ready => conv_2d_cl_1_U0_ap_ready,
        start_out => conv_2d_cl_1_U0_start_out,
        start_write => conv_2d_cl_1_U0_start_write,
        data_V_data_0_V_dout => conv1_input_V_data_0_V_dout,
        data_V_data_0_V_empty_n => conv1_input_V_data_0_V_empty_n,
        data_V_data_0_V_read => conv_2d_cl_1_U0_data_V_data_0_V_read,
        data_V_data_1_V_dout => conv1_input_V_data_1_V_dout,
        data_V_data_1_V_empty_n => conv1_input_V_data_1_V_empty_n,
        data_V_data_1_V_read => conv_2d_cl_1_U0_data_V_data_1_V_read,
        data_V_data_2_V_dout => conv1_input_V_data_2_V_dout,
        data_V_data_2_V_empty_n => conv1_input_V_data_2_V_empty_n,
        data_V_data_2_V_read => conv_2d_cl_1_U0_data_V_data_2_V_read,
        res_V_data_0_V_din => conv_2d_cl_1_U0_res_V_data_0_V_din,
        res_V_data_0_V_full_n => layer2_out_V_data_0_full_n,
        res_V_data_0_V_write => conv_2d_cl_1_U0_res_V_data_0_V_write,
        res_V_data_1_V_din => conv_2d_cl_1_U0_res_V_data_1_V_din,
        res_V_data_1_V_full_n => layer2_out_V_data_1_full_n,
        res_V_data_1_V_write => conv_2d_cl_1_U0_res_V_data_1_V_write,
        res_V_data_2_V_din => conv_2d_cl_1_U0_res_V_data_2_V_din,
        res_V_data_2_V_full_n => layer2_out_V_data_2_full_n,
        res_V_data_2_V_write => conv_2d_cl_1_U0_res_V_data_2_V_write,
        res_V_data_3_V_din => conv_2d_cl_1_U0_res_V_data_3_V_din,
        res_V_data_3_V_full_n => layer2_out_V_data_3_full_n,
        res_V_data_3_V_write => conv_2d_cl_1_U0_res_V_data_3_V_write);

    relu_1_U0 : component relu_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => relu_1_U0_ap_start,
        start_full_n => start_for_pooling2d_cl_1_U0_full_n,
        ap_done => relu_1_U0_ap_done,
        ap_continue => relu_1_U0_ap_continue,
        ap_idle => relu_1_U0_ap_idle,
        ap_ready => relu_1_U0_ap_ready,
        start_out => relu_1_U0_start_out,
        start_write => relu_1_U0_start_write,
        data_V_data_0_V_dout => layer2_out_V_data_0_dout,
        data_V_data_0_V_empty_n => layer2_out_V_data_0_empty_n,
        data_V_data_0_V_read => relu_1_U0_data_V_data_0_V_read,
        data_V_data_1_V_dout => layer2_out_V_data_1_dout,
        data_V_data_1_V_empty_n => layer2_out_V_data_1_empty_n,
        data_V_data_1_V_read => relu_1_U0_data_V_data_1_V_read,
        data_V_data_2_V_dout => layer2_out_V_data_2_dout,
        data_V_data_2_V_empty_n => layer2_out_V_data_2_empty_n,
        data_V_data_2_V_read => relu_1_U0_data_V_data_2_V_read,
        data_V_data_3_V_dout => layer2_out_V_data_3_dout,
        data_V_data_3_V_empty_n => layer2_out_V_data_3_empty_n,
        data_V_data_3_V_read => relu_1_U0_data_V_data_3_V_read,
        res_V_data_0_V_din => relu_1_U0_res_V_data_0_V_din,
        res_V_data_0_V_full_n => layer4_out_V_data_0_full_n,
        res_V_data_0_V_write => relu_1_U0_res_V_data_0_V_write,
        res_V_data_1_V_din => relu_1_U0_res_V_data_1_V_din,
        res_V_data_1_V_full_n => layer4_out_V_data_1_full_n,
        res_V_data_1_V_write => relu_1_U0_res_V_data_1_V_write,
        res_V_data_2_V_din => relu_1_U0_res_V_data_2_V_din,
        res_V_data_2_V_full_n => layer4_out_V_data_2_full_n,
        res_V_data_2_V_write => relu_1_U0_res_V_data_2_V_write,
        res_V_data_3_V_din => relu_1_U0_res_V_data_3_V_din,
        res_V_data_3_V_full_n => layer4_out_V_data_3_full_n,
        res_V_data_3_V_write => relu_1_U0_res_V_data_3_V_write);

    pooling2d_cl_1_U0 : component pooling2d_cl_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pooling2d_cl_1_U0_ap_start,
        start_full_n => start_for_conv_2d_cl_U0_full_n,
        ap_done => pooling2d_cl_1_U0_ap_done,
        ap_continue => pooling2d_cl_1_U0_ap_continue,
        ap_idle => pooling2d_cl_1_U0_ap_idle,
        ap_ready => pooling2d_cl_1_U0_ap_ready,
        start_out => pooling2d_cl_1_U0_start_out,
        start_write => pooling2d_cl_1_U0_start_write,
        data_V_data_0_V_dout => layer4_out_V_data_0_dout,
        data_V_data_0_V_empty_n => layer4_out_V_data_0_empty_n,
        data_V_data_0_V_read => pooling2d_cl_1_U0_data_V_data_0_V_read,
        data_V_data_1_V_dout => layer4_out_V_data_1_dout,
        data_V_data_1_V_empty_n => layer4_out_V_data_1_empty_n,
        data_V_data_1_V_read => pooling2d_cl_1_U0_data_V_data_1_V_read,
        data_V_data_2_V_dout => layer4_out_V_data_2_dout,
        data_V_data_2_V_empty_n => layer4_out_V_data_2_empty_n,
        data_V_data_2_V_read => pooling2d_cl_1_U0_data_V_data_2_V_read,
        data_V_data_3_V_dout => layer4_out_V_data_3_dout,
        data_V_data_3_V_empty_n => layer4_out_V_data_3_empty_n,
        data_V_data_3_V_read => pooling2d_cl_1_U0_data_V_data_3_V_read,
        res_V_data_0_V_din => pooling2d_cl_1_U0_res_V_data_0_V_din,
        res_V_data_0_V_full_n => layer5_out_V_data_0_full_n,
        res_V_data_0_V_write => pooling2d_cl_1_U0_res_V_data_0_V_write,
        res_V_data_1_V_din => pooling2d_cl_1_U0_res_V_data_1_V_din,
        res_V_data_1_V_full_n => layer5_out_V_data_1_full_n,
        res_V_data_1_V_write => pooling2d_cl_1_U0_res_V_data_1_V_write,
        res_V_data_2_V_din => pooling2d_cl_1_U0_res_V_data_2_V_din,
        res_V_data_2_V_full_n => layer5_out_V_data_2_full_n,
        res_V_data_2_V_write => pooling2d_cl_1_U0_res_V_data_2_V_write,
        res_V_data_3_V_din => pooling2d_cl_1_U0_res_V_data_3_V_din,
        res_V_data_3_V_full_n => layer5_out_V_data_3_full_n,
        res_V_data_3_V_write => pooling2d_cl_1_U0_res_V_data_3_V_write);

    conv_2d_cl_U0 : component conv_2d_cl
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => conv_2d_cl_U0_ap_start,
        start_full_n => start_for_relu_U0_full_n,
        ap_done => conv_2d_cl_U0_ap_done,
        ap_continue => conv_2d_cl_U0_ap_continue,
        ap_idle => conv_2d_cl_U0_ap_idle,
        ap_ready => conv_2d_cl_U0_ap_ready,
        start_out => conv_2d_cl_U0_start_out,
        start_write => conv_2d_cl_U0_start_write,
        data_V_data_0_V_dout => layer5_out_V_data_0_dout,
        data_V_data_0_V_empty_n => layer5_out_V_data_0_empty_n,
        data_V_data_0_V_read => conv_2d_cl_U0_data_V_data_0_V_read,
        data_V_data_1_V_dout => layer5_out_V_data_1_dout,
        data_V_data_1_V_empty_n => layer5_out_V_data_1_empty_n,
        data_V_data_1_V_read => conv_2d_cl_U0_data_V_data_1_V_read,
        data_V_data_2_V_dout => layer5_out_V_data_2_dout,
        data_V_data_2_V_empty_n => layer5_out_V_data_2_empty_n,
        data_V_data_2_V_read => conv_2d_cl_U0_data_V_data_2_V_read,
        data_V_data_3_V_dout => layer5_out_V_data_3_dout,
        data_V_data_3_V_empty_n => layer5_out_V_data_3_empty_n,
        data_V_data_3_V_read => conv_2d_cl_U0_data_V_data_3_V_read,
        res_V_data_0_V_din => conv_2d_cl_U0_res_V_data_0_V_din,
        res_V_data_0_V_full_n => layer6_out_V_data_0_full_n,
        res_V_data_0_V_write => conv_2d_cl_U0_res_V_data_0_V_write,
        res_V_data_1_V_din => conv_2d_cl_U0_res_V_data_1_V_din,
        res_V_data_1_V_full_n => layer6_out_V_data_1_full_n,
        res_V_data_1_V_write => conv_2d_cl_U0_res_V_data_1_V_write,
        res_V_data_2_V_din => conv_2d_cl_U0_res_V_data_2_V_din,
        res_V_data_2_V_full_n => layer6_out_V_data_2_full_n,
        res_V_data_2_V_write => conv_2d_cl_U0_res_V_data_2_V_write,
        res_V_data_3_V_din => conv_2d_cl_U0_res_V_data_3_V_din,
        res_V_data_3_V_full_n => layer6_out_V_data_3_full_n,
        res_V_data_3_V_write => conv_2d_cl_U0_res_V_data_3_V_write);

    relu_U0 : component relu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => relu_U0_ap_start,
        start_full_n => start_for_pooling2d_cl_U0_full_n,
        ap_done => relu_U0_ap_done,
        ap_continue => relu_U0_ap_continue,
        ap_idle => relu_U0_ap_idle,
        ap_ready => relu_U0_ap_ready,
        start_out => relu_U0_start_out,
        start_write => relu_U0_start_write,
        data_V_data_0_V_dout => layer6_out_V_data_0_dout,
        data_V_data_0_V_empty_n => layer6_out_V_data_0_empty_n,
        data_V_data_0_V_read => relu_U0_data_V_data_0_V_read,
        data_V_data_1_V_dout => layer6_out_V_data_1_dout,
        data_V_data_1_V_empty_n => layer6_out_V_data_1_empty_n,
        data_V_data_1_V_read => relu_U0_data_V_data_1_V_read,
        data_V_data_2_V_dout => layer6_out_V_data_2_dout,
        data_V_data_2_V_empty_n => layer6_out_V_data_2_empty_n,
        data_V_data_2_V_read => relu_U0_data_V_data_2_V_read,
        data_V_data_3_V_dout => layer6_out_V_data_3_dout,
        data_V_data_3_V_empty_n => layer6_out_V_data_3_empty_n,
        data_V_data_3_V_read => relu_U0_data_V_data_3_V_read,
        res_V_data_0_V_din => relu_U0_res_V_data_0_V_din,
        res_V_data_0_V_full_n => layer8_out_V_data_0_full_n,
        res_V_data_0_V_write => relu_U0_res_V_data_0_V_write,
        res_V_data_1_V_din => relu_U0_res_V_data_1_V_din,
        res_V_data_1_V_full_n => layer8_out_V_data_1_full_n,
        res_V_data_1_V_write => relu_U0_res_V_data_1_V_write,
        res_V_data_2_V_din => relu_U0_res_V_data_2_V_din,
        res_V_data_2_V_full_n => layer8_out_V_data_2_full_n,
        res_V_data_2_V_write => relu_U0_res_V_data_2_V_write,
        res_V_data_3_V_din => relu_U0_res_V_data_3_V_din,
        res_V_data_3_V_full_n => layer8_out_V_data_3_full_n,
        res_V_data_3_V_write => relu_U0_res_V_data_3_V_write);

    pooling2d_cl_U0 : component pooling2d_cl
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pooling2d_cl_U0_ap_start,
        start_full_n => start_for_dense_U0_full_n,
        ap_done => pooling2d_cl_U0_ap_done,
        ap_continue => pooling2d_cl_U0_ap_continue,
        ap_idle => pooling2d_cl_U0_ap_idle,
        ap_ready => pooling2d_cl_U0_ap_ready,
        start_out => pooling2d_cl_U0_start_out,
        start_write => pooling2d_cl_U0_start_write,
        data_V_data_0_V_dout => layer8_out_V_data_0_dout,
        data_V_data_0_V_empty_n => layer8_out_V_data_0_empty_n,
        data_V_data_0_V_read => pooling2d_cl_U0_data_V_data_0_V_read,
        data_V_data_1_V_dout => layer8_out_V_data_1_dout,
        data_V_data_1_V_empty_n => layer8_out_V_data_1_empty_n,
        data_V_data_1_V_read => pooling2d_cl_U0_data_V_data_1_V_read,
        data_V_data_2_V_dout => layer8_out_V_data_2_dout,
        data_V_data_2_V_empty_n => layer8_out_V_data_2_empty_n,
        data_V_data_2_V_read => pooling2d_cl_U0_data_V_data_2_V_read,
        data_V_data_3_V_dout => layer8_out_V_data_3_dout,
        data_V_data_3_V_empty_n => layer8_out_V_data_3_empty_n,
        data_V_data_3_V_read => pooling2d_cl_U0_data_V_data_3_V_read,
        res_V_data_0_V_din => pooling2d_cl_U0_res_V_data_0_V_din,
        res_V_data_0_V_full_n => layer9_out_V_data_0_full_n,
        res_V_data_0_V_write => pooling2d_cl_U0_res_V_data_0_V_write,
        res_V_data_1_V_din => pooling2d_cl_U0_res_V_data_1_V_din,
        res_V_data_1_V_full_n => layer9_out_V_data_1_full_n,
        res_V_data_1_V_write => pooling2d_cl_U0_res_V_data_1_V_write,
        res_V_data_2_V_din => pooling2d_cl_U0_res_V_data_2_V_din,
        res_V_data_2_V_full_n => layer9_out_V_data_2_full_n,
        res_V_data_2_V_write => pooling2d_cl_U0_res_V_data_2_V_write,
        res_V_data_3_V_din => pooling2d_cl_U0_res_V_data_3_V_din,
        res_V_data_3_V_full_n => layer9_out_V_data_3_full_n,
        res_V_data_3_V_write => pooling2d_cl_U0_res_V_data_3_V_write);

    dense_U0 : component dense
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dense_U0_ap_start,
        start_full_n => start_for_softmax_U0_full_n,
        ap_done => dense_U0_ap_done,
        ap_continue => dense_U0_ap_continue,
        ap_idle => dense_U0_ap_idle,
        ap_ready => dense_U0_ap_ready,
        start_out => dense_U0_start_out,
        start_write => dense_U0_start_write,
        data_stream_V_data_0_V_dout => layer9_out_V_data_0_dout,
        data_stream_V_data_0_V_empty_n => layer9_out_V_data_0_empty_n,
        data_stream_V_data_0_V_read => dense_U0_data_stream_V_data_0_V_read,
        data_stream_V_data_1_V_dout => layer9_out_V_data_1_dout,
        data_stream_V_data_1_V_empty_n => layer9_out_V_data_1_empty_n,
        data_stream_V_data_1_V_read => dense_U0_data_stream_V_data_1_V_read,
        data_stream_V_data_2_V_dout => layer9_out_V_data_2_dout,
        data_stream_V_data_2_V_empty_n => layer9_out_V_data_2_empty_n,
        data_stream_V_data_2_V_read => dense_U0_data_stream_V_data_2_V_read,
        data_stream_V_data_3_V_dout => layer9_out_V_data_3_dout,
        data_stream_V_data_3_V_empty_n => layer9_out_V_data_3_empty_n,
        data_stream_V_data_3_V_read => dense_U0_data_stream_V_data_3_V_read,
        res_stream_V_data_0_V_din => dense_U0_res_stream_V_data_0_V_din,
        res_stream_V_data_0_V_full_n => layer11_out_V_data_0_full_n,
        res_stream_V_data_0_V_write => dense_U0_res_stream_V_data_0_V_write,
        res_stream_V_data_1_V_din => dense_U0_res_stream_V_data_1_V_din,
        res_stream_V_data_1_V_full_n => layer11_out_V_data_1_full_n,
        res_stream_V_data_1_V_write => dense_U0_res_stream_V_data_1_V_write,
        res_stream_V_data_2_V_din => dense_U0_res_stream_V_data_2_V_din,
        res_stream_V_data_2_V_full_n => layer11_out_V_data_2_full_n,
        res_stream_V_data_2_V_write => dense_U0_res_stream_V_data_2_V_write,
        res_stream_V_data_3_V_din => dense_U0_res_stream_V_data_3_V_din,
        res_stream_V_data_3_V_full_n => layer11_out_V_data_3_full_n,
        res_stream_V_data_3_V_write => dense_U0_res_stream_V_data_3_V_write);

    softmax_U0 : component softmax
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => softmax_U0_ap_start,
        ap_done => softmax_U0_ap_done,
        ap_continue => softmax_U0_ap_continue,
        ap_idle => softmax_U0_ap_idle,
        ap_ready => softmax_U0_ap_ready,
        data_V_data_0_V_dout => layer11_out_V_data_0_dout,
        data_V_data_0_V_empty_n => layer11_out_V_data_0_empty_n,
        data_V_data_0_V_read => softmax_U0_data_V_data_0_V_read,
        data_V_data_1_V_dout => layer11_out_V_data_1_dout,
        data_V_data_1_V_empty_n => layer11_out_V_data_1_empty_n,
        data_V_data_1_V_read => softmax_U0_data_V_data_1_V_read,
        data_V_data_2_V_dout => layer11_out_V_data_2_dout,
        data_V_data_2_V_empty_n => layer11_out_V_data_2_empty_n,
        data_V_data_2_V_read => softmax_U0_data_V_data_2_V_read,
        data_V_data_3_V_dout => layer11_out_V_data_3_dout,
        data_V_data_3_V_empty_n => layer11_out_V_data_3_empty_n,
        data_V_data_3_V_read => softmax_U0_data_V_data_3_V_read,
        res_V_data_0_V_din => softmax_U0_res_V_data_0_V_din,
        res_V_data_0_V_full_n => layer12_out_V_data_0_V_full_n,
        res_V_data_0_V_write => softmax_U0_res_V_data_0_V_write,
        res_V_data_1_V_din => softmax_U0_res_V_data_1_V_din,
        res_V_data_1_V_full_n => layer12_out_V_data_1_V_full_n,
        res_V_data_1_V_write => softmax_U0_res_V_data_1_V_write,
        res_V_data_2_V_din => softmax_U0_res_V_data_2_V_din,
        res_V_data_2_V_full_n => layer12_out_V_data_2_V_full_n,
        res_V_data_2_V_write => softmax_U0_res_V_data_2_V_write,
        res_V_data_3_V_din => softmax_U0_res_V_data_3_V_din,
        res_V_data_3_V_full_n => layer12_out_V_data_3_V_full_n,
        res_V_data_3_V_write => softmax_U0_res_V_data_3_V_write);

    layer2_out_V_data_0_U : component fifo_w16_d3844_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_2d_cl_1_U0_res_V_data_0_V_din,
        if_full_n => layer2_out_V_data_0_full_n,
        if_write => conv_2d_cl_1_U0_res_V_data_0_V_write,
        if_dout => layer2_out_V_data_0_dout,
        if_empty_n => layer2_out_V_data_0_empty_n,
        if_read => relu_1_U0_data_V_data_0_V_read);

    layer2_out_V_data_1_U : component fifo_w16_d3844_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_2d_cl_1_U0_res_V_data_1_V_din,
        if_full_n => layer2_out_V_data_1_full_n,
        if_write => conv_2d_cl_1_U0_res_V_data_1_V_write,
        if_dout => layer2_out_V_data_1_dout,
        if_empty_n => layer2_out_V_data_1_empty_n,
        if_read => relu_1_U0_data_V_data_1_V_read);

    layer2_out_V_data_2_U : component fifo_w16_d3844_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_2d_cl_1_U0_res_V_data_2_V_din,
        if_full_n => layer2_out_V_data_2_full_n,
        if_write => conv_2d_cl_1_U0_res_V_data_2_V_write,
        if_dout => layer2_out_V_data_2_dout,
        if_empty_n => layer2_out_V_data_2_empty_n,
        if_read => relu_1_U0_data_V_data_2_V_read);

    layer2_out_V_data_3_U : component fifo_w16_d3844_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_2d_cl_1_U0_res_V_data_3_V_din,
        if_full_n => layer2_out_V_data_3_full_n,
        if_write => conv_2d_cl_1_U0_res_V_data_3_V_write,
        if_dout => layer2_out_V_data_3_dout,
        if_empty_n => layer2_out_V_data_3_empty_n,
        if_read => relu_1_U0_data_V_data_3_V_read);

    layer4_out_V_data_0_U : component fifo_w6_d3844_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_1_U0_res_V_data_0_V_din,
        if_full_n => layer4_out_V_data_0_full_n,
        if_write => relu_1_U0_res_V_data_0_V_write,
        if_dout => layer4_out_V_data_0_dout,
        if_empty_n => layer4_out_V_data_0_empty_n,
        if_read => pooling2d_cl_1_U0_data_V_data_0_V_read);

    layer4_out_V_data_1_U : component fifo_w6_d3844_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_1_U0_res_V_data_1_V_din,
        if_full_n => layer4_out_V_data_1_full_n,
        if_write => relu_1_U0_res_V_data_1_V_write,
        if_dout => layer4_out_V_data_1_dout,
        if_empty_n => layer4_out_V_data_1_empty_n,
        if_read => pooling2d_cl_1_U0_data_V_data_1_V_read);

    layer4_out_V_data_2_U : component fifo_w6_d3844_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_1_U0_res_V_data_2_V_din,
        if_full_n => layer4_out_V_data_2_full_n,
        if_write => relu_1_U0_res_V_data_2_V_write,
        if_dout => layer4_out_V_data_2_dout,
        if_empty_n => layer4_out_V_data_2_empty_n,
        if_read => pooling2d_cl_1_U0_data_V_data_2_V_read);

    layer4_out_V_data_3_U : component fifo_w6_d3844_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_1_U0_res_V_data_3_V_din,
        if_full_n => layer4_out_V_data_3_full_n,
        if_write => relu_1_U0_res_V_data_3_V_write,
        if_dout => layer4_out_V_data_3_dout,
        if_empty_n => layer4_out_V_data_3_empty_n,
        if_read => pooling2d_cl_1_U0_data_V_data_3_V_read);

    layer5_out_V_data_0_U : component fifo_w16_d961_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pooling2d_cl_1_U0_res_V_data_0_V_din,
        if_full_n => layer5_out_V_data_0_full_n,
        if_write => pooling2d_cl_1_U0_res_V_data_0_V_write,
        if_dout => layer5_out_V_data_0_dout,
        if_empty_n => layer5_out_V_data_0_empty_n,
        if_read => conv_2d_cl_U0_data_V_data_0_V_read);

    layer5_out_V_data_1_U : component fifo_w16_d961_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pooling2d_cl_1_U0_res_V_data_1_V_din,
        if_full_n => layer5_out_V_data_1_full_n,
        if_write => pooling2d_cl_1_U0_res_V_data_1_V_write,
        if_dout => layer5_out_V_data_1_dout,
        if_empty_n => layer5_out_V_data_1_empty_n,
        if_read => conv_2d_cl_U0_data_V_data_1_V_read);

    layer5_out_V_data_2_U : component fifo_w16_d961_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pooling2d_cl_1_U0_res_V_data_2_V_din,
        if_full_n => layer5_out_V_data_2_full_n,
        if_write => pooling2d_cl_1_U0_res_V_data_2_V_write,
        if_dout => layer5_out_V_data_2_dout,
        if_empty_n => layer5_out_V_data_2_empty_n,
        if_read => conv_2d_cl_U0_data_V_data_2_V_read);

    layer5_out_V_data_3_U : component fifo_w16_d961_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pooling2d_cl_1_U0_res_V_data_3_V_din,
        if_full_n => layer5_out_V_data_3_full_n,
        if_write => pooling2d_cl_1_U0_res_V_data_3_V_write,
        if_dout => layer5_out_V_data_3_dout,
        if_empty_n => layer5_out_V_data_3_empty_n,
        if_read => conv_2d_cl_U0_data_V_data_3_V_read);

    layer6_out_V_data_0_U : component fifo_w16_d841_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_2d_cl_U0_res_V_data_0_V_din,
        if_full_n => layer6_out_V_data_0_full_n,
        if_write => conv_2d_cl_U0_res_V_data_0_V_write,
        if_dout => layer6_out_V_data_0_dout,
        if_empty_n => layer6_out_V_data_0_empty_n,
        if_read => relu_U0_data_V_data_0_V_read);

    layer6_out_V_data_1_U : component fifo_w16_d841_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_2d_cl_U0_res_V_data_1_V_din,
        if_full_n => layer6_out_V_data_1_full_n,
        if_write => conv_2d_cl_U0_res_V_data_1_V_write,
        if_dout => layer6_out_V_data_1_dout,
        if_empty_n => layer6_out_V_data_1_empty_n,
        if_read => relu_U0_data_V_data_1_V_read);

    layer6_out_V_data_2_U : component fifo_w16_d841_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_2d_cl_U0_res_V_data_2_V_din,
        if_full_n => layer6_out_V_data_2_full_n,
        if_write => conv_2d_cl_U0_res_V_data_2_V_write,
        if_dout => layer6_out_V_data_2_dout,
        if_empty_n => layer6_out_V_data_2_empty_n,
        if_read => relu_U0_data_V_data_2_V_read);

    layer6_out_V_data_3_U : component fifo_w16_d841_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_2d_cl_U0_res_V_data_3_V_din,
        if_full_n => layer6_out_V_data_3_full_n,
        if_write => conv_2d_cl_U0_res_V_data_3_V_write,
        if_dout => layer6_out_V_data_3_dout,
        if_empty_n => layer6_out_V_data_3_empty_n,
        if_read => relu_U0_data_V_data_3_V_read);

    layer8_out_V_data_0_U : component fifo_w6_d841_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_U0_res_V_data_0_V_din,
        if_full_n => layer8_out_V_data_0_full_n,
        if_write => relu_U0_res_V_data_0_V_write,
        if_dout => layer8_out_V_data_0_dout,
        if_empty_n => layer8_out_V_data_0_empty_n,
        if_read => pooling2d_cl_U0_data_V_data_0_V_read);

    layer8_out_V_data_1_U : component fifo_w6_d841_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_U0_res_V_data_1_V_din,
        if_full_n => layer8_out_V_data_1_full_n,
        if_write => relu_U0_res_V_data_1_V_write,
        if_dout => layer8_out_V_data_1_dout,
        if_empty_n => layer8_out_V_data_1_empty_n,
        if_read => pooling2d_cl_U0_data_V_data_1_V_read);

    layer8_out_V_data_2_U : component fifo_w6_d841_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_U0_res_V_data_2_V_din,
        if_full_n => layer8_out_V_data_2_full_n,
        if_write => relu_U0_res_V_data_2_V_write,
        if_dout => layer8_out_V_data_2_dout,
        if_empty_n => layer8_out_V_data_2_empty_n,
        if_read => pooling2d_cl_U0_data_V_data_2_V_read);

    layer8_out_V_data_3_U : component fifo_w6_d841_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_U0_res_V_data_3_V_din,
        if_full_n => layer8_out_V_data_3_full_n,
        if_write => relu_U0_res_V_data_3_V_write,
        if_dout => layer8_out_V_data_3_dout,
        if_empty_n => layer8_out_V_data_3_empty_n,
        if_read => pooling2d_cl_U0_data_V_data_3_V_read);

    layer9_out_V_data_0_U : component fifo_w16_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pooling2d_cl_U0_res_V_data_0_V_din,
        if_full_n => layer9_out_V_data_0_full_n,
        if_write => pooling2d_cl_U0_res_V_data_0_V_write,
        if_dout => layer9_out_V_data_0_dout,
        if_empty_n => layer9_out_V_data_0_empty_n,
        if_read => dense_U0_data_stream_V_data_0_V_read);

    layer9_out_V_data_1_U : component fifo_w16_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pooling2d_cl_U0_res_V_data_1_V_din,
        if_full_n => layer9_out_V_data_1_full_n,
        if_write => pooling2d_cl_U0_res_V_data_1_V_write,
        if_dout => layer9_out_V_data_1_dout,
        if_empty_n => layer9_out_V_data_1_empty_n,
        if_read => dense_U0_data_stream_V_data_1_V_read);

    layer9_out_V_data_2_U : component fifo_w16_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pooling2d_cl_U0_res_V_data_2_V_din,
        if_full_n => layer9_out_V_data_2_full_n,
        if_write => pooling2d_cl_U0_res_V_data_2_V_write,
        if_dout => layer9_out_V_data_2_dout,
        if_empty_n => layer9_out_V_data_2_empty_n,
        if_read => dense_U0_data_stream_V_data_2_V_read);

    layer9_out_V_data_3_U : component fifo_w16_d196_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pooling2d_cl_U0_res_V_data_3_V_din,
        if_full_n => layer9_out_V_data_3_full_n,
        if_write => pooling2d_cl_U0_res_V_data_3_V_write,
        if_dout => layer9_out_V_data_3_dout,
        if_empty_n => layer9_out_V_data_3_empty_n,
        if_read => dense_U0_data_stream_V_data_3_V_read);

    layer11_out_V_data_0_U : component fifo_w16_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dense_U0_res_stream_V_data_0_V_din,
        if_full_n => layer11_out_V_data_0_full_n,
        if_write => dense_U0_res_stream_V_data_0_V_write,
        if_dout => layer11_out_V_data_0_dout,
        if_empty_n => layer11_out_V_data_0_empty_n,
        if_read => softmax_U0_data_V_data_0_V_read);

    layer11_out_V_data_1_U : component fifo_w16_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dense_U0_res_stream_V_data_1_V_din,
        if_full_n => layer11_out_V_data_1_full_n,
        if_write => dense_U0_res_stream_V_data_1_V_write,
        if_dout => layer11_out_V_data_1_dout,
        if_empty_n => layer11_out_V_data_1_empty_n,
        if_read => softmax_U0_data_V_data_1_V_read);

    layer11_out_V_data_2_U : component fifo_w16_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dense_U0_res_stream_V_data_2_V_din,
        if_full_n => layer11_out_V_data_2_full_n,
        if_write => dense_U0_res_stream_V_data_2_V_write,
        if_dout => layer11_out_V_data_2_dout,
        if_empty_n => layer11_out_V_data_2_empty_n,
        if_read => softmax_U0_data_V_data_2_V_read);

    layer11_out_V_data_3_U : component fifo_w16_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dense_U0_res_stream_V_data_3_V_din,
        if_full_n => layer11_out_V_data_3_full_n,
        if_write => dense_U0_res_stream_V_data_3_V_write,
        if_dout => layer11_out_V_data_3_dout,
        if_empty_n => layer11_out_V_data_3_empty_n,
        if_read => softmax_U0_data_V_data_3_V_read);

    start_for_relu_1_U0_U : component start_for_relu_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_1_U0_din,
        if_full_n => start_for_relu_1_U0_full_n,
        if_write => conv_2d_cl_1_U0_start_write,
        if_dout => start_for_relu_1_U0_dout,
        if_empty_n => start_for_relu_1_U0_empty_n,
        if_read => relu_1_U0_ap_ready);

    start_for_poolingGfk_U : component start_for_poolingGfk
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pooling2d_cl_1_U0_din,
        if_full_n => start_for_pooling2d_cl_1_U0_full_n,
        if_write => relu_1_U0_start_write,
        if_dout => start_for_pooling2d_cl_1_U0_dout,
        if_empty_n => start_for_pooling2d_cl_1_U0_empty_n,
        if_read => pooling2d_cl_1_U0_ap_ready);

    start_for_conv_2dHfu_U : component start_for_conv_2dHfu
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv_2d_cl_U0_din,
        if_full_n => start_for_conv_2d_cl_U0_full_n,
        if_write => pooling2d_cl_1_U0_start_write,
        if_dout => start_for_conv_2d_cl_U0_dout,
        if_empty_n => start_for_conv_2d_cl_U0_empty_n,
        if_read => conv_2d_cl_U0_ap_ready);

    start_for_relu_U0_U : component start_for_relu_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_U0_din,
        if_full_n => start_for_relu_U0_full_n,
        if_write => conv_2d_cl_U0_start_write,
        if_dout => start_for_relu_U0_dout,
        if_empty_n => start_for_relu_U0_empty_n,
        if_read => relu_U0_ap_ready);

    start_for_poolingIfE_U : component start_for_poolingIfE
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pooling2d_cl_U0_din,
        if_full_n => start_for_pooling2d_cl_U0_full_n,
        if_write => relu_U0_start_write,
        if_dout => start_for_pooling2d_cl_U0_dout,
        if_empty_n => start_for_pooling2d_cl_U0_empty_n,
        if_read => pooling2d_cl_U0_ap_ready);

    start_for_dense_U0_U : component start_for_dense_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_dense_U0_din,
        if_full_n => start_for_dense_U0_full_n,
        if_write => pooling2d_cl_U0_start_write,
        if_dout => start_for_dense_U0_dout,
        if_empty_n => start_for_dense_U0_empty_n,
        if_read => dense_U0_ap_ready);

    start_for_softmaxJfO_U : component start_for_softmaxJfO
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_softmax_U0_din,
        if_full_n => start_for_softmax_U0_full_n,
        if_write => dense_U0_start_write,
        if_dout => start_for_softmax_U0_dout,
        if_empty_n => start_for_softmax_U0_empty_n,
        if_read => softmax_U0_ap_ready);





    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= softmax_U0_ap_done;
    ap_idle <= (softmax_U0_ap_idle and relu_U0_ap_idle and relu_1_U0_ap_idle and pooling2d_cl_U0_ap_idle and pooling2d_cl_1_U0_ap_idle and dense_U0_ap_idle and conv_2d_cl_U0_ap_idle and conv_2d_cl_1_U0_ap_idle);
    ap_ready <= internal_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= softmax_U0_ap_done;
    ap_sync_ready <= conv_2d_cl_1_U0_ap_ready;
    conv1_input_V_data_0_V_read <= conv_2d_cl_1_U0_data_V_data_0_V_read;
    conv1_input_V_data_1_V_read <= conv_2d_cl_1_U0_data_V_data_1_V_read;
    conv1_input_V_data_2_V_read <= conv_2d_cl_1_U0_data_V_data_2_V_read;
    conv_2d_cl_1_U0_ap_continue <= ap_const_logic_1;
    conv_2d_cl_1_U0_ap_start <= real_start;
    conv_2d_cl_U0_ap_continue <= ap_const_logic_1;
    conv_2d_cl_U0_ap_start <= start_for_conv_2d_cl_U0_empty_n;
    dense_U0_ap_continue <= ap_const_logic_1;
    dense_U0_ap_start <= start_for_dense_U0_empty_n;
    internal_ap_ready <= ap_sync_ready;
    layer12_out_V_data_0_V_din <= softmax_U0_res_V_data_0_V_din;
    layer12_out_V_data_0_V_write <= softmax_U0_res_V_data_0_V_write;
    layer12_out_V_data_1_V_din <= softmax_U0_res_V_data_1_V_din;
    layer12_out_V_data_1_V_write <= softmax_U0_res_V_data_1_V_write;
    layer12_out_V_data_2_V_din <= softmax_U0_res_V_data_2_V_din;
    layer12_out_V_data_2_V_write <= softmax_U0_res_V_data_2_V_write;
    layer12_out_V_data_3_V_din <= softmax_U0_res_V_data_3_V_din;
    layer12_out_V_data_3_V_write <= softmax_U0_res_V_data_3_V_write;
    pooling2d_cl_1_U0_ap_continue <= ap_const_logic_1;
    pooling2d_cl_1_U0_ap_start <= start_for_pooling2d_cl_1_U0_empty_n;
    pooling2d_cl_U0_ap_continue <= ap_const_logic_1;
    pooling2d_cl_U0_ap_start <= start_for_pooling2d_cl_U0_empty_n;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    relu_1_U0_ap_continue <= ap_const_logic_1;
    relu_1_U0_ap_start <= start_for_relu_1_U0_empty_n;
    relu_U0_ap_continue <= ap_const_logic_1;
    relu_U0_ap_start <= start_for_relu_U0_empty_n;
    softmax_U0_ap_continue <= ap_continue;
    softmax_U0_ap_start <= start_for_softmax_U0_empty_n;
    softmax_U0_start_full_n <= ap_const_logic_1;
    softmax_U0_start_write <= ap_const_logic_0;
    start_for_conv_2d_cl_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_dense_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pooling2d_cl_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pooling2d_cl_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_softmax_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
