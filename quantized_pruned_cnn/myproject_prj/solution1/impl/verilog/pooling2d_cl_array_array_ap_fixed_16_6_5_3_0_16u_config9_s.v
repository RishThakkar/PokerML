// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [5:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [5:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [5:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [5:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [5:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [5:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [5:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [5:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [5:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [5:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [5:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [5:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [5:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [5:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [5:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [5:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [15:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [15:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [15:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [15:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [15:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [15:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_1;
reg   [31:0] sX_1;
reg   [31:0] pY_1;
reg   [31:0] sY_1;
reg   [5:0] kernel_data_V_4_16;
reg   [5:0] kernel_data_V_4_17;
reg   [5:0] kernel_data_V_4_18;
reg   [5:0] kernel_data_V_4_19;
reg   [5:0] kernel_data_V_4_20;
reg   [5:0] kernel_data_V_4_21;
reg   [5:0] kernel_data_V_4_22;
reg   [5:0] kernel_data_V_4_23;
reg   [5:0] kernel_data_V_4_24;
reg   [5:0] kernel_data_V_4_25;
reg   [5:0] kernel_data_V_4_26;
reg   [5:0] kernel_data_V_4_27;
reg   [5:0] kernel_data_V_4_28;
reg   [5:0] kernel_data_V_4_29;
reg   [5:0] kernel_data_V_4_30;
reg   [5:0] kernel_data_V_4_31;
reg   [5:0] kernel_data_V_4_48;
reg   [5:0] kernel_data_V_4_49;
reg   [5:0] kernel_data_V_4_50;
reg   [5:0] kernel_data_V_4_51;
reg   [5:0] kernel_data_V_4_52;
reg   [5:0] kernel_data_V_4_53;
reg   [5:0] kernel_data_V_4_54;
reg   [5:0] kernel_data_V_4_55;
reg   [5:0] kernel_data_V_4_56;
reg   [5:0] kernel_data_V_4_57;
reg   [5:0] kernel_data_V_4_58;
reg   [5:0] kernel_data_V_4_59;
reg   [5:0] kernel_data_V_4_60;
reg   [5:0] kernel_data_V_4_61;
reg   [5:0] kernel_data_V_4_62;
reg   [5:0] kernel_data_V_4_63;
reg    line_buffer_Array_V_4_0_0_ce0;
reg    line_buffer_Array_V_4_0_0_we0;
wire   [5:0] line_buffer_Array_V_4_0_0_q0;
reg    line_buffer_Array_V_4_0_1_ce0;
reg    line_buffer_Array_V_4_0_1_we0;
wire   [5:0] line_buffer_Array_V_4_0_1_q0;
reg    line_buffer_Array_V_4_0_2_ce0;
reg    line_buffer_Array_V_4_0_2_we0;
wire   [5:0] line_buffer_Array_V_4_0_2_q0;
reg    line_buffer_Array_V_4_0_3_ce0;
reg    line_buffer_Array_V_4_0_3_we0;
wire   [5:0] line_buffer_Array_V_4_0_3_q0;
reg    line_buffer_Array_V_4_0_4_ce0;
reg    line_buffer_Array_V_4_0_4_we0;
wire   [5:0] line_buffer_Array_V_4_0_4_q0;
reg    line_buffer_Array_V_4_0_5_ce0;
reg    line_buffer_Array_V_4_0_5_we0;
wire   [5:0] line_buffer_Array_V_4_0_5_q0;
reg    line_buffer_Array_V_4_0_6_ce0;
reg    line_buffer_Array_V_4_0_6_we0;
wire   [5:0] line_buffer_Array_V_4_0_6_q0;
reg    line_buffer_Array_V_4_0_7_ce0;
reg    line_buffer_Array_V_4_0_7_we0;
wire   [5:0] line_buffer_Array_V_4_0_7_q0;
reg    line_buffer_Array_V_4_0_8_ce0;
reg    line_buffer_Array_V_4_0_8_we0;
wire   [5:0] line_buffer_Array_V_4_0_8_q0;
reg    line_buffer_Array_V_4_0_9_ce0;
reg    line_buffer_Array_V_4_0_9_we0;
wire   [5:0] line_buffer_Array_V_4_0_9_q0;
reg    line_buffer_Array_V_4_0_10_ce0;
reg    line_buffer_Array_V_4_0_10_we0;
wire   [5:0] line_buffer_Array_V_4_0_10_q0;
reg    line_buffer_Array_V_4_0_11_ce0;
reg    line_buffer_Array_V_4_0_11_we0;
wire   [5:0] line_buffer_Array_V_4_0_11_q0;
reg    line_buffer_Array_V_4_0_12_ce0;
reg    line_buffer_Array_V_4_0_12_we0;
wire   [5:0] line_buffer_Array_V_4_0_12_q0;
reg    line_buffer_Array_V_4_0_13_ce0;
reg    line_buffer_Array_V_4_0_13_we0;
wire   [5:0] line_buffer_Array_V_4_0_13_q0;
reg    line_buffer_Array_V_4_0_14_ce0;
reg    line_buffer_Array_V_4_0_14_we0;
wire   [5:0] line_buffer_Array_V_4_0_14_q0;
reg    line_buffer_Array_V_4_0_15_ce0;
reg    line_buffer_Array_V_4_0_15_we0;
wire   [5:0] line_buffer_Array_V_4_0_15_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln241_reg_3268;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] and_ln191_4_reg_3277;
reg   [0:0] and_ln191_4_reg_3277_pp0_iter1_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg   [7:0] indvar_flatten_reg_730;
wire   [0:0] icmp_ln241_fu_752_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op77;
reg    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op453;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln241_reg_3268_pp0_iter1_reg;
wire   [7:0] add_ln241_fu_758_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln191_4_fu_816_p2;
wire   [0:0] icmp_ln212_fu_822_p2;
reg   [0:0] icmp_ln212_reg_3281;
wire   [0:0] icmp_ln216_fu_872_p2;
wire   [31:0] select_ln222_fu_896_p3;
reg   [5:0] shift_buffer_1_0_V_reg_3294;
reg   [5:0] shift_buffer_1_1_V_reg_3300;
reg   [5:0] shift_buffer_1_2_V_reg_3306;
reg   [5:0] shift_buffer_1_3_V_reg_3312;
reg   [5:0] shift_buffer_1_4_V_reg_3318;
reg   [5:0] shift_buffer_1_5_V_reg_3324;
reg   [5:0] shift_buffer_1_6_V_reg_3330;
reg   [5:0] shift_buffer_1_7_V_reg_3336;
reg   [5:0] shift_buffer_1_8_V_reg_3342;
reg   [5:0] shift_buffer_1_9_V_reg_3348;
reg   [5:0] shift_buffer_1_10_V_reg_3354;
reg   [5:0] shift_buffer_1_11_V_reg_3360;
reg   [5:0] shift_buffer_1_12_V_reg_3366;
reg   [5:0] shift_buffer_1_13_V_reg_3372;
reg   [5:0] shift_buffer_1_14_V_reg_3378;
reg   [5:0] shift_buffer_1_15_V_reg_3384;
reg   [5:0] DataOut_V_218_reg_3390;
reg   [5:0] DataOut_V_219_reg_3396;
reg   [5:0] DataOut_V_220_reg_3402;
reg   [5:0] DataOut_V_221_reg_3408;
reg   [5:0] DataOut_V_222_reg_3414;
reg   [5:0] DataOut_V_223_reg_3420;
reg   [5:0] DataOut_V_224_reg_3426;
reg   [5:0] DataOut_V_225_reg_3432;
reg   [5:0] DataOut_V_226_reg_3438;
reg   [5:0] DataOut_V_227_reg_3444;
reg   [5:0] DataOut_V_228_reg_3450;
reg   [5:0] DataOut_V_229_reg_3456;
reg   [5:0] DataOut_V_230_reg_3462;
reg   [5:0] DataOut_V_231_reg_3468;
reg   [5:0] DataOut_V_232_reg_3474;
reg   [5:0] DataOut_V_reg_3480;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_741;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_741;
wire   [31:0] add_ln225_fu_828_p2;
wire   [31:0] select_ln227_fu_846_p3;
wire   [31:0] add_ln220_fu_878_p2;
reg   [31:0] ap_sig_allocacmp_sY_1_load;
wire   [15:0] tmp_data_0_V_fu_1528_p6;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_data_1_V_fu_1643_p6;
wire   [15:0] tmp_data_2_V_fu_1758_p6;
wire   [15:0] tmp_data_3_V_fu_1873_p6;
wire   [15:0] tmp_data_4_V_fu_1988_p6;
wire   [15:0] tmp_data_5_V_fu_2103_p6;
wire   [15:0] tmp_data_6_V_fu_2218_p6;
wire   [15:0] tmp_data_7_V_fu_2333_p6;
wire   [15:0] tmp_data_8_V_fu_2448_p6;
wire   [15:0] tmp_data_9_V_fu_2563_p6;
wire   [15:0] tmp_data_10_V_fu_2678_p6;
wire   [15:0] tmp_data_11_V_fu_2793_p6;
wire   [15:0] tmp_data_12_V_fu_2908_p6;
wire   [15:0] tmp_data_13_V_fu_3023_p6;
wire   [15:0] tmp_data_14_V_fu_3138_p6;
wire   [15:0] tmp_data_15_V_fu_3253_p6;
wire   [0:0] icmp_ln191_fu_768_p2;
wire   [0:0] icmp_ln191_4_fu_778_p2;
wire   [0:0] icmp_ln191_5_fu_788_p2;
wire   [0:0] icmp_ln191_6_fu_798_p2;
wire   [0:0] and_ln191_3_fu_810_p2;
wire   [0:0] and_ln191_fu_804_p2;
wire   [31:0] add_ln227_fu_840_p2;
wire   [31:0] add_ln222_fu_890_p2;
wire   [9:0] pool_window_0_V_fu_1428_p3;
wire   [9:0] pool_window_1_V_fu_1440_p3;
wire   [9:0] pool_window_2_V_fu_1451_p3;
wire   [9:0] pool_window_3_V_fu_1463_p3;
wire   [0:0] icmp_ln1496_fu_1474_p2;
wire   [0:0] icmp_ln1496_72_fu_1488_p2;
wire   [9:0] select_ln65_fu_1480_p3;
wire   [9:0] select_ln65_97_fu_1502_p3;
wire   [0:0] icmp_ln1496_73_fu_1510_p2;
wire   [1:0] select_ln65_106_fu_1494_p3;
wire   [1:0] zext_ln65_fu_1516_p1;
wire   [15:0] tmp_data_0_V_fu_1528_p1;
wire   [15:0] tmp_data_0_V_fu_1528_p2;
wire   [15:0] tmp_data_0_V_fu_1528_p3;
wire   [15:0] tmp_data_0_V_fu_1528_p4;
wire   [1:0] tmp_data_0_V_fu_1528_p5;
wire   [9:0] pool_window_0_V_49_fu_1543_p3;
wire   [9:0] pool_window_1_V_49_fu_1555_p3;
wire   [9:0] pool_window_2_V_49_fu_1566_p3;
wire   [9:0] pool_window_3_V_49_fu_1578_p3;
wire   [0:0] icmp_ln1496_1_fu_1589_p2;
wire   [0:0] icmp_ln1496_74_fu_1603_p2;
wire   [9:0] select_ln65_99_fu_1595_p3;
wire   [9:0] select_ln65_101_fu_1617_p3;
wire   [0:0] icmp_ln1496_75_fu_1625_p2;
wire   [1:0] select_ln65_112_fu_1609_p3;
wire   [1:0] zext_ln65_24_fu_1631_p1;
wire   [15:0] tmp_data_1_V_fu_1643_p1;
wire   [15:0] tmp_data_1_V_fu_1643_p2;
wire   [15:0] tmp_data_1_V_fu_1643_p3;
wire   [15:0] tmp_data_1_V_fu_1643_p4;
wire   [1:0] tmp_data_1_V_fu_1643_p5;
wire   [9:0] pool_window_0_V_51_fu_1658_p3;
wire   [9:0] pool_window_1_V_51_fu_1670_p3;
wire   [9:0] pool_window_2_V_51_fu_1681_p3;
wire   [9:0] pool_window_3_V_51_fu_1693_p3;
wire   [0:0] icmp_ln1496_2_fu_1704_p2;
wire   [0:0] icmp_ln1496_76_fu_1718_p2;
wire   [9:0] select_ln65_102_fu_1710_p3;
wire   [9:0] select_ln65_104_fu_1732_p3;
wire   [0:0] icmp_ln1496_77_fu_1740_p2;
wire   [1:0] select_ln65_118_fu_1724_p3;
wire   [1:0] zext_ln65_25_fu_1746_p1;
wire   [15:0] tmp_data_2_V_fu_1758_p1;
wire   [15:0] tmp_data_2_V_fu_1758_p2;
wire   [15:0] tmp_data_2_V_fu_1758_p3;
wire   [15:0] tmp_data_2_V_fu_1758_p4;
wire   [1:0] tmp_data_2_V_fu_1758_p5;
wire   [9:0] pool_window_0_V_53_fu_1773_p3;
wire   [9:0] pool_window_1_V_53_fu_1785_p3;
wire   [9:0] pool_window_2_V_53_fu_1796_p3;
wire   [9:0] pool_window_3_V_53_fu_1808_p3;
wire   [0:0] icmp_ln1496_78_fu_1819_p2;
wire   [0:0] icmp_ln1496_79_fu_1833_p2;
wire   [9:0] select_ln65_105_fu_1825_p3;
wire   [9:0] select_ln65_107_fu_1847_p3;
wire   [0:0] icmp_ln1496_80_fu_1855_p2;
wire   [1:0] select_ln65_124_fu_1839_p3;
wire   [1:0] zext_ln65_26_fu_1861_p1;
wire   [15:0] tmp_data_3_V_fu_1873_p1;
wire   [15:0] tmp_data_3_V_fu_1873_p2;
wire   [15:0] tmp_data_3_V_fu_1873_p3;
wire   [15:0] tmp_data_3_V_fu_1873_p4;
wire   [1:0] tmp_data_3_V_fu_1873_p5;
wire   [9:0] pool_window_0_V_55_fu_1888_p3;
wire   [9:0] pool_window_1_V_55_fu_1900_p3;
wire   [9:0] pool_window_2_V_55_fu_1911_p3;
wire   [9:0] pool_window_3_V_55_fu_1923_p3;
wire   [0:0] icmp_ln1496_81_fu_1934_p2;
wire   [0:0] icmp_ln1496_82_fu_1948_p2;
wire   [9:0] select_ln65_108_fu_1940_p3;
wire   [9:0] select_ln65_110_fu_1962_p3;
wire   [0:0] icmp_ln1496_83_fu_1970_p2;
wire   [1:0] select_ln65_130_fu_1954_p3;
wire   [1:0] zext_ln65_27_fu_1976_p1;
wire   [15:0] tmp_data_4_V_fu_1988_p1;
wire   [15:0] tmp_data_4_V_fu_1988_p2;
wire   [15:0] tmp_data_4_V_fu_1988_p3;
wire   [15:0] tmp_data_4_V_fu_1988_p4;
wire   [1:0] tmp_data_4_V_fu_1988_p5;
wire   [9:0] pool_window_0_V_57_fu_2003_p3;
wire   [9:0] pool_window_1_V_57_fu_2015_p3;
wire   [9:0] pool_window_2_V_57_fu_2026_p3;
wire   [9:0] pool_window_3_V_57_fu_2038_p3;
wire   [0:0] icmp_ln1496_5_fu_2049_p2;
wire   [0:0] icmp_ln1496_84_fu_2063_p2;
wire   [9:0] select_ln65_111_fu_2055_p3;
wire   [9:0] select_ln65_113_fu_2077_p3;
wire   [0:0] icmp_ln1496_85_fu_2085_p2;
wire   [1:0] select_ln65_136_fu_2069_p3;
wire   [1:0] zext_ln65_28_fu_2091_p1;
wire   [15:0] tmp_data_5_V_fu_2103_p1;
wire   [15:0] tmp_data_5_V_fu_2103_p2;
wire   [15:0] tmp_data_5_V_fu_2103_p3;
wire   [15:0] tmp_data_5_V_fu_2103_p4;
wire   [1:0] tmp_data_5_V_fu_2103_p5;
wire   [9:0] pool_window_0_V_59_fu_2118_p3;
wire   [9:0] pool_window_1_V_59_fu_2130_p3;
wire   [9:0] pool_window_2_V_59_fu_2141_p3;
wire   [9:0] pool_window_3_V_59_fu_2153_p3;
wire   [0:0] icmp_ln1496_6_fu_2164_p2;
wire   [0:0] icmp_ln1496_86_fu_2178_p2;
wire   [9:0] select_ln65_114_fu_2170_p3;
wire   [9:0] select_ln65_116_fu_2192_p3;
wire   [0:0] icmp_ln1496_87_fu_2200_p2;
wire   [1:0] select_ln65_142_fu_2184_p3;
wire   [1:0] zext_ln65_29_fu_2206_p1;
wire   [15:0] tmp_data_6_V_fu_2218_p1;
wire   [15:0] tmp_data_6_V_fu_2218_p2;
wire   [15:0] tmp_data_6_V_fu_2218_p3;
wire   [15:0] tmp_data_6_V_fu_2218_p4;
wire   [1:0] tmp_data_6_V_fu_2218_p5;
wire   [9:0] pool_window_0_V_61_fu_2233_p3;
wire   [9:0] pool_window_1_V_61_fu_2245_p3;
wire   [9:0] pool_window_2_V_61_fu_2256_p3;
wire   [9:0] pool_window_3_V_61_fu_2268_p3;
wire   [0:0] icmp_ln1496_7_fu_2279_p2;
wire   [0:0] icmp_ln1496_88_fu_2293_p2;
wire   [9:0] select_ln65_117_fu_2285_p3;
wire   [9:0] select_ln65_119_fu_2307_p3;
wire   [0:0] icmp_ln1496_89_fu_2315_p2;
wire   [1:0] select_ln65_145_fu_2299_p3;
wire   [1:0] zext_ln65_30_fu_2321_p1;
wire   [15:0] tmp_data_7_V_fu_2333_p1;
wire   [15:0] tmp_data_7_V_fu_2333_p2;
wire   [15:0] tmp_data_7_V_fu_2333_p3;
wire   [15:0] tmp_data_7_V_fu_2333_p4;
wire   [1:0] tmp_data_7_V_fu_2333_p5;
wire   [9:0] pool_window_0_V_63_fu_2348_p3;
wire   [9:0] pool_window_1_V_63_fu_2360_p3;
wire   [9:0] pool_window_2_V_63_fu_2371_p3;
wire   [9:0] pool_window_3_V_63_fu_2383_p3;
wire   [0:0] icmp_ln1496_8_fu_2394_p2;
wire   [0:0] icmp_ln1496_90_fu_2408_p2;
wire   [9:0] select_ln65_120_fu_2400_p3;
wire   [9:0] select_ln65_122_fu_2422_p3;
wire   [0:0] icmp_ln1496_91_fu_2430_p2;
wire   [1:0] select_ln65_147_fu_2414_p3;
wire   [1:0] zext_ln65_31_fu_2436_p1;
wire   [15:0] tmp_data_8_V_fu_2448_p1;
wire   [15:0] tmp_data_8_V_fu_2448_p2;
wire   [15:0] tmp_data_8_V_fu_2448_p3;
wire   [15:0] tmp_data_8_V_fu_2448_p4;
wire   [1:0] tmp_data_8_V_fu_2448_p5;
wire   [9:0] pool_window_0_V_65_fu_2463_p3;
wire   [9:0] pool_window_1_V_65_fu_2475_p3;
wire   [9:0] pool_window_2_V_65_fu_2486_p3;
wire   [9:0] pool_window_3_V_65_fu_2498_p3;
wire   [0:0] icmp_ln1496_9_fu_2509_p2;
wire   [0:0] icmp_ln1496_92_fu_2523_p2;
wire   [9:0] select_ln65_123_fu_2515_p3;
wire   [9:0] select_ln65_125_fu_2537_p3;
wire   [0:0] icmp_ln1496_93_fu_2545_p2;
wire   [1:0] select_ln65_149_fu_2529_p3;
wire   [1:0] zext_ln65_32_fu_2551_p1;
wire   [15:0] tmp_data_9_V_fu_2563_p1;
wire   [15:0] tmp_data_9_V_fu_2563_p2;
wire   [15:0] tmp_data_9_V_fu_2563_p3;
wire   [15:0] tmp_data_9_V_fu_2563_p4;
wire   [1:0] tmp_data_9_V_fu_2563_p5;
wire   [9:0] pool_window_0_V_67_fu_2578_p3;
wire   [9:0] pool_window_1_V_67_fu_2590_p3;
wire   [9:0] pool_window_2_V_67_fu_2601_p3;
wire   [9:0] pool_window_3_V_67_fu_2613_p3;
wire   [0:0] icmp_ln1496_10_fu_2624_p2;
wire   [0:0] icmp_ln1496_94_fu_2638_p2;
wire   [9:0] select_ln65_126_fu_2630_p3;
wire   [9:0] select_ln65_128_fu_2652_p3;
wire   [0:0] icmp_ln1496_95_fu_2660_p2;
wire   [1:0] select_ln65_151_fu_2644_p3;
wire   [1:0] zext_ln65_33_fu_2666_p1;
wire   [15:0] tmp_data_10_V_fu_2678_p1;
wire   [15:0] tmp_data_10_V_fu_2678_p2;
wire   [15:0] tmp_data_10_V_fu_2678_p3;
wire   [15:0] tmp_data_10_V_fu_2678_p4;
wire   [1:0] tmp_data_10_V_fu_2678_p5;
wire   [9:0] pool_window_0_V_69_fu_2693_p3;
wire   [9:0] pool_window_1_V_69_fu_2705_p3;
wire   [9:0] pool_window_2_V_69_fu_2716_p3;
wire   [9:0] pool_window_3_V_69_fu_2728_p3;
wire   [0:0] icmp_ln1496_11_fu_2739_p2;
wire   [0:0] icmp_ln1496_96_fu_2753_p2;
wire   [9:0] select_ln65_129_fu_2745_p3;
wire   [9:0] select_ln65_131_fu_2767_p3;
wire   [0:0] icmp_ln1496_97_fu_2775_p2;
wire   [1:0] select_ln65_153_fu_2759_p3;
wire   [1:0] zext_ln65_34_fu_2781_p1;
wire   [15:0] tmp_data_11_V_fu_2793_p1;
wire   [15:0] tmp_data_11_V_fu_2793_p2;
wire   [15:0] tmp_data_11_V_fu_2793_p3;
wire   [15:0] tmp_data_11_V_fu_2793_p4;
wire   [1:0] tmp_data_11_V_fu_2793_p5;
wire   [9:0] pool_window_0_V_71_fu_2808_p3;
wire   [9:0] pool_window_1_V_71_fu_2820_p3;
wire   [9:0] pool_window_2_V_71_fu_2831_p3;
wire   [9:0] pool_window_3_V_71_fu_2843_p3;
wire   [0:0] icmp_ln1496_12_fu_2854_p2;
wire   [0:0] icmp_ln1496_98_fu_2868_p2;
wire   [9:0] select_ln65_132_fu_2860_p3;
wire   [9:0] select_ln65_134_fu_2882_p3;
wire   [0:0] icmp_ln1496_99_fu_2890_p2;
wire   [1:0] select_ln65_155_fu_2874_p3;
wire   [1:0] zext_ln65_35_fu_2896_p1;
wire   [15:0] tmp_data_12_V_fu_2908_p1;
wire   [15:0] tmp_data_12_V_fu_2908_p2;
wire   [15:0] tmp_data_12_V_fu_2908_p3;
wire   [15:0] tmp_data_12_V_fu_2908_p4;
wire   [1:0] tmp_data_12_V_fu_2908_p5;
wire   [9:0] pool_window_0_V_73_fu_2923_p3;
wire   [9:0] pool_window_1_V_73_fu_2935_p3;
wire   [9:0] pool_window_2_V_73_fu_2946_p3;
wire   [9:0] pool_window_3_V_73_fu_2958_p3;
wire   [0:0] icmp_ln1496_13_fu_2969_p2;
wire   [0:0] icmp_ln1496_100_fu_2983_p2;
wire   [9:0] select_ln65_135_fu_2975_p3;
wire   [9:0] select_ln65_137_fu_2997_p3;
wire   [0:0] icmp_ln1496_101_fu_3005_p2;
wire   [1:0] select_ln65_157_fu_2989_p3;
wire   [1:0] zext_ln65_36_fu_3011_p1;
wire   [15:0] tmp_data_13_V_fu_3023_p1;
wire   [15:0] tmp_data_13_V_fu_3023_p2;
wire   [15:0] tmp_data_13_V_fu_3023_p3;
wire   [15:0] tmp_data_13_V_fu_3023_p4;
wire   [1:0] tmp_data_13_V_fu_3023_p5;
wire   [9:0] pool_window_0_V_75_fu_3038_p3;
wire   [9:0] pool_window_1_V_75_fu_3050_p3;
wire   [9:0] pool_window_2_V_75_fu_3061_p3;
wire   [9:0] pool_window_3_V_75_fu_3073_p3;
wire   [0:0] icmp_ln1496_14_fu_3084_p2;
wire   [0:0] icmp_ln1496_102_fu_3098_p2;
wire   [9:0] select_ln65_138_fu_3090_p3;
wire   [9:0] select_ln65_140_fu_3112_p3;
wire   [0:0] icmp_ln1496_103_fu_3120_p2;
wire   [1:0] select_ln65_159_fu_3104_p3;
wire   [1:0] zext_ln65_37_fu_3126_p1;
wire   [15:0] tmp_data_14_V_fu_3138_p1;
wire   [15:0] tmp_data_14_V_fu_3138_p2;
wire   [15:0] tmp_data_14_V_fu_3138_p3;
wire   [15:0] tmp_data_14_V_fu_3138_p4;
wire   [1:0] tmp_data_14_V_fu_3138_p5;
wire   [9:0] pool_window_0_V_77_fu_3153_p3;
wire   [9:0] pool_window_1_V_77_fu_3165_p3;
wire   [9:0] pool_window_2_V_77_fu_3176_p3;
wire   [9:0] pool_window_3_V_77_fu_3188_p3;
wire   [0:0] icmp_ln1496_15_fu_3199_p2;
wire   [0:0] icmp_ln1496_104_fu_3213_p2;
wire   [9:0] select_ln65_141_fu_3205_p3;
wire   [9:0] select_ln65_143_fu_3227_p3;
wire   [0:0] icmp_ln1496_105_fu_3235_p2;
wire   [1:0] select_ln65_161_fu_3219_p3;
wire   [1:0] zext_ln65_38_fu_3241_p1;
wire   [15:0] tmp_data_15_V_fu_3253_p1;
wire   [15:0] tmp_data_15_V_fu_3253_p2;
wire   [15:0] tmp_data_15_V_fu_3253_p3;
wire   [15:0] tmp_data_15_V_fu_3253_p4;
wire   [1:0] tmp_data_15_V_fu_3253_p5;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_439;
reg    ap_condition_530;
reg    ap_condition_420;
reg    ap_condition_523;
reg    ap_condition_536;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 pX_1 = 32'd0;
#0 sX_1 = 32'd0;
#0 pY_1 = 32'd0;
#0 sY_1 = 32'd0;
#0 kernel_data_V_4_16 = 6'd0;
#0 kernel_data_V_4_17 = 6'd0;
#0 kernel_data_V_4_18 = 6'd0;
#0 kernel_data_V_4_19 = 6'd0;
#0 kernel_data_V_4_20 = 6'd0;
#0 kernel_data_V_4_21 = 6'd0;
#0 kernel_data_V_4_22 = 6'd0;
#0 kernel_data_V_4_23 = 6'd0;
#0 kernel_data_V_4_24 = 6'd0;
#0 kernel_data_V_4_25 = 6'd0;
#0 kernel_data_V_4_26 = 6'd0;
#0 kernel_data_V_4_27 = 6'd0;
#0 kernel_data_V_4_28 = 6'd0;
#0 kernel_data_V_4_29 = 6'd0;
#0 kernel_data_V_4_30 = 6'd0;
#0 kernel_data_V_4_31 = 6'd0;
#0 kernel_data_V_4_48 = 6'd0;
#0 kernel_data_V_4_49 = 6'd0;
#0 kernel_data_V_4_50 = 6'd0;
#0 kernel_data_V_4_51 = 6'd0;
#0 kernel_data_V_4_52 = 6'd0;
#0 kernel_data_V_4_53 = 6'd0;
#0 kernel_data_V_4_54 = 6'd0;
#0 kernel_data_V_4_55 = 6'd0;
#0 kernel_data_V_4_56 = 6'd0;
#0 kernel_data_V_4_57 = 6'd0;
#0 kernel_data_V_4_58 = 6'd0;
#0 kernel_data_V_4_59 = 6'd0;
#0 kernel_data_V_4_60 = 6'd0;
#0 kernel_data_V_4_61 = 6'd0;
#0 kernel_data_V_4_62 = 6'd0;
#0 kernel_data_V_4_63 = 6'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_0_ce0),
    .we0(line_buffer_Array_V_4_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_4_0_0_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_1_ce0),
    .we0(line_buffer_Array_V_4_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_4_0_1_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_2_ce0),
    .we0(line_buffer_Array_V_4_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_4_0_2_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_3_ce0),
    .we0(line_buffer_Array_V_4_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_4_0_3_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_4_ce0),
    .we0(line_buffer_Array_V_4_0_4_we0),
    .d0(data_V_data_4_V_dout),
    .q0(line_buffer_Array_V_4_0_4_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_5_ce0),
    .we0(line_buffer_Array_V_4_0_5_we0),
    .d0(data_V_data_5_V_dout),
    .q0(line_buffer_Array_V_4_0_5_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_6_ce0),
    .we0(line_buffer_Array_V_4_0_6_we0),
    .d0(data_V_data_6_V_dout),
    .q0(line_buffer_Array_V_4_0_6_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_7_ce0),
    .we0(line_buffer_Array_V_4_0_7_we0),
    .d0(data_V_data_7_V_dout),
    .q0(line_buffer_Array_V_4_0_7_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_8_ce0),
    .we0(line_buffer_Array_V_4_0_8_we0),
    .d0(data_V_data_8_V_dout),
    .q0(line_buffer_Array_V_4_0_8_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_9_ce0),
    .we0(line_buffer_Array_V_4_0_9_we0),
    .d0(data_V_data_9_V_dout),
    .q0(line_buffer_Array_V_4_0_9_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_10_ce0),
    .we0(line_buffer_Array_V_4_0_10_we0),
    .d0(data_V_data_10_V_dout),
    .q0(line_buffer_Array_V_4_0_10_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_11_ce0),
    .we0(line_buffer_Array_V_4_0_11_we0),
    .d0(data_V_data_11_V_dout),
    .q0(line_buffer_Array_V_4_0_11_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_12_ce0),
    .we0(line_buffer_Array_V_4_0_12_we0),
    .d0(data_V_data_12_V_dout),
    .q0(line_buffer_Array_V_4_0_12_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_13_ce0),
    .we0(line_buffer_Array_V_4_0_13_we0),
    .d0(data_V_data_13_V_dout),
    .q0(line_buffer_Array_V_4_0_13_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_14_ce0),
    .we0(line_buffer_Array_V_4_0_14_we0),
    .d0(data_V_data_14_V_dout),
    .q0(line_buffer_Array_V_4_0_14_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s_line_buffer_Array_3i2 #(
    .DataWidth( 6 ),
    .AddressRange( 13 ),
    .AddressWidth( 4 ))
line_buffer_Array_V_4_0_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(4'd12),
    .ce0(line_buffer_Array_V_4_0_15_ce0),
    .we0(line_buffer_Array_V_4_0_15_we0),
    .d0(data_V_data_15_V_dout),
    .q0(line_buffer_Array_V_4_0_15_q0)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U531(
    .din0(tmp_data_0_V_fu_1528_p1),
    .din1(tmp_data_0_V_fu_1528_p2),
    .din2(tmp_data_0_V_fu_1528_p3),
    .din3(tmp_data_0_V_fu_1528_p4),
    .din4(tmp_data_0_V_fu_1528_p5),
    .dout(tmp_data_0_V_fu_1528_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U532(
    .din0(tmp_data_1_V_fu_1643_p1),
    .din1(tmp_data_1_V_fu_1643_p2),
    .din2(tmp_data_1_V_fu_1643_p3),
    .din3(tmp_data_1_V_fu_1643_p4),
    .din4(tmp_data_1_V_fu_1643_p5),
    .dout(tmp_data_1_V_fu_1643_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U533(
    .din0(tmp_data_2_V_fu_1758_p1),
    .din1(tmp_data_2_V_fu_1758_p2),
    .din2(tmp_data_2_V_fu_1758_p3),
    .din3(tmp_data_2_V_fu_1758_p4),
    .din4(tmp_data_2_V_fu_1758_p5),
    .dout(tmp_data_2_V_fu_1758_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U534(
    .din0(tmp_data_3_V_fu_1873_p1),
    .din1(tmp_data_3_V_fu_1873_p2),
    .din2(tmp_data_3_V_fu_1873_p3),
    .din3(tmp_data_3_V_fu_1873_p4),
    .din4(tmp_data_3_V_fu_1873_p5),
    .dout(tmp_data_3_V_fu_1873_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U535(
    .din0(tmp_data_4_V_fu_1988_p1),
    .din1(tmp_data_4_V_fu_1988_p2),
    .din2(tmp_data_4_V_fu_1988_p3),
    .din3(tmp_data_4_V_fu_1988_p4),
    .din4(tmp_data_4_V_fu_1988_p5),
    .dout(tmp_data_4_V_fu_1988_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U536(
    .din0(tmp_data_5_V_fu_2103_p1),
    .din1(tmp_data_5_V_fu_2103_p2),
    .din2(tmp_data_5_V_fu_2103_p3),
    .din3(tmp_data_5_V_fu_2103_p4),
    .din4(tmp_data_5_V_fu_2103_p5),
    .dout(tmp_data_5_V_fu_2103_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U537(
    .din0(tmp_data_6_V_fu_2218_p1),
    .din1(tmp_data_6_V_fu_2218_p2),
    .din2(tmp_data_6_V_fu_2218_p3),
    .din3(tmp_data_6_V_fu_2218_p4),
    .din4(tmp_data_6_V_fu_2218_p5),
    .dout(tmp_data_6_V_fu_2218_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U538(
    .din0(tmp_data_7_V_fu_2333_p1),
    .din1(tmp_data_7_V_fu_2333_p2),
    .din2(tmp_data_7_V_fu_2333_p3),
    .din3(tmp_data_7_V_fu_2333_p4),
    .din4(tmp_data_7_V_fu_2333_p5),
    .dout(tmp_data_7_V_fu_2333_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U539(
    .din0(tmp_data_8_V_fu_2448_p1),
    .din1(tmp_data_8_V_fu_2448_p2),
    .din2(tmp_data_8_V_fu_2448_p3),
    .din3(tmp_data_8_V_fu_2448_p4),
    .din4(tmp_data_8_V_fu_2448_p5),
    .dout(tmp_data_8_V_fu_2448_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U540(
    .din0(tmp_data_9_V_fu_2563_p1),
    .din1(tmp_data_9_V_fu_2563_p2),
    .din2(tmp_data_9_V_fu_2563_p3),
    .din3(tmp_data_9_V_fu_2563_p4),
    .din4(tmp_data_9_V_fu_2563_p5),
    .dout(tmp_data_9_V_fu_2563_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U541(
    .din0(tmp_data_10_V_fu_2678_p1),
    .din1(tmp_data_10_V_fu_2678_p2),
    .din2(tmp_data_10_V_fu_2678_p3),
    .din3(tmp_data_10_V_fu_2678_p4),
    .din4(tmp_data_10_V_fu_2678_p5),
    .dout(tmp_data_10_V_fu_2678_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U542(
    .din0(tmp_data_11_V_fu_2793_p1),
    .din1(tmp_data_11_V_fu_2793_p2),
    .din2(tmp_data_11_V_fu_2793_p3),
    .din3(tmp_data_11_V_fu_2793_p4),
    .din4(tmp_data_11_V_fu_2793_p5),
    .dout(tmp_data_11_V_fu_2793_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U543(
    .din0(tmp_data_12_V_fu_2908_p1),
    .din1(tmp_data_12_V_fu_2908_p2),
    .din2(tmp_data_12_V_fu_2908_p3),
    .din3(tmp_data_12_V_fu_2908_p4),
    .din4(tmp_data_12_V_fu_2908_p5),
    .dout(tmp_data_12_V_fu_2908_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U544(
    .din0(tmp_data_13_V_fu_3023_p1),
    .din1(tmp_data_13_V_fu_3023_p2),
    .din2(tmp_data_13_V_fu_3023_p3),
    .din3(tmp_data_13_V_fu_3023_p4),
    .din4(tmp_data_13_V_fu_3023_p5),
    .dout(tmp_data_13_V_fu_3023_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U545(
    .din0(tmp_data_14_V_fu_3138_p1),
    .din1(tmp_data_14_V_fu_3138_p2),
    .din2(tmp_data_14_V_fu_3138_p3),
    .din3(tmp_data_14_V_fu_3138_p4),
    .din4(tmp_data_14_V_fu_3138_p5),
    .dout(tmp_data_14_V_fu_3138_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U546(
    .din0(tmp_data_15_V_fu_3253_p1),
    .din1(tmp_data_15_V_fu_3253_p2),
    .din2(tmp_data_15_V_fu_3253_p3),
    .din3(tmp_data_15_V_fu_3253_p4),
    .din4(tmp_data_15_V_fu_3253_p5),
    .dout(tmp_data_15_V_fu_3253_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_420)) begin
        if ((1'b1 == ap_condition_530)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_741 <= 32'd0;
        end else if ((1'b1 == ap_condition_439)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_741 <= select_ln222_fu_896_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_741 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_741;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_752_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_730 <= add_ln241_fu_758_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_730 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_523)) begin
        if ((icmp_ln212_fu_822_p2 == 1'd1)) begin
            pX_1 <= 32'd0;
        end else if ((icmp_ln212_fu_822_p2 == 1'd0)) begin
            pX_1 <= add_ln225_fu_828_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_536)) begin
        if ((icmp_ln216_fu_872_p2 == 1'd1)) begin
            pY_1 <= 32'd0;
        end else if ((icmp_ln216_fu_872_p2 == 1'd0)) begin
            pY_1 <= add_ln220_fu_878_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_523)) begin
        if ((icmp_ln212_fu_822_p2 == 1'd1)) begin
            sX_1 <= 32'd0;
        end else if ((icmp_ln212_fu_822_p2 == 1'd0)) begin
            sX_1 <= select_ln227_fu_846_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DataOut_V_218_reg_3390 <= line_buffer_Array_V_4_0_0_q0;
        DataOut_V_219_reg_3396 <= line_buffer_Array_V_4_0_1_q0;
        DataOut_V_220_reg_3402 <= line_buffer_Array_V_4_0_2_q0;
        DataOut_V_221_reg_3408 <= line_buffer_Array_V_4_0_3_q0;
        DataOut_V_222_reg_3414 <= line_buffer_Array_V_4_0_4_q0;
        DataOut_V_223_reg_3420 <= line_buffer_Array_V_4_0_5_q0;
        DataOut_V_224_reg_3426 <= line_buffer_Array_V_4_0_6_q0;
        DataOut_V_225_reg_3432 <= line_buffer_Array_V_4_0_7_q0;
        DataOut_V_226_reg_3438 <= line_buffer_Array_V_4_0_8_q0;
        DataOut_V_227_reg_3444 <= line_buffer_Array_V_4_0_9_q0;
        DataOut_V_228_reg_3450 <= line_buffer_Array_V_4_0_10_q0;
        DataOut_V_229_reg_3456 <= line_buffer_Array_V_4_0_11_q0;
        DataOut_V_230_reg_3462 <= line_buffer_Array_V_4_0_12_q0;
        DataOut_V_231_reg_3468 <= line_buffer_Array_V_4_0_13_q0;
        DataOut_V_232_reg_3474 <= line_buffer_Array_V_4_0_14_q0;
        DataOut_V_reg_3480 <= line_buffer_Array_V_4_0_15_q0;
        shift_buffer_1_0_V_reg_3294 <= data_V_data_0_V_dout;
        shift_buffer_1_10_V_reg_3354 <= data_V_data_10_V_dout;
        shift_buffer_1_11_V_reg_3360 <= data_V_data_11_V_dout;
        shift_buffer_1_12_V_reg_3366 <= data_V_data_12_V_dout;
        shift_buffer_1_13_V_reg_3372 <= data_V_data_13_V_dout;
        shift_buffer_1_14_V_reg_3378 <= data_V_data_14_V_dout;
        shift_buffer_1_15_V_reg_3384 <= data_V_data_15_V_dout;
        shift_buffer_1_1_V_reg_3300 <= data_V_data_1_V_dout;
        shift_buffer_1_2_V_reg_3306 <= data_V_data_2_V_dout;
        shift_buffer_1_3_V_reg_3312 <= data_V_data_3_V_dout;
        shift_buffer_1_4_V_reg_3318 <= data_V_data_4_V_dout;
        shift_buffer_1_5_V_reg_3324 <= data_V_data_5_V_dout;
        shift_buffer_1_6_V_reg_3330 <= data_V_data_6_V_dout;
        shift_buffer_1_7_V_reg_3336 <= data_V_data_7_V_dout;
        shift_buffer_1_8_V_reg_3342 <= data_V_data_8_V_dout;
        shift_buffer_1_9_V_reg_3348 <= data_V_data_9_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_4_reg_3277 <= and_ln191_4_fu_816_p2;
        icmp_ln212_reg_3281 <= icmp_ln212_fu_822_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_4_reg_3277_pp0_iter1_reg <= and_ln191_4_reg_3277;
        icmp_ln241_reg_3268 <= icmp_ln241_fu_752_p2;
        icmp_ln241_reg_3268_pp0_iter1_reg <= icmp_ln241_reg_3268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        kernel_data_V_4_16 <= DataOut_V_218_reg_3390;
        kernel_data_V_4_17 <= DataOut_V_219_reg_3396;
        kernel_data_V_4_18 <= DataOut_V_220_reg_3402;
        kernel_data_V_4_19 <= DataOut_V_221_reg_3408;
        kernel_data_V_4_20 <= DataOut_V_222_reg_3414;
        kernel_data_V_4_21 <= DataOut_V_223_reg_3420;
        kernel_data_V_4_22 <= DataOut_V_224_reg_3426;
        kernel_data_V_4_23 <= DataOut_V_225_reg_3432;
        kernel_data_V_4_24 <= DataOut_V_226_reg_3438;
        kernel_data_V_4_25 <= DataOut_V_227_reg_3444;
        kernel_data_V_4_26 <= DataOut_V_228_reg_3450;
        kernel_data_V_4_27 <= DataOut_V_229_reg_3456;
        kernel_data_V_4_28 <= DataOut_V_230_reg_3462;
        kernel_data_V_4_29 <= DataOut_V_231_reg_3468;
        kernel_data_V_4_30 <= DataOut_V_232_reg_3474;
        kernel_data_V_4_31 <= DataOut_V_reg_3480;
        kernel_data_V_4_48 <= shift_buffer_1_0_V_reg_3294;
        kernel_data_V_4_49 <= shift_buffer_1_1_V_reg_3300;
        kernel_data_V_4_50 <= shift_buffer_1_2_V_reg_3306;
        kernel_data_V_4_51 <= shift_buffer_1_3_V_reg_3312;
        kernel_data_V_4_52 <= shift_buffer_1_4_V_reg_3318;
        kernel_data_V_4_53 <= shift_buffer_1_5_V_reg_3324;
        kernel_data_V_4_54 <= shift_buffer_1_6_V_reg_3330;
        kernel_data_V_4_55 <= shift_buffer_1_7_V_reg_3336;
        kernel_data_V_4_56 <= shift_buffer_1_8_V_reg_3342;
        kernel_data_V_4_57 <= shift_buffer_1_9_V_reg_3348;
        kernel_data_V_4_58 <= shift_buffer_1_10_V_reg_3354;
        kernel_data_V_4_59 <= shift_buffer_1_11_V_reg_3360;
        kernel_data_V_4_60 <= shift_buffer_1_12_V_reg_3366;
        kernel_data_V_4_61 <= shift_buffer_1_13_V_reg_3372;
        kernel_data_V_4_62 <= shift_buffer_1_14_V_reg_3378;
        kernel_data_V_4_63 <= shift_buffer_1_15_V_reg_3384;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_3281 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sY_1 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_741;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_752_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln212_reg_3281 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_sY_1_load = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_741;
    end else begin
        ap_sig_allocacmp_sY_1_load = sY_1;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_3268 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_10_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_10_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_11_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_11_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_12_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_12_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_13_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_13_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_14_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_14_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_15_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_15_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_4_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_4_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_5_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_5_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_6_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_6_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_7_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_7_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_8_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_8_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_9_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_3268 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_Array_V_4_0_9_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_752_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_752_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_878_p2 = (pY_1 + 32'd1);

assign add_ln222_fu_890_p2 = (ap_sig_allocacmp_sY_1_load + 32'd1);

assign add_ln225_fu_828_p2 = (pX_1 + 32'd1);

assign add_ln227_fu_840_p2 = (sX_1 + 32'd1);

assign add_ln241_fu_758_p2 = (indvar_flatten_reg_730 + 8'd1);

assign and_ln191_3_fu_810_p2 = (icmp_ln191_6_fu_798_p2 & icmp_ln191_5_fu_788_p2);

assign and_ln191_4_fu_816_p2 = (and_ln191_fu_804_p2 & and_ln191_3_fu_810_p2);

assign and_ln191_fu_804_p2 = (icmp_ln191_fu_768_p2 & icmp_ln191_4_fu_778_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (io_acc_block_signal_op453 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln241_reg_3268 == 1'd0) & (io_acc_block_signal_op77 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (io_acc_block_signal_op453 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln241_reg_3268 == 1'd0) & (io_acc_block_signal_op77 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (io_acc_block_signal_op453 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln241_reg_3268 == 1'd0) & (io_acc_block_signal_op77 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln241_reg_3268 == 1'd0) & (io_acc_block_signal_op77 == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((1'd1 == and_ln191_4_reg_3277_pp0_iter1_reg) & (io_acc_block_signal_op453 == 1'b0));
end

always @ (*) begin
    ap_condition_420 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_439 = ((icmp_ln212_fu_822_p2 == 1'd1) & (icmp_ln216_fu_872_p2 == 1'd0) & (icmp_ln241_fu_752_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_523 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_752_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_530 = ((icmp_ln216_fu_872_p2 == 1'd1) & (icmp_ln212_fu_822_p2 == 1'd1) & (icmp_ln241_fu_752_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_536 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_822_p2 == 1'd1) & (icmp_ln241_fu_752_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_741 = 'bx;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_100_fu_2983_p2 = ((pool_window_2_V_73_fu_2946_p3 < pool_window_3_V_73_fu_2958_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_101_fu_3005_p2 = ((select_ln65_135_fu_2975_p3 < select_ln65_137_fu_2997_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_102_fu_3098_p2 = ((pool_window_2_V_75_fu_3061_p3 < pool_window_3_V_75_fu_3073_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_103_fu_3120_p2 = ((select_ln65_138_fu_3090_p3 < select_ln65_140_fu_3112_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_104_fu_3213_p2 = ((pool_window_2_V_77_fu_3176_p3 < pool_window_3_V_77_fu_3188_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_105_fu_3235_p2 = ((select_ln65_141_fu_3205_p3 < select_ln65_143_fu_3227_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_10_fu_2624_p2 = ((pool_window_0_V_67_fu_2578_p3 < pool_window_1_V_67_fu_2590_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_2739_p2 = ((pool_window_0_V_69_fu_2693_p3 < pool_window_1_V_69_fu_2705_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_12_fu_2854_p2 = ((pool_window_0_V_71_fu_2808_p3 < pool_window_1_V_71_fu_2820_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_13_fu_2969_p2 = ((pool_window_0_V_73_fu_2923_p3 < pool_window_1_V_73_fu_2935_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_14_fu_3084_p2 = ((pool_window_0_V_75_fu_3038_p3 < pool_window_1_V_75_fu_3050_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_15_fu_3199_p2 = ((pool_window_0_V_77_fu_3153_p3 < pool_window_1_V_77_fu_3165_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_1589_p2 = ((pool_window_0_V_49_fu_1543_p3 < pool_window_1_V_49_fu_1555_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_1704_p2 = ((pool_window_0_V_51_fu_1658_p3 < pool_window_1_V_51_fu_1670_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_2049_p2 = ((pool_window_0_V_57_fu_2003_p3 < pool_window_1_V_57_fu_2015_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_2164_p2 = ((pool_window_0_V_59_fu_2118_p3 < pool_window_1_V_59_fu_2130_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_72_fu_1488_p2 = ((pool_window_2_V_fu_1451_p3 < pool_window_3_V_fu_1463_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_73_fu_1510_p2 = ((select_ln65_fu_1480_p3 < select_ln65_97_fu_1502_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_74_fu_1603_p2 = ((pool_window_2_V_49_fu_1566_p3 < pool_window_3_V_49_fu_1578_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_75_fu_1625_p2 = ((select_ln65_99_fu_1595_p3 < select_ln65_101_fu_1617_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_76_fu_1718_p2 = ((pool_window_2_V_51_fu_1681_p3 < pool_window_3_V_51_fu_1693_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_77_fu_1740_p2 = ((select_ln65_102_fu_1710_p3 < select_ln65_104_fu_1732_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_78_fu_1819_p2 = ((pool_window_0_V_53_fu_1773_p3 < pool_window_1_V_53_fu_1785_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_79_fu_1833_p2 = ((pool_window_2_V_53_fu_1796_p3 < pool_window_3_V_53_fu_1808_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_2279_p2 = ((pool_window_0_V_61_fu_2233_p3 < pool_window_1_V_61_fu_2245_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_80_fu_1855_p2 = ((select_ln65_105_fu_1825_p3 < select_ln65_107_fu_1847_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_81_fu_1934_p2 = ((pool_window_0_V_55_fu_1888_p3 < pool_window_1_V_55_fu_1900_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_82_fu_1948_p2 = ((pool_window_2_V_55_fu_1911_p3 < pool_window_3_V_55_fu_1923_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_83_fu_1970_p2 = ((select_ln65_108_fu_1940_p3 < select_ln65_110_fu_1962_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_84_fu_2063_p2 = ((pool_window_2_V_57_fu_2026_p3 < pool_window_3_V_57_fu_2038_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_85_fu_2085_p2 = ((select_ln65_111_fu_2055_p3 < select_ln65_113_fu_2077_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_86_fu_2178_p2 = ((pool_window_2_V_59_fu_2141_p3 < pool_window_3_V_59_fu_2153_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_87_fu_2200_p2 = ((select_ln65_114_fu_2170_p3 < select_ln65_116_fu_2192_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_88_fu_2293_p2 = ((pool_window_2_V_61_fu_2256_p3 < pool_window_3_V_61_fu_2268_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_89_fu_2315_p2 = ((select_ln65_117_fu_2285_p3 < select_ln65_119_fu_2307_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_2394_p2 = ((pool_window_0_V_63_fu_2348_p3 < pool_window_1_V_63_fu_2360_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_90_fu_2408_p2 = ((pool_window_2_V_63_fu_2371_p3 < pool_window_3_V_63_fu_2383_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_91_fu_2430_p2 = ((select_ln65_120_fu_2400_p3 < select_ln65_122_fu_2422_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_92_fu_2523_p2 = ((pool_window_2_V_65_fu_2486_p3 < pool_window_3_V_65_fu_2498_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_93_fu_2545_p2 = ((select_ln65_123_fu_2515_p3 < select_ln65_125_fu_2537_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_94_fu_2638_p2 = ((pool_window_2_V_67_fu_2601_p3 < pool_window_3_V_67_fu_2613_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_95_fu_2660_p2 = ((select_ln65_126_fu_2630_p3 < select_ln65_128_fu_2652_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_96_fu_2753_p2 = ((pool_window_2_V_69_fu_2716_p3 < pool_window_3_V_69_fu_2728_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_97_fu_2775_p2 = ((select_ln65_129_fu_2745_p3 < select_ln65_131_fu_2767_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_98_fu_2868_p2 = ((pool_window_2_V_71_fu_2831_p3 < pool_window_3_V_71_fu_2843_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_99_fu_2890_p2 = ((select_ln65_132_fu_2860_p3 < select_ln65_134_fu_2882_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_2509_p2 = ((pool_window_0_V_65_fu_2463_p3 < pool_window_1_V_65_fu_2475_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_1474_p2 = ((pool_window_0_V_fu_1428_p3 < pool_window_1_V_fu_1440_p3) ? 1'b1 : 1'b0);

assign icmp_ln191_4_fu_778_p2 = ((ap_sig_allocacmp_sY_1_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_5_fu_788_p2 = (($signed(pY_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_6_fu_798_p2 = (($signed(pX_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_768_p2 = ((sX_1 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_822_p2 = ((pX_1 == 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_872_p2 = ((pY_1 == 32'd12) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_752_p2 = ((indvar_flatten_reg_730 == 8'd169) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op453 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op77 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign pool_window_0_V_49_fu_1543_p3 = {{kernel_data_V_4_17}, {4'd0}};

assign pool_window_0_V_51_fu_1658_p3 = {{kernel_data_V_4_18}, {4'd0}};

assign pool_window_0_V_53_fu_1773_p3 = {{kernel_data_V_4_19}, {4'd0}};

assign pool_window_0_V_55_fu_1888_p3 = {{kernel_data_V_4_20}, {4'd0}};

assign pool_window_0_V_57_fu_2003_p3 = {{kernel_data_V_4_21}, {4'd0}};

assign pool_window_0_V_59_fu_2118_p3 = {{kernel_data_V_4_22}, {4'd0}};

assign pool_window_0_V_61_fu_2233_p3 = {{kernel_data_V_4_23}, {4'd0}};

assign pool_window_0_V_63_fu_2348_p3 = {{kernel_data_V_4_24}, {4'd0}};

assign pool_window_0_V_65_fu_2463_p3 = {{kernel_data_V_4_25}, {4'd0}};

assign pool_window_0_V_67_fu_2578_p3 = {{kernel_data_V_4_26}, {4'd0}};

assign pool_window_0_V_69_fu_2693_p3 = {{kernel_data_V_4_27}, {4'd0}};

assign pool_window_0_V_71_fu_2808_p3 = {{kernel_data_V_4_28}, {4'd0}};

assign pool_window_0_V_73_fu_2923_p3 = {{kernel_data_V_4_29}, {4'd0}};

assign pool_window_0_V_75_fu_3038_p3 = {{kernel_data_V_4_30}, {4'd0}};

assign pool_window_0_V_77_fu_3153_p3 = {{kernel_data_V_4_31}, {4'd0}};

assign pool_window_0_V_fu_1428_p3 = {{kernel_data_V_4_16}, {4'd0}};

assign pool_window_1_V_49_fu_1555_p3 = {{DataOut_V_219_reg_3396}, {4'd0}};

assign pool_window_1_V_51_fu_1670_p3 = {{DataOut_V_220_reg_3402}, {4'd0}};

assign pool_window_1_V_53_fu_1785_p3 = {{DataOut_V_221_reg_3408}, {4'd0}};

assign pool_window_1_V_55_fu_1900_p3 = {{DataOut_V_222_reg_3414}, {4'd0}};

assign pool_window_1_V_57_fu_2015_p3 = {{DataOut_V_223_reg_3420}, {4'd0}};

assign pool_window_1_V_59_fu_2130_p3 = {{DataOut_V_224_reg_3426}, {4'd0}};

assign pool_window_1_V_61_fu_2245_p3 = {{DataOut_V_225_reg_3432}, {4'd0}};

assign pool_window_1_V_63_fu_2360_p3 = {{DataOut_V_226_reg_3438}, {4'd0}};

assign pool_window_1_V_65_fu_2475_p3 = {{DataOut_V_227_reg_3444}, {4'd0}};

assign pool_window_1_V_67_fu_2590_p3 = {{DataOut_V_228_reg_3450}, {4'd0}};

assign pool_window_1_V_69_fu_2705_p3 = {{DataOut_V_229_reg_3456}, {4'd0}};

assign pool_window_1_V_71_fu_2820_p3 = {{DataOut_V_230_reg_3462}, {4'd0}};

assign pool_window_1_V_73_fu_2935_p3 = {{DataOut_V_231_reg_3468}, {4'd0}};

assign pool_window_1_V_75_fu_3050_p3 = {{DataOut_V_232_reg_3474}, {4'd0}};

assign pool_window_1_V_77_fu_3165_p3 = {{DataOut_V_reg_3480}, {4'd0}};

assign pool_window_1_V_fu_1440_p3 = {{DataOut_V_218_reg_3390}, {4'd0}};

assign pool_window_2_V_49_fu_1566_p3 = {{kernel_data_V_4_49}, {4'd0}};

assign pool_window_2_V_51_fu_1681_p3 = {{kernel_data_V_4_50}, {4'd0}};

assign pool_window_2_V_53_fu_1796_p3 = {{kernel_data_V_4_51}, {4'd0}};

assign pool_window_2_V_55_fu_1911_p3 = {{kernel_data_V_4_52}, {4'd0}};

assign pool_window_2_V_57_fu_2026_p3 = {{kernel_data_V_4_53}, {4'd0}};

assign pool_window_2_V_59_fu_2141_p3 = {{kernel_data_V_4_54}, {4'd0}};

assign pool_window_2_V_61_fu_2256_p3 = {{kernel_data_V_4_55}, {4'd0}};

assign pool_window_2_V_63_fu_2371_p3 = {{kernel_data_V_4_56}, {4'd0}};

assign pool_window_2_V_65_fu_2486_p3 = {{kernel_data_V_4_57}, {4'd0}};

assign pool_window_2_V_67_fu_2601_p3 = {{kernel_data_V_4_58}, {4'd0}};

assign pool_window_2_V_69_fu_2716_p3 = {{kernel_data_V_4_59}, {4'd0}};

assign pool_window_2_V_71_fu_2831_p3 = {{kernel_data_V_4_60}, {4'd0}};

assign pool_window_2_V_73_fu_2946_p3 = {{kernel_data_V_4_61}, {4'd0}};

assign pool_window_2_V_75_fu_3061_p3 = {{kernel_data_V_4_62}, {4'd0}};

assign pool_window_2_V_77_fu_3176_p3 = {{kernel_data_V_4_63}, {4'd0}};

assign pool_window_2_V_fu_1451_p3 = {{kernel_data_V_4_48}, {4'd0}};

assign pool_window_3_V_49_fu_1578_p3 = {{shift_buffer_1_1_V_reg_3300}, {4'd0}};

assign pool_window_3_V_51_fu_1693_p3 = {{shift_buffer_1_2_V_reg_3306}, {4'd0}};

assign pool_window_3_V_53_fu_1808_p3 = {{shift_buffer_1_3_V_reg_3312}, {4'd0}};

assign pool_window_3_V_55_fu_1923_p3 = {{shift_buffer_1_4_V_reg_3318}, {4'd0}};

assign pool_window_3_V_57_fu_2038_p3 = {{shift_buffer_1_5_V_reg_3324}, {4'd0}};

assign pool_window_3_V_59_fu_2153_p3 = {{shift_buffer_1_6_V_reg_3330}, {4'd0}};

assign pool_window_3_V_61_fu_2268_p3 = {{shift_buffer_1_7_V_reg_3336}, {4'd0}};

assign pool_window_3_V_63_fu_2383_p3 = {{shift_buffer_1_8_V_reg_3342}, {4'd0}};

assign pool_window_3_V_65_fu_2498_p3 = {{shift_buffer_1_9_V_reg_3348}, {4'd0}};

assign pool_window_3_V_67_fu_2613_p3 = {{shift_buffer_1_10_V_reg_3354}, {4'd0}};

assign pool_window_3_V_69_fu_2728_p3 = {{shift_buffer_1_11_V_reg_3360}, {4'd0}};

assign pool_window_3_V_71_fu_2843_p3 = {{shift_buffer_1_12_V_reg_3366}, {4'd0}};

assign pool_window_3_V_73_fu_2958_p3 = {{shift_buffer_1_13_V_reg_3372}, {4'd0}};

assign pool_window_3_V_75_fu_3073_p3 = {{shift_buffer_1_14_V_reg_3378}, {4'd0}};

assign pool_window_3_V_77_fu_3188_p3 = {{shift_buffer_1_15_V_reg_3384}, {4'd0}};

assign pool_window_3_V_fu_1463_p3 = {{shift_buffer_1_0_V_reg_3294}, {4'd0}};

assign res_V_data_0_V_din = tmp_data_0_V_fu_1528_p6;

assign res_V_data_10_V_din = tmp_data_10_V_fu_2678_p6;

assign res_V_data_11_V_din = tmp_data_11_V_fu_2793_p6;

assign res_V_data_12_V_din = tmp_data_12_V_fu_2908_p6;

assign res_V_data_13_V_din = tmp_data_13_V_fu_3023_p6;

assign res_V_data_14_V_din = tmp_data_14_V_fu_3138_p6;

assign res_V_data_15_V_din = tmp_data_15_V_fu_3253_p6;

assign res_V_data_1_V_din = tmp_data_1_V_fu_1643_p6;

assign res_V_data_2_V_din = tmp_data_2_V_fu_1758_p6;

assign res_V_data_3_V_din = tmp_data_3_V_fu_1873_p6;

assign res_V_data_4_V_din = tmp_data_4_V_fu_1988_p6;

assign res_V_data_5_V_din = tmp_data_5_V_fu_2103_p6;

assign res_V_data_6_V_din = tmp_data_6_V_fu_2218_p6;

assign res_V_data_7_V_din = tmp_data_7_V_fu_2333_p6;

assign res_V_data_8_V_din = tmp_data_8_V_fu_2448_p6;

assign res_V_data_9_V_din = tmp_data_9_V_fu_2563_p6;

assign select_ln222_fu_896_p3 = ((icmp_ln191_4_fu_778_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_890_p2);

assign select_ln227_fu_846_p3 = ((icmp_ln191_fu_768_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_840_p2);

assign select_ln65_101_fu_1617_p3 = ((icmp_ln1496_74_fu_1603_p2[0:0] === 1'b1) ? pool_window_3_V_49_fu_1578_p3 : pool_window_2_V_49_fu_1566_p3);

assign select_ln65_102_fu_1710_p3 = ((icmp_ln1496_2_fu_1704_p2[0:0] === 1'b1) ? pool_window_1_V_51_fu_1670_p3 : pool_window_0_V_51_fu_1658_p3);

assign select_ln65_104_fu_1732_p3 = ((icmp_ln1496_76_fu_1718_p2[0:0] === 1'b1) ? pool_window_3_V_51_fu_1693_p3 : pool_window_2_V_51_fu_1681_p3);

assign select_ln65_105_fu_1825_p3 = ((icmp_ln1496_78_fu_1819_p2[0:0] === 1'b1) ? pool_window_1_V_53_fu_1785_p3 : pool_window_0_V_53_fu_1773_p3);

assign select_ln65_106_fu_1494_p3 = ((icmp_ln1496_72_fu_1488_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_107_fu_1847_p3 = ((icmp_ln1496_79_fu_1833_p2[0:0] === 1'b1) ? pool_window_3_V_53_fu_1808_p3 : pool_window_2_V_53_fu_1796_p3);

assign select_ln65_108_fu_1940_p3 = ((icmp_ln1496_81_fu_1934_p2[0:0] === 1'b1) ? pool_window_1_V_55_fu_1900_p3 : pool_window_0_V_55_fu_1888_p3);

assign select_ln65_110_fu_1962_p3 = ((icmp_ln1496_82_fu_1948_p2[0:0] === 1'b1) ? pool_window_3_V_55_fu_1923_p3 : pool_window_2_V_55_fu_1911_p3);

assign select_ln65_111_fu_2055_p3 = ((icmp_ln1496_5_fu_2049_p2[0:0] === 1'b1) ? pool_window_1_V_57_fu_2015_p3 : pool_window_0_V_57_fu_2003_p3);

assign select_ln65_112_fu_1609_p3 = ((icmp_ln1496_74_fu_1603_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_113_fu_2077_p3 = ((icmp_ln1496_84_fu_2063_p2[0:0] === 1'b1) ? pool_window_3_V_57_fu_2038_p3 : pool_window_2_V_57_fu_2026_p3);

assign select_ln65_114_fu_2170_p3 = ((icmp_ln1496_6_fu_2164_p2[0:0] === 1'b1) ? pool_window_1_V_59_fu_2130_p3 : pool_window_0_V_59_fu_2118_p3);

assign select_ln65_116_fu_2192_p3 = ((icmp_ln1496_86_fu_2178_p2[0:0] === 1'b1) ? pool_window_3_V_59_fu_2153_p3 : pool_window_2_V_59_fu_2141_p3);

assign select_ln65_117_fu_2285_p3 = ((icmp_ln1496_7_fu_2279_p2[0:0] === 1'b1) ? pool_window_1_V_61_fu_2245_p3 : pool_window_0_V_61_fu_2233_p3);

assign select_ln65_118_fu_1724_p3 = ((icmp_ln1496_76_fu_1718_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_119_fu_2307_p3 = ((icmp_ln1496_88_fu_2293_p2[0:0] === 1'b1) ? pool_window_3_V_61_fu_2268_p3 : pool_window_2_V_61_fu_2256_p3);

assign select_ln65_120_fu_2400_p3 = ((icmp_ln1496_8_fu_2394_p2[0:0] === 1'b1) ? pool_window_1_V_63_fu_2360_p3 : pool_window_0_V_63_fu_2348_p3);

assign select_ln65_122_fu_2422_p3 = ((icmp_ln1496_90_fu_2408_p2[0:0] === 1'b1) ? pool_window_3_V_63_fu_2383_p3 : pool_window_2_V_63_fu_2371_p3);

assign select_ln65_123_fu_2515_p3 = ((icmp_ln1496_9_fu_2509_p2[0:0] === 1'b1) ? pool_window_1_V_65_fu_2475_p3 : pool_window_0_V_65_fu_2463_p3);

assign select_ln65_124_fu_1839_p3 = ((icmp_ln1496_79_fu_1833_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_125_fu_2537_p3 = ((icmp_ln1496_92_fu_2523_p2[0:0] === 1'b1) ? pool_window_3_V_65_fu_2498_p3 : pool_window_2_V_65_fu_2486_p3);

assign select_ln65_126_fu_2630_p3 = ((icmp_ln1496_10_fu_2624_p2[0:0] === 1'b1) ? pool_window_1_V_67_fu_2590_p3 : pool_window_0_V_67_fu_2578_p3);

assign select_ln65_128_fu_2652_p3 = ((icmp_ln1496_94_fu_2638_p2[0:0] === 1'b1) ? pool_window_3_V_67_fu_2613_p3 : pool_window_2_V_67_fu_2601_p3);

assign select_ln65_129_fu_2745_p3 = ((icmp_ln1496_11_fu_2739_p2[0:0] === 1'b1) ? pool_window_1_V_69_fu_2705_p3 : pool_window_0_V_69_fu_2693_p3);

assign select_ln65_130_fu_1954_p3 = ((icmp_ln1496_82_fu_1948_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_131_fu_2767_p3 = ((icmp_ln1496_96_fu_2753_p2[0:0] === 1'b1) ? pool_window_3_V_69_fu_2728_p3 : pool_window_2_V_69_fu_2716_p3);

assign select_ln65_132_fu_2860_p3 = ((icmp_ln1496_12_fu_2854_p2[0:0] === 1'b1) ? pool_window_1_V_71_fu_2820_p3 : pool_window_0_V_71_fu_2808_p3);

assign select_ln65_134_fu_2882_p3 = ((icmp_ln1496_98_fu_2868_p2[0:0] === 1'b1) ? pool_window_3_V_71_fu_2843_p3 : pool_window_2_V_71_fu_2831_p3);

assign select_ln65_135_fu_2975_p3 = ((icmp_ln1496_13_fu_2969_p2[0:0] === 1'b1) ? pool_window_1_V_73_fu_2935_p3 : pool_window_0_V_73_fu_2923_p3);

assign select_ln65_136_fu_2069_p3 = ((icmp_ln1496_84_fu_2063_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_137_fu_2997_p3 = ((icmp_ln1496_100_fu_2983_p2[0:0] === 1'b1) ? pool_window_3_V_73_fu_2958_p3 : pool_window_2_V_73_fu_2946_p3);

assign select_ln65_138_fu_3090_p3 = ((icmp_ln1496_14_fu_3084_p2[0:0] === 1'b1) ? pool_window_1_V_75_fu_3050_p3 : pool_window_0_V_75_fu_3038_p3);

assign select_ln65_140_fu_3112_p3 = ((icmp_ln1496_102_fu_3098_p2[0:0] === 1'b1) ? pool_window_3_V_75_fu_3073_p3 : pool_window_2_V_75_fu_3061_p3);

assign select_ln65_141_fu_3205_p3 = ((icmp_ln1496_15_fu_3199_p2[0:0] === 1'b1) ? pool_window_1_V_77_fu_3165_p3 : pool_window_0_V_77_fu_3153_p3);

assign select_ln65_142_fu_2184_p3 = ((icmp_ln1496_86_fu_2178_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_143_fu_3227_p3 = ((icmp_ln1496_104_fu_3213_p2[0:0] === 1'b1) ? pool_window_3_V_77_fu_3188_p3 : pool_window_2_V_77_fu_3176_p3);

assign select_ln65_145_fu_2299_p3 = ((icmp_ln1496_88_fu_2293_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_147_fu_2414_p3 = ((icmp_ln1496_90_fu_2408_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_149_fu_2529_p3 = ((icmp_ln1496_92_fu_2523_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_151_fu_2644_p3 = ((icmp_ln1496_94_fu_2638_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_153_fu_2759_p3 = ((icmp_ln1496_96_fu_2753_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_155_fu_2874_p3 = ((icmp_ln1496_98_fu_2868_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_157_fu_2989_p3 = ((icmp_ln1496_100_fu_2983_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_159_fu_3104_p3 = ((icmp_ln1496_102_fu_3098_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_161_fu_3219_p3 = ((icmp_ln1496_104_fu_3213_p2[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_97_fu_1502_p3 = ((icmp_ln1496_72_fu_1488_p2[0:0] === 1'b1) ? pool_window_3_V_fu_1463_p3 : pool_window_2_V_fu_1451_p3);

assign select_ln65_99_fu_1595_p3 = ((icmp_ln1496_1_fu_1589_p2[0:0] === 1'b1) ? pool_window_1_V_49_fu_1555_p3 : pool_window_0_V_49_fu_1543_p3);

assign select_ln65_fu_1480_p3 = ((icmp_ln1496_fu_1474_p2[0:0] === 1'b1) ? pool_window_1_V_fu_1440_p3 : pool_window_0_V_fu_1428_p3);

assign start_out = real_start;

assign tmp_data_0_V_fu_1528_p1 = pool_window_0_V_fu_1428_p3;

assign tmp_data_0_V_fu_1528_p2 = pool_window_1_V_fu_1440_p3;

assign tmp_data_0_V_fu_1528_p3 = pool_window_2_V_fu_1451_p3;

assign tmp_data_0_V_fu_1528_p4 = pool_window_3_V_fu_1463_p3;

assign tmp_data_0_V_fu_1528_p5 = ((icmp_ln1496_73_fu_1510_p2[0:0] === 1'b1) ? select_ln65_106_fu_1494_p3 : zext_ln65_fu_1516_p1);

assign tmp_data_10_V_fu_2678_p1 = pool_window_0_V_67_fu_2578_p3;

assign tmp_data_10_V_fu_2678_p2 = pool_window_1_V_67_fu_2590_p3;

assign tmp_data_10_V_fu_2678_p3 = pool_window_2_V_67_fu_2601_p3;

assign tmp_data_10_V_fu_2678_p4 = pool_window_3_V_67_fu_2613_p3;

assign tmp_data_10_V_fu_2678_p5 = ((icmp_ln1496_95_fu_2660_p2[0:0] === 1'b1) ? select_ln65_151_fu_2644_p3 : zext_ln65_33_fu_2666_p1);

assign tmp_data_11_V_fu_2793_p1 = pool_window_0_V_69_fu_2693_p3;

assign tmp_data_11_V_fu_2793_p2 = pool_window_1_V_69_fu_2705_p3;

assign tmp_data_11_V_fu_2793_p3 = pool_window_2_V_69_fu_2716_p3;

assign tmp_data_11_V_fu_2793_p4 = pool_window_3_V_69_fu_2728_p3;

assign tmp_data_11_V_fu_2793_p5 = ((icmp_ln1496_97_fu_2775_p2[0:0] === 1'b1) ? select_ln65_153_fu_2759_p3 : zext_ln65_34_fu_2781_p1);

assign tmp_data_12_V_fu_2908_p1 = pool_window_0_V_71_fu_2808_p3;

assign tmp_data_12_V_fu_2908_p2 = pool_window_1_V_71_fu_2820_p3;

assign tmp_data_12_V_fu_2908_p3 = pool_window_2_V_71_fu_2831_p3;

assign tmp_data_12_V_fu_2908_p4 = pool_window_3_V_71_fu_2843_p3;

assign tmp_data_12_V_fu_2908_p5 = ((icmp_ln1496_99_fu_2890_p2[0:0] === 1'b1) ? select_ln65_155_fu_2874_p3 : zext_ln65_35_fu_2896_p1);

assign tmp_data_13_V_fu_3023_p1 = pool_window_0_V_73_fu_2923_p3;

assign tmp_data_13_V_fu_3023_p2 = pool_window_1_V_73_fu_2935_p3;

assign tmp_data_13_V_fu_3023_p3 = pool_window_2_V_73_fu_2946_p3;

assign tmp_data_13_V_fu_3023_p4 = pool_window_3_V_73_fu_2958_p3;

assign tmp_data_13_V_fu_3023_p5 = ((icmp_ln1496_101_fu_3005_p2[0:0] === 1'b1) ? select_ln65_157_fu_2989_p3 : zext_ln65_36_fu_3011_p1);

assign tmp_data_14_V_fu_3138_p1 = pool_window_0_V_75_fu_3038_p3;

assign tmp_data_14_V_fu_3138_p2 = pool_window_1_V_75_fu_3050_p3;

assign tmp_data_14_V_fu_3138_p3 = pool_window_2_V_75_fu_3061_p3;

assign tmp_data_14_V_fu_3138_p4 = pool_window_3_V_75_fu_3073_p3;

assign tmp_data_14_V_fu_3138_p5 = ((icmp_ln1496_103_fu_3120_p2[0:0] === 1'b1) ? select_ln65_159_fu_3104_p3 : zext_ln65_37_fu_3126_p1);

assign tmp_data_15_V_fu_3253_p1 = pool_window_0_V_77_fu_3153_p3;

assign tmp_data_15_V_fu_3253_p2 = pool_window_1_V_77_fu_3165_p3;

assign tmp_data_15_V_fu_3253_p3 = pool_window_2_V_77_fu_3176_p3;

assign tmp_data_15_V_fu_3253_p4 = pool_window_3_V_77_fu_3188_p3;

assign tmp_data_15_V_fu_3253_p5 = ((icmp_ln1496_105_fu_3235_p2[0:0] === 1'b1) ? select_ln65_161_fu_3219_p3 : zext_ln65_38_fu_3241_p1);

assign tmp_data_1_V_fu_1643_p1 = pool_window_0_V_49_fu_1543_p3;

assign tmp_data_1_V_fu_1643_p2 = pool_window_1_V_49_fu_1555_p3;

assign tmp_data_1_V_fu_1643_p3 = pool_window_2_V_49_fu_1566_p3;

assign tmp_data_1_V_fu_1643_p4 = pool_window_3_V_49_fu_1578_p3;

assign tmp_data_1_V_fu_1643_p5 = ((icmp_ln1496_75_fu_1625_p2[0:0] === 1'b1) ? select_ln65_112_fu_1609_p3 : zext_ln65_24_fu_1631_p1);

assign tmp_data_2_V_fu_1758_p1 = pool_window_0_V_51_fu_1658_p3;

assign tmp_data_2_V_fu_1758_p2 = pool_window_1_V_51_fu_1670_p3;

assign tmp_data_2_V_fu_1758_p3 = pool_window_2_V_51_fu_1681_p3;

assign tmp_data_2_V_fu_1758_p4 = pool_window_3_V_51_fu_1693_p3;

assign tmp_data_2_V_fu_1758_p5 = ((icmp_ln1496_77_fu_1740_p2[0:0] === 1'b1) ? select_ln65_118_fu_1724_p3 : zext_ln65_25_fu_1746_p1);

assign tmp_data_3_V_fu_1873_p1 = pool_window_0_V_53_fu_1773_p3;

assign tmp_data_3_V_fu_1873_p2 = pool_window_1_V_53_fu_1785_p3;

assign tmp_data_3_V_fu_1873_p3 = pool_window_2_V_53_fu_1796_p3;

assign tmp_data_3_V_fu_1873_p4 = pool_window_3_V_53_fu_1808_p3;

assign tmp_data_3_V_fu_1873_p5 = ((icmp_ln1496_80_fu_1855_p2[0:0] === 1'b1) ? select_ln65_124_fu_1839_p3 : zext_ln65_26_fu_1861_p1);

assign tmp_data_4_V_fu_1988_p1 = pool_window_0_V_55_fu_1888_p3;

assign tmp_data_4_V_fu_1988_p2 = pool_window_1_V_55_fu_1900_p3;

assign tmp_data_4_V_fu_1988_p3 = pool_window_2_V_55_fu_1911_p3;

assign tmp_data_4_V_fu_1988_p4 = pool_window_3_V_55_fu_1923_p3;

assign tmp_data_4_V_fu_1988_p5 = ((icmp_ln1496_83_fu_1970_p2[0:0] === 1'b1) ? select_ln65_130_fu_1954_p3 : zext_ln65_27_fu_1976_p1);

assign tmp_data_5_V_fu_2103_p1 = pool_window_0_V_57_fu_2003_p3;

assign tmp_data_5_V_fu_2103_p2 = pool_window_1_V_57_fu_2015_p3;

assign tmp_data_5_V_fu_2103_p3 = pool_window_2_V_57_fu_2026_p3;

assign tmp_data_5_V_fu_2103_p4 = pool_window_3_V_57_fu_2038_p3;

assign tmp_data_5_V_fu_2103_p5 = ((icmp_ln1496_85_fu_2085_p2[0:0] === 1'b1) ? select_ln65_136_fu_2069_p3 : zext_ln65_28_fu_2091_p1);

assign tmp_data_6_V_fu_2218_p1 = pool_window_0_V_59_fu_2118_p3;

assign tmp_data_6_V_fu_2218_p2 = pool_window_1_V_59_fu_2130_p3;

assign tmp_data_6_V_fu_2218_p3 = pool_window_2_V_59_fu_2141_p3;

assign tmp_data_6_V_fu_2218_p4 = pool_window_3_V_59_fu_2153_p3;

assign tmp_data_6_V_fu_2218_p5 = ((icmp_ln1496_87_fu_2200_p2[0:0] === 1'b1) ? select_ln65_142_fu_2184_p3 : zext_ln65_29_fu_2206_p1);

assign tmp_data_7_V_fu_2333_p1 = pool_window_0_V_61_fu_2233_p3;

assign tmp_data_7_V_fu_2333_p2 = pool_window_1_V_61_fu_2245_p3;

assign tmp_data_7_V_fu_2333_p3 = pool_window_2_V_61_fu_2256_p3;

assign tmp_data_7_V_fu_2333_p4 = pool_window_3_V_61_fu_2268_p3;

assign tmp_data_7_V_fu_2333_p5 = ((icmp_ln1496_89_fu_2315_p2[0:0] === 1'b1) ? select_ln65_145_fu_2299_p3 : zext_ln65_30_fu_2321_p1);

assign tmp_data_8_V_fu_2448_p1 = pool_window_0_V_63_fu_2348_p3;

assign tmp_data_8_V_fu_2448_p2 = pool_window_1_V_63_fu_2360_p3;

assign tmp_data_8_V_fu_2448_p3 = pool_window_2_V_63_fu_2371_p3;

assign tmp_data_8_V_fu_2448_p4 = pool_window_3_V_63_fu_2383_p3;

assign tmp_data_8_V_fu_2448_p5 = ((icmp_ln1496_91_fu_2430_p2[0:0] === 1'b1) ? select_ln65_147_fu_2414_p3 : zext_ln65_31_fu_2436_p1);

assign tmp_data_9_V_fu_2563_p1 = pool_window_0_V_65_fu_2463_p3;

assign tmp_data_9_V_fu_2563_p2 = pool_window_1_V_65_fu_2475_p3;

assign tmp_data_9_V_fu_2563_p3 = pool_window_2_V_65_fu_2486_p3;

assign tmp_data_9_V_fu_2563_p4 = pool_window_3_V_65_fu_2498_p3;

assign tmp_data_9_V_fu_2563_p5 = ((icmp_ln1496_93_fu_2545_p2[0:0] === 1'b1) ? select_ln65_149_fu_2529_p3 : zext_ln65_32_fu_2551_p1);

assign zext_ln65_24_fu_1631_p1 = icmp_ln1496_1_fu_1589_p2;

assign zext_ln65_25_fu_1746_p1 = icmp_ln1496_2_fu_1704_p2;

assign zext_ln65_26_fu_1861_p1 = icmp_ln1496_78_fu_1819_p2;

assign zext_ln65_27_fu_1976_p1 = icmp_ln1496_81_fu_1934_p2;

assign zext_ln65_28_fu_2091_p1 = icmp_ln1496_5_fu_2049_p2;

assign zext_ln65_29_fu_2206_p1 = icmp_ln1496_6_fu_2164_p2;

assign zext_ln65_30_fu_2321_p1 = icmp_ln1496_7_fu_2279_p2;

assign zext_ln65_31_fu_2436_p1 = icmp_ln1496_8_fu_2394_p2;

assign zext_ln65_32_fu_2551_p1 = icmp_ln1496_9_fu_2509_p2;

assign zext_ln65_33_fu_2666_p1 = icmp_ln1496_10_fu_2624_p2;

assign zext_ln65_34_fu_2781_p1 = icmp_ln1496_11_fu_2739_p2;

assign zext_ln65_35_fu_2896_p1 = icmp_ln1496_12_fu_2854_p2;

assign zext_ln65_36_fu_3011_p1 = icmp_ln1496_13_fu_2969_p2;

assign zext_ln65_37_fu_3126_p1 = icmp_ln1496_14_fu_3084_p2;

assign zext_ln65_38_fu_3241_p1 = icmp_ln1496_15_fu_3199_p2;

assign zext_ln65_fu_1516_p1 = icmp_ln1496_fu_1474_p2;

endmodule //pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config9_s
