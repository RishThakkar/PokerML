// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config25_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_blk_n,
        res_V_data_1_V_blk_n,
        res_V_data_2_V_blk_n,
        res_V_data_3_V_blk_n,
        res_V_data_4_V_blk_n,
        res_V_data_5_V_blk_n,
        res_V_data_6_V_blk_n,
        res_V_data_7_V_blk_n,
        res_V_data_8_V_blk_n,
        res_V_data_9_V_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 10'd1;
parameter    ap_ST_fsm_pp0_stage1 = 10'd2;
parameter    ap_ST_fsm_pp0_stage2 = 10'd4;
parameter    ap_ST_fsm_pp0_stage3 = 10'd8;
parameter    ap_ST_fsm_pp0_stage4 = 10'd16;
parameter    ap_ST_fsm_pp0_stage5 = 10'd32;
parameter    ap_ST_fsm_pp0_stage6 = 10'd64;
parameter    ap_ST_fsm_pp0_stage7 = 10'd128;
parameter    ap_ST_fsm_pp0_stage8 = 10'd256;
parameter    ap_ST_fsm_pp0_stage9 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_blk_n;
output   res_V_data_1_V_blk_n;
output   res_V_data_2_V_blk_n;
output   res_V_data_3_V_blk_n;
output   res_V_data_4_V_blk_n;
output   res_V_data_5_V_blk_n;
output   res_V_data_6_V_blk_n;
output   res_V_data_7_V_blk_n;
output   res_V_data_8_V_blk_n;
output   res_V_data_9_V_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_blk_n;
reg res_V_data_1_V_blk_n;
reg res_V_data_2_V_blk_n;
reg res_V_data_3_V_blk_n;
reg res_V_data_4_V_blk_n;
reg res_V_data_5_V_blk_n;
reg res_V_data_6_V_blk_n;
reg res_V_data_7_V_blk_n;
reg res_V_data_8_V_blk_n;
reg res_V_data_9_V_blk_n;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_state20_pp0_stage9_iter1;
wire    ap_block_pp0_stage9_11001;
reg   [9:0] exp_table5_address0;
reg    exp_table5_ce0;
wire   [16:0] exp_table5_q0;
wire   [9:0] invert_table6_address0;
reg    invert_table6_ce0;
wire   [17:0] invert_table6_q0;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    io_acc_block_signal_op40;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state21_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg  signed [15:0] data_array_0_V_reg_2086;
reg  signed [15:0] data_array_1_V_reg_2092;
reg  signed [15:0] data_array_2_V_reg_2098;
reg  signed [15:0] data_array_3_V_reg_2104;
reg  signed [15:0] data_array_4_V_reg_2110;
reg  signed [15:0] data_array_5_V_reg_2116;
reg  signed [15:0] data_array_6_V_reg_2122;
reg  signed [15:0] data_array_7_V_reg_2128;
reg  signed [15:0] data_array_8_V_reg_2134;
reg  signed [15:0] data_array_9_V_reg_2141;
wire   [0:0] icmp_ln1496_fu_668_p2;
reg   [0:0] icmp_ln1496_reg_2148;
wire   [0:0] icmp_ln1496_1_fu_674_p2;
reg   [0:0] icmp_ln1496_1_reg_2153;
wire   [0:0] icmp_ln1496_3_fu_680_p2;
reg   [0:0] icmp_ln1496_3_reg_2158;
wire   [0:0] icmp_ln1496_4_fu_686_p2;
reg   [0:0] icmp_ln1496_4_reg_2163;
wire   [15:0] select_ln65_6_fu_746_p3;
reg   [15:0] select_ln65_6_reg_2168;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_state22_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [15:0] select_ln65_7_fu_758_p3;
reg   [15:0] select_ln65_7_reg_2174;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_state23_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [9:0] y_V_1_fu_1393_p3;
reg   [9:0] y_V_1_reg_2185;
wire   [9:0] y_V_2_fu_1427_p3;
reg   [9:0] y_V_2_reg_2190;
wire   [9:0] y_V_3_fu_1461_p3;
reg   [9:0] y_V_3_reg_2195;
wire   [9:0] y_V_4_fu_1495_p3;
reg   [9:0] y_V_4_reg_2200;
wire   [9:0] y_V_5_fu_1529_p3;
reg   [9:0] y_V_5_reg_2205;
wire   [9:0] y_V_6_fu_1563_p3;
reg   [9:0] y_V_6_reg_2210;
wire   [9:0] y_V_7_fu_1597_p3;
reg   [9:0] y_V_7_reg_2215;
wire   [9:0] y_V_8_fu_1631_p3;
reg   [9:0] y_V_8_reg_2220;
wire   [9:0] y_V_9_fu_1665_p3;
reg   [9:0] y_V_9_reg_2225;
reg   [16:0] exp_res_0_V_1_reg_2230;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state14_pp0_stage3_iter1;
wire    ap_block_state24_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
reg   [16:0] exp_res_0_V_1_reg_2230_pp0_iter1_reg;
reg   [16:0] exp_res_1_V_1_reg_2241;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state15_pp0_stage4_iter1;
wire    ap_block_state25_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
reg   [16:0] exp_res_1_V_1_reg_2241_pp0_iter1_reg;
reg   [16:0] exp_res_2_V_1_reg_2252;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state16_pp0_stage5_iter1;
wire    ap_block_state26_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_11001;
reg   [16:0] exp_res_2_V_1_reg_2252_pp0_iter1_reg;
reg   [16:0] exp_res_3_V_1_reg_2263;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state17_pp0_stage6_iter1;
wire    ap_block_state27_pp0_stage6_iter2;
wire    ap_block_pp0_stage6_11001;
reg   [16:0] exp_res_3_V_1_reg_2263_pp0_iter1_reg;
reg   [16:0] exp_res_4_V_1_reg_2274;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state18_pp0_stage7_iter1;
wire    ap_block_state28_pp0_stage7_iter2;
wire    ap_block_pp0_stage7_11001;
reg   [16:0] exp_res_4_V_1_reg_2274_pp0_iter1_reg;
reg   [16:0] exp_res_5_V_1_reg_2284;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state19_pp0_stage8_iter1;
wire    io_acc_block_signal_op378;
reg    ap_block_state29_pp0_stage8_iter2;
reg    ap_block_pp0_stage8_11001;
reg   [16:0] exp_res_5_V_1_reg_2284_pp0_iter1_reg;
reg   [16:0] exp_res_6_V_1_reg_2294;
reg   [16:0] exp_res_6_V_1_reg_2294_pp0_iter1_reg;
reg   [16:0] exp_res_7_V_1_reg_2304;
reg   [16:0] exp_res_7_V_1_reg_2304_pp0_iter2_reg;
reg   [16:0] exp_res_8_V_1_reg_2314;
reg   [16:0] exp_res_8_V_1_reg_2314_pp0_iter2_reg;
reg   [16:0] exp_res_9_V_1_reg_2326;
reg   [16:0] exp_res_9_V_1_reg_2326_pp0_iter2_reg;
wire   [17:0] grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_return;
reg  signed [17:0] p_Val2_19_reg_2333;
reg  signed [17:0] p_Val2_1_reg_2339;
wire   [9:0] y_V_10_fu_1969_p3;
reg   [9:0] y_V_10_reg_2345;
wire  signed [25:0] sext_ln241_fu_1981_p1;
reg  signed [25:0] sext_ln241_reg_2355;
reg   [15:0] tmp_data_0_V_reg_2360;
reg   [15:0] tmp_data_1_V_reg_2365;
reg   [15:0] tmp_data_2_V_reg_2370;
reg   [15:0] tmp_data_3_V_reg_2375;
reg   [15:0] tmp_data_4_V_reg_2380;
reg   [15:0] tmp_data_5_V_reg_2385;
reg   [15:0] tmp_data_6_V_reg_2390;
reg   [15:0] tmp_data_7_V_reg_2395;
reg   [15:0] tmp_data_8_V_reg_2400;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage8_subdone;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_start;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_done;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_idle;
wire    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_ready;
reg   [4:0] grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_x_V_offset;
reg    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_ce;
wire    ap_block_state4_pp0_stage3_iter0_ignore_call233;
wire    ap_block_state14_pp0_stage3_iter1_ignore_call233;
wire    ap_block_state24_pp0_stage3_iter2_ignore_call233;
wire    ap_block_pp0_stage3_11001_ignoreCallOp250;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call233;
wire    ap_block_state15_pp0_stage4_iter1_ignore_call233;
wire    ap_block_state25_pp0_stage4_iter2_ignore_call233;
wire    ap_block_pp0_stage4_11001_ignoreCallOp251;
wire    ap_block_state6_pp0_stage5_iter0_ignore_call234;
wire    ap_block_state16_pp0_stage5_iter1_ignore_call234;
wire    ap_block_state26_pp0_stage5_iter2_ignore_call234;
wire    ap_block_pp0_stage5_11001_ignoreCallOp252;
wire    ap_block_state7_pp0_stage6_iter0_ignore_call234;
wire    ap_block_state17_pp0_stage6_iter1_ignore_call234;
wire    ap_block_state27_pp0_stage6_iter2_ignore_call234;
wire    ap_block_pp0_stage6_11001_ignoreCallOp253;
reg    grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_start_reg;
reg   [16:0] exp_res_0_V_fu_366;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage5;
reg   [16:0] exp_res_1_V_fu_370;
reg   [16:0] exp_res_2_V_fu_374;
reg   [16:0] exp_res_3_V_fu_378;
reg   [16:0] exp_res_4_V_fu_382;
reg   [16:0] exp_res_5_V_fu_386;
reg   [16:0] exp_res_6_V_fu_390;
reg   [16:0] exp_res_7_V_fu_394;
reg   [16:0] exp_res_8_V_fu_398;
reg   [16:0] exp_res_9_V_fu_402;
wire   [63:0] zext_ln225_fu_1362_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln225_1_fu_1673_p1;
wire   [63:0] zext_ln225_2_fu_1677_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln225_3_fu_1681_p1;
wire   [63:0] zext_ln225_4_fu_1685_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln225_5_fu_1710_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln225_6_fu_1719_p1;
wire   [63:0] zext_ln225_7_fu_1728_p1;
wire    ap_block_pp0_stage9;
wire   [63:0] zext_ln225_8_fu_1737_p1;
wire   [63:0] zext_ln225_9_fu_1746_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln235_fu_1977_p1;
reg    ap_block_pp0_stage8_01001;
reg   [16:0] grp_fu_562_p0;
wire   [25:0] zext_ln1118_fu_1986_p1;
wire   [25:0] zext_ln1118_1_fu_1990_p1;
wire   [25:0] zext_ln1118_2_fu_1994_p1;
wire   [25:0] zext_ln1118_3_fu_1998_p1;
wire   [25:0] zext_ln1118_4_fu_2002_p1;
wire   [25:0] zext_ln1118_5_fu_2006_p1;
wire   [25:0] zext_ln1118_6_fu_2010_p1;
wire   [25:0] zext_ln1118_7_fu_2014_p1;
wire   [25:0] zext_ln1118_8_fu_2018_p1;
wire   [25:0] zext_ln1118_9_fu_2022_p1;
reg  signed [17:0] grp_fu_562_p1;
wire   [25:0] grp_fu_562_p2;
wire  signed [15:0] icmp_ln1496_fu_668_p0;
wire  signed [15:0] icmp_ln1496_fu_668_p1;
wire  signed [15:0] icmp_ln1496_1_fu_674_p0;
wire  signed [15:0] icmp_ln1496_1_fu_674_p1;
wire  signed [15:0] icmp_ln1496_3_fu_680_p0;
wire  signed [15:0] icmp_ln1496_3_fu_680_p1;
wire  signed [15:0] icmp_ln1496_4_fu_686_p0;
wire  signed [15:0] icmp_ln1496_4_fu_686_p1;
wire   [15:0] select_ln65_fu_692_p3;
wire   [15:0] select_ln65_1_fu_697_p3;
wire   [0:0] icmp_ln1496_2_fu_702_p2;
wire   [15:0] select_ln65_3_fu_716_p3;
wire   [15:0] select_ln65_4_fu_721_p3;
wire   [0:0] icmp_ln1496_5_fu_726_p2;
wire   [15:0] select_ln65_2_fu_708_p3;
wire   [15:0] select_ln65_5_fu_732_p3;
wire   [0:0] icmp_ln1496_6_fu_740_p2;
wire   [0:0] icmp_ln1496_7_fu_754_p2;
wire   [0:0] icmp_ln1496_8_fu_764_p2;
wire   [15:0] x_max_V_fu_768_p3;
wire  signed [16:0] sext_ln703_fu_774_p1;
wire  signed [16:0] sext_ln703_1_fu_777_p1;
wire   [16:0] sub_ln1193_fu_781_p2;
wire   [0:0] tmp_22_fu_795_p3;
wire   [0:0] tmp_21_fu_787_p3;
wire   [0:0] xor_ln786_fu_803_p2;
wire   [0:0] xor_ln340_fu_821_p2;
wire  signed [16:0] sext_ln703_2_fu_833_p1;
wire   [16:0] sub_ln1193_1_fu_836_p2;
wire   [0:0] tmp_24_fu_850_p3;
wire   [0:0] tmp_23_fu_842_p3;
wire   [0:0] xor_ln786_1_fu_858_p2;
wire   [0:0] xor_ln340_1_fu_876_p2;
wire  signed [16:0] sext_ln703_3_fu_888_p1;
wire   [16:0] sub_ln1193_2_fu_891_p2;
wire   [0:0] tmp_26_fu_905_p3;
wire   [0:0] tmp_25_fu_897_p3;
wire   [0:0] xor_ln786_2_fu_913_p2;
wire   [0:0] xor_ln340_2_fu_931_p2;
wire  signed [16:0] sext_ln703_4_fu_943_p1;
wire   [16:0] sub_ln1193_3_fu_946_p2;
wire   [0:0] tmp_28_fu_960_p3;
wire   [0:0] tmp_27_fu_952_p3;
wire   [0:0] xor_ln786_3_fu_968_p2;
wire   [0:0] xor_ln340_3_fu_986_p2;
wire  signed [16:0] sext_ln703_5_fu_998_p1;
wire   [16:0] sub_ln1193_4_fu_1001_p2;
wire   [0:0] tmp_30_fu_1015_p3;
wire   [0:0] tmp_29_fu_1007_p3;
wire   [0:0] xor_ln786_4_fu_1023_p2;
wire   [0:0] xor_ln340_4_fu_1041_p2;
wire  signed [16:0] sext_ln703_6_fu_1053_p1;
wire   [16:0] sub_ln1193_5_fu_1056_p2;
wire   [0:0] tmp_32_fu_1070_p3;
wire   [0:0] tmp_31_fu_1062_p3;
wire   [0:0] xor_ln786_5_fu_1078_p2;
wire   [0:0] xor_ln340_5_fu_1096_p2;
wire  signed [16:0] sext_ln703_7_fu_1108_p1;
wire   [16:0] sub_ln1193_6_fu_1111_p2;
wire   [0:0] tmp_34_fu_1125_p3;
wire   [0:0] tmp_33_fu_1117_p3;
wire   [0:0] xor_ln786_6_fu_1133_p2;
wire   [0:0] xor_ln340_6_fu_1151_p2;
wire  signed [16:0] sext_ln703_8_fu_1163_p1;
wire   [16:0] sub_ln1193_7_fu_1166_p2;
wire   [0:0] tmp_36_fu_1180_p3;
wire   [0:0] tmp_35_fu_1172_p3;
wire   [0:0] xor_ln786_7_fu_1188_p2;
wire   [0:0] xor_ln340_7_fu_1206_p2;
wire  signed [16:0] sext_ln703_9_fu_1218_p1;
wire   [16:0] sub_ln1193_8_fu_1221_p2;
wire   [0:0] tmp_38_fu_1235_p3;
wire   [0:0] tmp_37_fu_1227_p3;
wire   [0:0] xor_ln786_8_fu_1243_p2;
wire   [0:0] xor_ln340_8_fu_1261_p2;
wire  signed [16:0] sext_ln703_10_fu_1273_p1;
wire   [16:0] sub_ln1193_9_fu_1276_p2;
wire   [0:0] tmp_40_fu_1290_p3;
wire   [0:0] tmp_39_fu_1282_p3;
wire   [0:0] xor_ln786_9_fu_1298_p2;
wire   [0:0] xor_ln340_9_fu_1316_p2;
wire   [0:0] xor_ln340_10_fu_815_p2;
wire   [9:0] tmp_fu_1328_p4;
wire   [0:0] and_ln786_fu_809_p2;
wire   [0:0] or_ln340_fu_827_p2;
wire   [9:0] select_ln340_fu_1338_p3;
wire   [9:0] select_ln388_fu_1346_p3;
wire   [9:0] y_V_fu_1354_p3;
wire   [0:0] xor_ln340_11_fu_870_p2;
wire   [9:0] tmp_11_fu_1367_p4;
wire   [0:0] and_ln786_1_fu_864_p2;
wire   [0:0] or_ln340_1_fu_882_p2;
wire   [9:0] select_ln340_2_fu_1377_p3;
wire   [9:0] select_ln388_1_fu_1385_p3;
wire   [0:0] xor_ln340_12_fu_925_p2;
wire   [9:0] tmp_12_fu_1401_p4;
wire   [0:0] and_ln786_2_fu_919_p2;
wire   [0:0] or_ln340_2_fu_937_p2;
wire   [9:0] select_ln340_4_fu_1411_p3;
wire   [9:0] select_ln388_2_fu_1419_p3;
wire   [0:0] xor_ln340_13_fu_980_p2;
wire   [9:0] tmp_13_fu_1435_p4;
wire   [0:0] and_ln786_3_fu_974_p2;
wire   [0:0] or_ln340_3_fu_992_p2;
wire   [9:0] select_ln340_6_fu_1445_p3;
wire   [9:0] select_ln388_3_fu_1453_p3;
wire   [0:0] xor_ln340_14_fu_1035_p2;
wire   [9:0] tmp_14_fu_1469_p4;
wire   [0:0] and_ln786_4_fu_1029_p2;
wire   [0:0] or_ln340_4_fu_1047_p2;
wire   [9:0] select_ln340_8_fu_1479_p3;
wire   [9:0] select_ln388_4_fu_1487_p3;
wire   [0:0] xor_ln340_15_fu_1090_p2;
wire   [9:0] tmp_15_fu_1503_p4;
wire   [0:0] and_ln786_5_fu_1084_p2;
wire   [0:0] or_ln340_5_fu_1102_p2;
wire   [9:0] select_ln340_10_fu_1513_p3;
wire   [9:0] select_ln388_5_fu_1521_p3;
wire   [0:0] xor_ln340_16_fu_1145_p2;
wire   [9:0] tmp_16_fu_1537_p4;
wire   [0:0] and_ln786_6_fu_1139_p2;
wire   [0:0] or_ln340_6_fu_1157_p2;
wire   [9:0] select_ln340_12_fu_1547_p3;
wire   [9:0] select_ln388_6_fu_1555_p3;
wire   [0:0] xor_ln340_17_fu_1200_p2;
wire   [9:0] tmp_17_fu_1571_p4;
wire   [0:0] and_ln786_7_fu_1194_p2;
wire   [0:0] or_ln340_7_fu_1212_p2;
wire   [9:0] select_ln340_14_fu_1581_p3;
wire   [9:0] select_ln388_7_fu_1589_p3;
wire   [0:0] xor_ln340_18_fu_1255_p2;
wire   [9:0] tmp_18_fu_1605_p4;
wire   [0:0] and_ln786_8_fu_1249_p2;
wire   [0:0] or_ln340_8_fu_1267_p2;
wire   [9:0] select_ln340_16_fu_1615_p3;
wire   [9:0] select_ln388_8_fu_1623_p3;
wire   [0:0] xor_ln340_19_fu_1310_p2;
wire   [9:0] tmp_19_fu_1639_p4;
wire   [0:0] and_ln786_9_fu_1304_p2;
wire   [0:0] or_ln340_9_fu_1322_p2;
wire   [9:0] select_ln340_18_fu_1649_p3;
wire   [9:0] select_ln388_9_fu_1657_p3;
wire  signed [18:0] lhs_V_fu_1755_p1;
wire  signed [18:0] rhs_V_fu_1758_p1;
wire   [18:0] ret_V_fu_1761_p2;
wire   [17:0] p_Val2_22_fu_1775_p2;
wire   [0:0] p_Result_18_fu_1779_p3;
wire   [0:0] p_Result_s_fu_1767_p3;
wire   [0:0] xor_ln786_10_fu_1787_p2;
wire   [0:0] xor_ln340_21_fu_1805_p2;
wire   [0:0] xor_ln340_20_fu_1799_p2;
wire   [0:0] underflow_fu_1793_p2;
wire   [0:0] or_ln340_10_fu_1811_p2;
wire   [17:0] select_ln340_20_fu_1817_p3;
wire   [17:0] select_ln388_10_fu_1825_p3;
wire   [17:0] p_Val2_24_fu_1844_p1;
wire   [17:0] p_Val2_23_fu_1841_p1;
wire   [17:0] p_Val2_25_fu_1847_p2;
wire   [0:0] p_Result_19_fu_1857_p3;
wire   [16:0] add_ln746_fu_1853_p2;
wire   [16:0] p_Val2_27_fu_1865_p3;
wire  signed [17:0] p_Val2_26_fu_1833_p3;
wire  signed [18:0] lhs_V_1_fu_1877_p1;
wire   [18:0] rhs_V_1_fu_1881_p1;
wire   [18:0] ret_V_1_fu_1885_p2;
wire   [17:0] zext_ln746_fu_1873_p1;
wire   [17:0] p_Val2_29_fu_1899_p2;
wire   [0:0] p_Result_21_fu_1905_p3;
wire   [0:0] p_Result_20_fu_1891_p3;
wire   [0:0] xor_ln786_11_fu_1913_p2;
wire   [0:0] xor_ln340_23_fu_1931_p2;
wire   [0:0] xor_ln340_22_fu_1925_p2;
wire   [9:0] tmp_20_fu_1943_p4;
wire   [0:0] underflow_1_fu_1919_p2;
wire   [0:0] or_ln340_11_fu_1937_p2;
wire   [9:0] select_ln340_22_fu_1953_p3;
wire   [9:0] select_ln388_11_fu_1961_p3;
reg   [9:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_start_reg = 1'b0;
end

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config25_s_exp_tabcdu #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table5_address0),
    .ce0(exp_table5_ce0),
    .q0(exp_table5_q0)
);

softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config25_s_invert_ceu #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table6_address0),
    .ce0(invert_table6_ce0),
    .q0(invert_table6_q0)
);

reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_start),
    .ap_done(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_done),
    .ap_idle(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_idle),
    .ap_ready(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_ready),
    .x_0_V(exp_res_0_V_fu_366),
    .x_1_V(exp_res_1_V_fu_370),
    .x_2_V(exp_res_2_V_fu_374),
    .x_3_V(exp_res_3_V_fu_378),
    .x_4_V(exp_res_4_V_fu_382),
    .x_5_V(exp_res_5_V_fu_386),
    .x_6_V(exp_res_6_V_fu_390),
    .x_7_V(exp_res_7_V_fu_394),
    .x_8_V(exp_res_8_V_fu_398),
    .x_9_V(exp_res_9_V_fu_402),
    .x_V_offset(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_x_V_offset),
    .ap_return(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_return),
    .ap_ce(grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_start_reg <= 1'b1;
        end else if ((grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_ready == 1'b1)) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_array_0_V_reg_2086 <= data_V_data_0_V_dout;
        data_array_1_V_reg_2092 <= data_V_data_1_V_dout;
        data_array_2_V_reg_2098 <= data_V_data_2_V_dout;
        data_array_3_V_reg_2104 <= data_V_data_3_V_dout;
        data_array_4_V_reg_2110 <= data_V_data_4_V_dout;
        data_array_5_V_reg_2116 <= data_V_data_5_V_dout;
        data_array_6_V_reg_2122 <= data_V_data_6_V_dout;
        data_array_7_V_reg_2128 <= data_V_data_7_V_dout;
        data_array_8_V_reg_2134 <= data_V_data_8_V_dout;
        data_array_9_V_reg_2141 <= data_V_data_9_V_dout;
        exp_res_7_V_1_reg_2304_pp0_iter2_reg <= exp_res_7_V_1_reg_2304;
        icmp_ln1496_1_reg_2153 <= icmp_ln1496_1_fu_674_p2;
        icmp_ln1496_3_reg_2158 <= icmp_ln1496_3_fu_680_p2;
        icmp_ln1496_4_reg_2163 <= icmp_ln1496_4_fu_686_p2;
        icmp_ln1496_reg_2148 <= icmp_ln1496_fu_668_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_0_V_1_reg_2230 <= exp_table5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_0_V_1_reg_2230_pp0_iter1_reg <= exp_res_0_V_1_reg_2230;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_0_V_fu_366 <= exp_res_0_V_1_reg_2230;
        exp_res_1_V_fu_370 <= exp_res_1_V_1_reg_2241;
        exp_res_2_V_fu_374 <= exp_res_2_V_1_reg_2252;
        exp_res_3_V_fu_378 <= exp_res_3_V_1_reg_2263;
        exp_res_4_V_1_reg_2274 <= exp_table5_q0;
        exp_res_4_V_fu_382 <= exp_table5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_1_V_1_reg_2241 <= exp_table5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        exp_res_1_V_1_reg_2241_pp0_iter1_reg <= exp_res_1_V_1_reg_2241;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_2_V_1_reg_2252 <= exp_table5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        exp_res_2_V_1_reg_2252_pp0_iter1_reg <= exp_res_2_V_1_reg_2252;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_3_V_1_reg_2263 <= exp_table5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        exp_res_3_V_1_reg_2263_pp0_iter1_reg <= exp_res_3_V_1_reg_2263;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        exp_res_4_V_1_reg_2274_pp0_iter1_reg <= exp_res_4_V_1_reg_2274;
        y_V_10_reg_2345 <= y_V_10_fu_1969_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        exp_res_5_V_1_reg_2284 <= exp_table5_q0;
        exp_res_5_V_fu_386 <= exp_table5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        exp_res_5_V_1_reg_2284_pp0_iter1_reg <= exp_res_5_V_1_reg_2284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_res_6_V_1_reg_2294 <= exp_table5_q0;
        exp_res_6_V_fu_390 <= exp_table5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        exp_res_6_V_1_reg_2294_pp0_iter1_reg <= exp_res_6_V_1_reg_2294;
        sext_ln241_reg_2355 <= sext_ln241_fu_1981_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_7_V_1_reg_2304 <= exp_table5_q0;
        exp_res_7_V_fu_394 <= exp_table5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_8_V_1_reg_2314 <= exp_table5_q0;
        exp_res_8_V_fu_398 <= exp_table5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_res_8_V_1_reg_2314_pp0_iter2_reg <= exp_res_8_V_1_reg_2314;
        select_ln65_6_reg_2168 <= select_ln65_6_fu_746_p3;
        select_ln65_7_reg_2174 <= select_ln65_7_fu_758_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_9_V_1_reg_2326 <= exp_table5_q0;
        exp_res_9_V_fu_402 <= exp_table5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_res_9_V_1_reg_2326_pp0_iter2_reg <= exp_res_9_V_1_reg_2326;
        y_V_1_reg_2185 <= y_V_1_fu_1393_p3;
        y_V_2_reg_2190 <= y_V_2_fu_1427_p3;
        y_V_3_reg_2195 <= y_V_3_fu_1461_p3;
        y_V_4_reg_2200 <= y_V_4_fu_1495_p3;
        y_V_5_reg_2205 <= y_V_5_fu_1529_p3;
        y_V_6_reg_2210 <= y_V_6_fu_1563_p3;
        y_V_7_reg_2215 <= y_V_7_fu_1597_p3;
        y_V_8_reg_2220 <= y_V_8_fu_1631_p3;
        y_V_9_reg_2225 <= y_V_9_fu_1665_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        p_Val2_19_reg_2333 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        p_Val2_1_reg_2339 <= grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tmp_data_0_V_reg_2360 <= {{grp_fu_562_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_1_V_reg_2365 <= {{grp_fu_562_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_data_2_V_reg_2370 <= {{grp_fu_562_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_data_3_V_reg_2375 <= {{grp_fu_562_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_data_4_V_reg_2380 <= {{grp_fu_562_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_data_5_V_reg_2385 <= {{grp_fu_562_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_data_6_V_reg_2390 <= {{grp_fu_562_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        tmp_data_7_V_reg_2395 <= {{grp_fu_562_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_data_8_V_reg_2400 <= {{grp_fu_562_p2[25:10]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_table5_address0 = zext_ln225_9_fu_1746_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table5_address0 = zext_ln225_8_fu_1737_p1;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table5_address0 = zext_ln225_7_fu_1728_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        exp_table5_address0 = zext_ln225_6_fu_1719_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table5_address0 = zext_ln225_5_fu_1710_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table5_address0 = zext_ln225_4_fu_1685_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table5_address0 = zext_ln225_3_fu_1681_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table5_address0 = zext_ln225_2_fu_1677_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table5_address0 = zext_ln225_1_fu_1673_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_table5_address0 = zext_ln225_fu_1362_p1;
    end else begin
        exp_table5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        exp_table5_ce0 = 1'b1;
    end else begin
        exp_table5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        grp_fu_562_p0 = zext_ln1118_9_fu_2022_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_562_p0 = zext_ln1118_8_fu_2018_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_562_p0 = zext_ln1118_7_fu_2014_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_562_p0 = zext_ln1118_6_fu_2010_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_562_p0 = zext_ln1118_5_fu_2006_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_562_p0 = zext_ln1118_4_fu_2002_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_562_p0 = zext_ln1118_3_fu_1998_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_562_p0 = zext_ln1118_2_fu_1994_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_562_p0 = zext_ln1118_1_fu_1990_p1;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_562_p0 = zext_ln1118_fu_1986_p1;
    end else begin
        grp_fu_562_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8)))) begin
        grp_fu_562_p1 = sext_ln241_reg_2355;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_562_p1 = sext_ln241_fu_1981_p1;
    end else begin
        grp_fu_562_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001_ignoreCallOp253) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001_ignoreCallOp252) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp251) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp250) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_ce = 1'b1;
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_x_V_offset = 5'd4;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_x_V_offset = 5'd0;
        end else begin
            grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_x_V_offset = 'bx;
        end
    end else begin
        grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_x_V_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        invert_table6_ce0 = 1'b1;
    end else begin
        invert_table6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln746_fu_1853_p2 = (exp_res_8_V_1_reg_2314 + exp_res_9_V_1_reg_2326);

assign and_ln786_1_fu_864_p2 = (xor_ln786_1_fu_858_p2 & tmp_23_fu_842_p3);

assign and_ln786_2_fu_919_p2 = (xor_ln786_2_fu_913_p2 & tmp_25_fu_897_p3);

assign and_ln786_3_fu_974_p2 = (xor_ln786_3_fu_968_p2 & tmp_27_fu_952_p3);

assign and_ln786_4_fu_1029_p2 = (xor_ln786_4_fu_1023_p2 & tmp_29_fu_1007_p3);

assign and_ln786_5_fu_1084_p2 = (xor_ln786_5_fu_1078_p2 & tmp_31_fu_1062_p3);

assign and_ln786_6_fu_1139_p2 = (xor_ln786_6_fu_1133_p2 & tmp_33_fu_1117_p3);

assign and_ln786_7_fu_1194_p2 = (xor_ln786_7_fu_1188_p2 & tmp_35_fu_1172_p3);

assign and_ln786_8_fu_1249_p2 = (xor_ln786_8_fu_1243_p2 & tmp_37_fu_1227_p3);

assign and_ln786_9_fu_1304_p2 = (xor_ln786_9_fu_1298_p2 & tmp_39_fu_1282_p3);

assign and_ln786_fu_809_p2 = (xor_ln786_fu_803_p2 & tmp_21_fu_787_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op40 == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((io_acc_block_signal_op40 == 1'b0) | (ap_start == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001_ignoreCallOp250 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp251 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001_ignoreCallOp252 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001_ignoreCallOp253 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_01001 = ((io_acc_block_signal_op378 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((io_acc_block_signal_op378 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((io_acc_block_signal_op378 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter1_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage6_iter1_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op40 == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state20_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage3_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage4_iter2_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage5_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage6_iter2_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_pp0_stage8_iter2 = (io_acc_block_signal_op378 == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call233 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0_ignore_call234 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_562_p2 = ($signed({{1'b0}, {grp_fu_562_p0}}) * $signed(grp_fu_562_p1));

assign grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_start = grp_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s_fu_600_ap_start_reg;

assign icmp_ln1496_1_fu_674_p0 = data_V_data_2_V_dout;

assign icmp_ln1496_1_fu_674_p1 = data_V_data_3_V_dout;

assign icmp_ln1496_1_fu_674_p2 = (($signed(icmp_ln1496_1_fu_674_p0) < $signed(icmp_ln1496_1_fu_674_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_702_p2 = (($signed(select_ln65_fu_692_p3) < $signed(select_ln65_1_fu_697_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_680_p0 = data_V_data_4_V_dout;

assign icmp_ln1496_3_fu_680_p1 = data_V_data_5_V_dout;

assign icmp_ln1496_3_fu_680_p2 = (($signed(icmp_ln1496_3_fu_680_p0) < $signed(icmp_ln1496_3_fu_680_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_686_p0 = data_V_data_6_V_dout;

assign icmp_ln1496_4_fu_686_p1 = data_V_data_7_V_dout;

assign icmp_ln1496_4_fu_686_p2 = (($signed(icmp_ln1496_4_fu_686_p0) < $signed(icmp_ln1496_4_fu_686_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_726_p2 = (($signed(select_ln65_3_fu_716_p3) < $signed(select_ln65_4_fu_721_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_740_p2 = (($signed(select_ln65_2_fu_708_p3) < $signed(select_ln65_5_fu_732_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_754_p2 = (($signed(data_array_8_V_reg_2134) < $signed(data_array_9_V_reg_2141)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_764_p2 = (($signed(select_ln65_6_reg_2168) < $signed(select_ln65_7_reg_2174)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_668_p0 = data_V_data_0_V_dout;

assign icmp_ln1496_fu_668_p1 = data_V_data_1_V_dout;

assign icmp_ln1496_fu_668_p2 = (($signed(icmp_ln1496_fu_668_p0) < $signed(icmp_ln1496_fu_668_p1)) ? 1'b1 : 1'b0);

assign invert_table6_address0 = zext_ln235_fu_1977_p1;

assign io_acc_block_signal_op378 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op40 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign lhs_V_1_fu_1877_p1 = p_Val2_26_fu_1833_p3;

assign lhs_V_fu_1755_p1 = p_Val2_19_reg_2333;

assign or_ln340_10_fu_1811_p2 = (xor_ln340_21_fu_1805_p2 | p_Result_18_fu_1779_p3);

assign or_ln340_11_fu_1937_p2 = (xor_ln340_23_fu_1931_p2 | p_Result_21_fu_1905_p3);

assign or_ln340_1_fu_882_p2 = (xor_ln340_1_fu_876_p2 | tmp_24_fu_850_p3);

assign or_ln340_2_fu_937_p2 = (xor_ln340_2_fu_931_p2 | tmp_26_fu_905_p3);

assign or_ln340_3_fu_992_p2 = (xor_ln340_3_fu_986_p2 | tmp_28_fu_960_p3);

assign or_ln340_4_fu_1047_p2 = (xor_ln340_4_fu_1041_p2 | tmp_30_fu_1015_p3);

assign or_ln340_5_fu_1102_p2 = (xor_ln340_5_fu_1096_p2 | tmp_32_fu_1070_p3);

assign or_ln340_6_fu_1157_p2 = (xor_ln340_6_fu_1151_p2 | tmp_34_fu_1125_p3);

assign or_ln340_7_fu_1212_p2 = (xor_ln340_7_fu_1206_p2 | tmp_36_fu_1180_p3);

assign or_ln340_8_fu_1267_p2 = (xor_ln340_8_fu_1261_p2 | tmp_38_fu_1235_p3);

assign or_ln340_9_fu_1322_p2 = (xor_ln340_9_fu_1316_p2 | tmp_40_fu_1290_p3);

assign or_ln340_fu_827_p2 = (xor_ln340_fu_821_p2 | tmp_22_fu_795_p3);

assign p_Result_18_fu_1779_p3 = p_Val2_22_fu_1775_p2[32'd17];

assign p_Result_19_fu_1857_p3 = p_Val2_25_fu_1847_p2[32'd17];

assign p_Result_20_fu_1891_p3 = ret_V_1_fu_1885_p2[32'd18];

assign p_Result_21_fu_1905_p3 = p_Val2_29_fu_1899_p2[32'd17];

assign p_Result_s_fu_1767_p3 = ret_V_fu_1761_p2[32'd18];

assign p_Val2_22_fu_1775_p2 = ($signed(p_Val2_1_reg_2339) + $signed(p_Val2_19_reg_2333));

assign p_Val2_23_fu_1841_p1 = exp_res_8_V_1_reg_2314;

assign p_Val2_24_fu_1844_p1 = exp_res_9_V_1_reg_2326;

assign p_Val2_25_fu_1847_p2 = (p_Val2_24_fu_1844_p1 + p_Val2_23_fu_1841_p1);

assign p_Val2_26_fu_1833_p3 = ((or_ln340_10_fu_1811_p2[0:0] === 1'b1) ? select_ln340_20_fu_1817_p3 : select_ln388_10_fu_1825_p3);

assign p_Val2_27_fu_1865_p3 = ((p_Result_19_fu_1857_p3[0:0] === 1'b1) ? 17'd131071 : add_ln746_fu_1853_p2);

assign p_Val2_29_fu_1899_p2 = ($signed(zext_ln746_fu_1873_p1) + $signed(p_Val2_26_fu_1833_p3));

assign res_V_data_0_V_din = tmp_data_0_V_reg_2360;

assign res_V_data_1_V_din = tmp_data_1_V_reg_2365;

assign res_V_data_2_V_din = tmp_data_2_V_reg_2370;

assign res_V_data_3_V_din = tmp_data_3_V_reg_2375;

assign res_V_data_4_V_din = tmp_data_4_V_reg_2380;

assign res_V_data_5_V_din = tmp_data_5_V_reg_2385;

assign res_V_data_6_V_din = tmp_data_6_V_reg_2390;

assign res_V_data_7_V_din = tmp_data_7_V_reg_2395;

assign res_V_data_8_V_din = tmp_data_8_V_reg_2400;

assign res_V_data_9_V_din = {{grp_fu_562_p2[25:10]}};

assign ret_V_1_fu_1885_p2 = ($signed(lhs_V_1_fu_1877_p1) + $signed(rhs_V_1_fu_1881_p1));

assign ret_V_fu_1761_p2 = ($signed(lhs_V_fu_1755_p1) + $signed(rhs_V_fu_1758_p1));

assign rhs_V_1_fu_1881_p1 = p_Val2_27_fu_1865_p3;

assign rhs_V_fu_1758_p1 = p_Val2_1_reg_2339;

assign select_ln340_10_fu_1513_p3 = ((xor_ln340_15_fu_1090_p2[0:0] === 1'b1) ? 10'd511 : tmp_15_fu_1503_p4);

assign select_ln340_12_fu_1547_p3 = ((xor_ln340_16_fu_1145_p2[0:0] === 1'b1) ? 10'd511 : tmp_16_fu_1537_p4);

assign select_ln340_14_fu_1581_p3 = ((xor_ln340_17_fu_1200_p2[0:0] === 1'b1) ? 10'd511 : tmp_17_fu_1571_p4);

assign select_ln340_16_fu_1615_p3 = ((xor_ln340_18_fu_1255_p2[0:0] === 1'b1) ? 10'd511 : tmp_18_fu_1605_p4);

assign select_ln340_18_fu_1649_p3 = ((xor_ln340_19_fu_1310_p2[0:0] === 1'b1) ? 10'd511 : tmp_19_fu_1639_p4);

assign select_ln340_20_fu_1817_p3 = ((xor_ln340_20_fu_1799_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_22_fu_1775_p2);

assign select_ln340_22_fu_1953_p3 = ((xor_ln340_22_fu_1925_p2[0:0] === 1'b1) ? 10'd511 : tmp_20_fu_1943_p4);

assign select_ln340_2_fu_1377_p3 = ((xor_ln340_11_fu_870_p2[0:0] === 1'b1) ? 10'd511 : tmp_11_fu_1367_p4);

assign select_ln340_4_fu_1411_p3 = ((xor_ln340_12_fu_925_p2[0:0] === 1'b1) ? 10'd511 : tmp_12_fu_1401_p4);

assign select_ln340_6_fu_1445_p3 = ((xor_ln340_13_fu_980_p2[0:0] === 1'b1) ? 10'd511 : tmp_13_fu_1435_p4);

assign select_ln340_8_fu_1479_p3 = ((xor_ln340_14_fu_1035_p2[0:0] === 1'b1) ? 10'd511 : tmp_14_fu_1469_p4);

assign select_ln340_fu_1338_p3 = ((xor_ln340_10_fu_815_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_1328_p4);

assign select_ln388_10_fu_1825_p3 = ((underflow_fu_1793_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_22_fu_1775_p2);

assign select_ln388_11_fu_1961_p3 = ((underflow_1_fu_1919_p2[0:0] === 1'b1) ? 10'd512 : tmp_20_fu_1943_p4);

assign select_ln388_1_fu_1385_p3 = ((and_ln786_1_fu_864_p2[0:0] === 1'b1) ? 10'd512 : tmp_11_fu_1367_p4);

assign select_ln388_2_fu_1419_p3 = ((and_ln786_2_fu_919_p2[0:0] === 1'b1) ? 10'd512 : tmp_12_fu_1401_p4);

assign select_ln388_3_fu_1453_p3 = ((and_ln786_3_fu_974_p2[0:0] === 1'b1) ? 10'd512 : tmp_13_fu_1435_p4);

assign select_ln388_4_fu_1487_p3 = ((and_ln786_4_fu_1029_p2[0:0] === 1'b1) ? 10'd512 : tmp_14_fu_1469_p4);

assign select_ln388_5_fu_1521_p3 = ((and_ln786_5_fu_1084_p2[0:0] === 1'b1) ? 10'd512 : tmp_15_fu_1503_p4);

assign select_ln388_6_fu_1555_p3 = ((and_ln786_6_fu_1139_p2[0:0] === 1'b1) ? 10'd512 : tmp_16_fu_1537_p4);

assign select_ln388_7_fu_1589_p3 = ((and_ln786_7_fu_1194_p2[0:0] === 1'b1) ? 10'd512 : tmp_17_fu_1571_p4);

assign select_ln388_8_fu_1623_p3 = ((and_ln786_8_fu_1249_p2[0:0] === 1'b1) ? 10'd512 : tmp_18_fu_1605_p4);

assign select_ln388_9_fu_1657_p3 = ((and_ln786_9_fu_1304_p2[0:0] === 1'b1) ? 10'd512 : tmp_19_fu_1639_p4);

assign select_ln388_fu_1346_p3 = ((and_ln786_fu_809_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_1328_p4);

assign select_ln65_1_fu_697_p3 = ((icmp_ln1496_1_reg_2153[0:0] === 1'b1) ? data_array_3_V_reg_2104 : data_array_2_V_reg_2098);

assign select_ln65_2_fu_708_p3 = ((icmp_ln1496_2_fu_702_p2[0:0] === 1'b1) ? select_ln65_1_fu_697_p3 : select_ln65_fu_692_p3);

assign select_ln65_3_fu_716_p3 = ((icmp_ln1496_3_reg_2158[0:0] === 1'b1) ? data_array_5_V_reg_2116 : data_array_4_V_reg_2110);

assign select_ln65_4_fu_721_p3 = ((icmp_ln1496_4_reg_2163[0:0] === 1'b1) ? data_array_7_V_reg_2128 : data_array_6_V_reg_2122);

assign select_ln65_5_fu_732_p3 = ((icmp_ln1496_5_fu_726_p2[0:0] === 1'b1) ? select_ln65_4_fu_721_p3 : select_ln65_3_fu_716_p3);

assign select_ln65_6_fu_746_p3 = ((icmp_ln1496_6_fu_740_p2[0:0] === 1'b1) ? select_ln65_5_fu_732_p3 : select_ln65_2_fu_708_p3);

assign select_ln65_7_fu_758_p3 = ((icmp_ln1496_7_fu_754_p2[0:0] === 1'b1) ? data_array_9_V_reg_2141 : data_array_8_V_reg_2134);

assign select_ln65_fu_692_p3 = ((icmp_ln1496_reg_2148[0:0] === 1'b1) ? data_array_1_V_reg_2092 : data_array_0_V_reg_2086);

assign sext_ln241_fu_1981_p1 = $signed(invert_table6_q0);

assign sext_ln703_10_fu_1273_p1 = data_array_9_V_reg_2141;

assign sext_ln703_1_fu_777_p1 = $signed(x_max_V_fu_768_p3);

assign sext_ln703_2_fu_833_p1 = data_array_1_V_reg_2092;

assign sext_ln703_3_fu_888_p1 = data_array_2_V_reg_2098;

assign sext_ln703_4_fu_943_p1 = data_array_3_V_reg_2104;

assign sext_ln703_5_fu_998_p1 = data_array_4_V_reg_2110;

assign sext_ln703_6_fu_1053_p1 = data_array_5_V_reg_2116;

assign sext_ln703_7_fu_1108_p1 = data_array_6_V_reg_2122;

assign sext_ln703_8_fu_1163_p1 = data_array_7_V_reg_2128;

assign sext_ln703_9_fu_1218_p1 = data_array_8_V_reg_2134;

assign sext_ln703_fu_774_p1 = data_array_0_V_reg_2086;

assign sub_ln1193_1_fu_836_p2 = ($signed(sext_ln703_2_fu_833_p1) - $signed(sext_ln703_1_fu_777_p1));

assign sub_ln1193_2_fu_891_p2 = ($signed(sext_ln703_3_fu_888_p1) - $signed(sext_ln703_1_fu_777_p1));

assign sub_ln1193_3_fu_946_p2 = ($signed(sext_ln703_4_fu_943_p1) - $signed(sext_ln703_1_fu_777_p1));

assign sub_ln1193_4_fu_1001_p2 = ($signed(sext_ln703_5_fu_998_p1) - $signed(sext_ln703_1_fu_777_p1));

assign sub_ln1193_5_fu_1056_p2 = ($signed(sext_ln703_6_fu_1053_p1) - $signed(sext_ln703_1_fu_777_p1));

assign sub_ln1193_6_fu_1111_p2 = ($signed(sext_ln703_7_fu_1108_p1) - $signed(sext_ln703_1_fu_777_p1));

assign sub_ln1193_7_fu_1166_p2 = ($signed(sext_ln703_8_fu_1163_p1) - $signed(sext_ln703_1_fu_777_p1));

assign sub_ln1193_8_fu_1221_p2 = ($signed(sext_ln703_9_fu_1218_p1) - $signed(sext_ln703_1_fu_777_p1));

assign sub_ln1193_9_fu_1276_p2 = ($signed(sext_ln703_10_fu_1273_p1) - $signed(sext_ln703_1_fu_777_p1));

assign sub_ln1193_fu_781_p2 = ($signed(sext_ln703_fu_774_p1) - $signed(sext_ln703_1_fu_777_p1));

assign tmp_11_fu_1367_p4 = {{sub_ln1193_1_fu_836_p2[15:6]}};

assign tmp_12_fu_1401_p4 = {{sub_ln1193_2_fu_891_p2[15:6]}};

assign tmp_13_fu_1435_p4 = {{sub_ln1193_3_fu_946_p2[15:6]}};

assign tmp_14_fu_1469_p4 = {{sub_ln1193_4_fu_1001_p2[15:6]}};

assign tmp_15_fu_1503_p4 = {{sub_ln1193_5_fu_1056_p2[15:6]}};

assign tmp_16_fu_1537_p4 = {{sub_ln1193_6_fu_1111_p2[15:6]}};

assign tmp_17_fu_1571_p4 = {{sub_ln1193_7_fu_1166_p2[15:6]}};

assign tmp_18_fu_1605_p4 = {{sub_ln1193_8_fu_1221_p2[15:6]}};

assign tmp_19_fu_1639_p4 = {{sub_ln1193_9_fu_1276_p2[15:6]}};

assign tmp_20_fu_1943_p4 = {{p_Val2_29_fu_1899_p2[17:8]}};

assign tmp_21_fu_787_p3 = sub_ln1193_fu_781_p2[32'd16];

assign tmp_22_fu_795_p3 = sub_ln1193_fu_781_p2[32'd15];

assign tmp_23_fu_842_p3 = sub_ln1193_1_fu_836_p2[32'd16];

assign tmp_24_fu_850_p3 = sub_ln1193_1_fu_836_p2[32'd15];

assign tmp_25_fu_897_p3 = sub_ln1193_2_fu_891_p2[32'd16];

assign tmp_26_fu_905_p3 = sub_ln1193_2_fu_891_p2[32'd15];

assign tmp_27_fu_952_p3 = sub_ln1193_3_fu_946_p2[32'd16];

assign tmp_28_fu_960_p3 = sub_ln1193_3_fu_946_p2[32'd15];

assign tmp_29_fu_1007_p3 = sub_ln1193_4_fu_1001_p2[32'd16];

assign tmp_30_fu_1015_p3 = sub_ln1193_4_fu_1001_p2[32'd15];

assign tmp_31_fu_1062_p3 = sub_ln1193_5_fu_1056_p2[32'd16];

assign tmp_32_fu_1070_p3 = sub_ln1193_5_fu_1056_p2[32'd15];

assign tmp_33_fu_1117_p3 = sub_ln1193_6_fu_1111_p2[32'd16];

assign tmp_34_fu_1125_p3 = sub_ln1193_6_fu_1111_p2[32'd15];

assign tmp_35_fu_1172_p3 = sub_ln1193_7_fu_1166_p2[32'd16];

assign tmp_36_fu_1180_p3 = sub_ln1193_7_fu_1166_p2[32'd15];

assign tmp_37_fu_1227_p3 = sub_ln1193_8_fu_1221_p2[32'd16];

assign tmp_38_fu_1235_p3 = sub_ln1193_8_fu_1221_p2[32'd15];

assign tmp_39_fu_1282_p3 = sub_ln1193_9_fu_1276_p2[32'd16];

assign tmp_40_fu_1290_p3 = sub_ln1193_9_fu_1276_p2[32'd15];

assign tmp_fu_1328_p4 = {{sub_ln1193_fu_781_p2[15:6]}};

assign underflow_1_fu_1919_p2 = (xor_ln786_11_fu_1913_p2 & p_Result_20_fu_1891_p3);

assign underflow_fu_1793_p2 = (xor_ln786_10_fu_1787_p2 & p_Result_s_fu_1767_p3);

assign x_max_V_fu_768_p3 = ((icmp_ln1496_8_fu_764_p2[0:0] === 1'b1) ? select_ln65_7_reg_2174 : select_ln65_6_reg_2168);

assign xor_ln340_10_fu_815_p2 = (tmp_22_fu_795_p3 ^ tmp_21_fu_787_p3);

assign xor_ln340_11_fu_870_p2 = (tmp_24_fu_850_p3 ^ tmp_23_fu_842_p3);

assign xor_ln340_12_fu_925_p2 = (tmp_26_fu_905_p3 ^ tmp_25_fu_897_p3);

assign xor_ln340_13_fu_980_p2 = (tmp_28_fu_960_p3 ^ tmp_27_fu_952_p3);

assign xor_ln340_14_fu_1035_p2 = (tmp_30_fu_1015_p3 ^ tmp_29_fu_1007_p3);

assign xor_ln340_15_fu_1090_p2 = (tmp_32_fu_1070_p3 ^ tmp_31_fu_1062_p3);

assign xor_ln340_16_fu_1145_p2 = (tmp_34_fu_1125_p3 ^ tmp_33_fu_1117_p3);

assign xor_ln340_17_fu_1200_p2 = (tmp_36_fu_1180_p3 ^ tmp_35_fu_1172_p3);

assign xor_ln340_18_fu_1255_p2 = (tmp_38_fu_1235_p3 ^ tmp_37_fu_1227_p3);

assign xor_ln340_19_fu_1310_p2 = (tmp_40_fu_1290_p3 ^ tmp_39_fu_1282_p3);

assign xor_ln340_1_fu_876_p2 = (tmp_23_fu_842_p3 ^ 1'd1);

assign xor_ln340_20_fu_1799_p2 = (p_Result_s_fu_1767_p3 ^ p_Result_18_fu_1779_p3);

assign xor_ln340_21_fu_1805_p2 = (p_Result_s_fu_1767_p3 ^ 1'd1);

assign xor_ln340_22_fu_1925_p2 = (p_Result_21_fu_1905_p3 ^ p_Result_20_fu_1891_p3);

assign xor_ln340_23_fu_1931_p2 = (p_Result_20_fu_1891_p3 ^ 1'd1);

assign xor_ln340_2_fu_931_p2 = (tmp_25_fu_897_p3 ^ 1'd1);

assign xor_ln340_3_fu_986_p2 = (tmp_27_fu_952_p3 ^ 1'd1);

assign xor_ln340_4_fu_1041_p2 = (tmp_29_fu_1007_p3 ^ 1'd1);

assign xor_ln340_5_fu_1096_p2 = (tmp_31_fu_1062_p3 ^ 1'd1);

assign xor_ln340_6_fu_1151_p2 = (tmp_33_fu_1117_p3 ^ 1'd1);

assign xor_ln340_7_fu_1206_p2 = (tmp_35_fu_1172_p3 ^ 1'd1);

assign xor_ln340_8_fu_1261_p2 = (tmp_37_fu_1227_p3 ^ 1'd1);

assign xor_ln340_9_fu_1316_p2 = (tmp_39_fu_1282_p3 ^ 1'd1);

assign xor_ln340_fu_821_p2 = (tmp_21_fu_787_p3 ^ 1'd1);

assign xor_ln786_10_fu_1787_p2 = (p_Result_18_fu_1779_p3 ^ 1'd1);

assign xor_ln786_11_fu_1913_p2 = (p_Result_21_fu_1905_p3 ^ 1'd1);

assign xor_ln786_1_fu_858_p2 = (tmp_24_fu_850_p3 ^ 1'd1);

assign xor_ln786_2_fu_913_p2 = (tmp_26_fu_905_p3 ^ 1'd1);

assign xor_ln786_3_fu_968_p2 = (tmp_28_fu_960_p3 ^ 1'd1);

assign xor_ln786_4_fu_1023_p2 = (tmp_30_fu_1015_p3 ^ 1'd1);

assign xor_ln786_5_fu_1078_p2 = (tmp_32_fu_1070_p3 ^ 1'd1);

assign xor_ln786_6_fu_1133_p2 = (tmp_34_fu_1125_p3 ^ 1'd1);

assign xor_ln786_7_fu_1188_p2 = (tmp_36_fu_1180_p3 ^ 1'd1);

assign xor_ln786_8_fu_1243_p2 = (tmp_38_fu_1235_p3 ^ 1'd1);

assign xor_ln786_9_fu_1298_p2 = (tmp_40_fu_1290_p3 ^ 1'd1);

assign xor_ln786_fu_803_p2 = (tmp_22_fu_795_p3 ^ 1'd1);

assign y_V_10_fu_1969_p3 = ((or_ln340_11_fu_1937_p2[0:0] === 1'b1) ? select_ln340_22_fu_1953_p3 : select_ln388_11_fu_1961_p3);

assign y_V_1_fu_1393_p3 = ((or_ln340_1_fu_882_p2[0:0] === 1'b1) ? select_ln340_2_fu_1377_p3 : select_ln388_1_fu_1385_p3);

assign y_V_2_fu_1427_p3 = ((or_ln340_2_fu_937_p2[0:0] === 1'b1) ? select_ln340_4_fu_1411_p3 : select_ln388_2_fu_1419_p3);

assign y_V_3_fu_1461_p3 = ((or_ln340_3_fu_992_p2[0:0] === 1'b1) ? select_ln340_6_fu_1445_p3 : select_ln388_3_fu_1453_p3);

assign y_V_4_fu_1495_p3 = ((or_ln340_4_fu_1047_p2[0:0] === 1'b1) ? select_ln340_8_fu_1479_p3 : select_ln388_4_fu_1487_p3);

assign y_V_5_fu_1529_p3 = ((or_ln340_5_fu_1102_p2[0:0] === 1'b1) ? select_ln340_10_fu_1513_p3 : select_ln388_5_fu_1521_p3);

assign y_V_6_fu_1563_p3 = ((or_ln340_6_fu_1157_p2[0:0] === 1'b1) ? select_ln340_12_fu_1547_p3 : select_ln388_6_fu_1555_p3);

assign y_V_7_fu_1597_p3 = ((or_ln340_7_fu_1212_p2[0:0] === 1'b1) ? select_ln340_14_fu_1581_p3 : select_ln388_7_fu_1589_p3);

assign y_V_8_fu_1631_p3 = ((or_ln340_8_fu_1267_p2[0:0] === 1'b1) ? select_ln340_16_fu_1615_p3 : select_ln388_8_fu_1623_p3);

assign y_V_9_fu_1665_p3 = ((or_ln340_9_fu_1322_p2[0:0] === 1'b1) ? select_ln340_18_fu_1649_p3 : select_ln388_9_fu_1657_p3);

assign y_V_fu_1354_p3 = ((or_ln340_fu_827_p2[0:0] === 1'b1) ? select_ln340_fu_1338_p3 : select_ln388_fu_1346_p3);

assign zext_ln1118_1_fu_1990_p1 = exp_res_1_V_1_reg_2241_pp0_iter1_reg;

assign zext_ln1118_2_fu_1994_p1 = exp_res_2_V_1_reg_2252_pp0_iter1_reg;

assign zext_ln1118_3_fu_1998_p1 = exp_res_3_V_1_reg_2263_pp0_iter1_reg;

assign zext_ln1118_4_fu_2002_p1 = exp_res_4_V_1_reg_2274_pp0_iter1_reg;

assign zext_ln1118_5_fu_2006_p1 = exp_res_5_V_1_reg_2284_pp0_iter1_reg;

assign zext_ln1118_6_fu_2010_p1 = exp_res_6_V_1_reg_2294_pp0_iter1_reg;

assign zext_ln1118_7_fu_2014_p1 = exp_res_7_V_1_reg_2304_pp0_iter2_reg;

assign zext_ln1118_8_fu_2018_p1 = exp_res_8_V_1_reg_2314_pp0_iter2_reg;

assign zext_ln1118_9_fu_2022_p1 = exp_res_9_V_1_reg_2326_pp0_iter2_reg;

assign zext_ln1118_fu_1986_p1 = exp_res_0_V_1_reg_2230_pp0_iter1_reg;

assign zext_ln225_1_fu_1673_p1 = y_V_1_reg_2185;

assign zext_ln225_2_fu_1677_p1 = y_V_2_reg_2190;

assign zext_ln225_3_fu_1681_p1 = y_V_3_reg_2195;

assign zext_ln225_4_fu_1685_p1 = y_V_4_reg_2200;

assign zext_ln225_5_fu_1710_p1 = y_V_5_reg_2205;

assign zext_ln225_6_fu_1719_p1 = y_V_6_reg_2210;

assign zext_ln225_7_fu_1728_p1 = y_V_7_reg_2215;

assign zext_ln225_8_fu_1737_p1 = y_V_8_reg_2220;

assign zext_ln225_9_fu_1746_p1 = y_V_9_reg_2225;

assign zext_ln225_fu_1362_p1 = y_V_fu_1354_p3;

assign zext_ln235_fu_1977_p1 = y_V_10_reg_2345;

assign zext_ln746_fu_1873_p1 = p_Val2_27_fu_1865_p3;

endmodule //softmax_stable_array_array_ap_fixed_16_6_5_3_0_10u_softmax_config25_s
