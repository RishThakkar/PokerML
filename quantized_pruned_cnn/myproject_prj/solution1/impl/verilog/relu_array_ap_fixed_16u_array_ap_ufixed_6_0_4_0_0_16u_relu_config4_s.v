// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_ap_fixed_16u_array_ap_ufixed_6_0_4_0_0_16u_relu_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [15:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [15:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [15:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [15:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [15:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [15:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [5:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [5:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [5:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [5:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [5:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [5:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [5:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [5:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [5:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [5:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [5:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [5:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [5:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [5:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [5:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [5:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln41_reg_2899;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln41_reg_2899_pp0_iter1_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg   [9:0] i_0_reg_604;
wire   [0:0] icmp_ln41_fu_615_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op44;
reg    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op384;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] i_fu_621_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] tmp_data_0_V_fu_821_p3;
reg   [5:0] tmp_data_0_V_reg_2908;
wire   [5:0] tmp_data_1_V_fu_959_p3;
reg   [5:0] tmp_data_1_V_reg_2913;
wire   [5:0] tmp_data_2_V_fu_1097_p3;
reg   [5:0] tmp_data_2_V_reg_2918;
wire   [5:0] tmp_data_3_V_fu_1235_p3;
reg   [5:0] tmp_data_3_V_reg_2923;
wire   [5:0] tmp_data_4_V_fu_1373_p3;
reg   [5:0] tmp_data_4_V_reg_2928;
wire   [5:0] tmp_data_5_V_fu_1511_p3;
reg   [5:0] tmp_data_5_V_reg_2933;
wire   [5:0] tmp_data_6_V_fu_1649_p3;
reg   [5:0] tmp_data_6_V_reg_2938;
wire   [5:0] tmp_data_7_V_fu_1787_p3;
reg   [5:0] tmp_data_7_V_reg_2943;
wire   [5:0] tmp_data_8_V_fu_1925_p3;
reg   [5:0] tmp_data_8_V_reg_2948;
wire   [5:0] tmp_data_9_V_fu_2063_p3;
reg   [5:0] tmp_data_9_V_reg_2953;
wire   [5:0] tmp_data_10_V_fu_2201_p3;
reg   [5:0] tmp_data_10_V_reg_2958;
wire   [5:0] tmp_data_11_V_fu_2339_p3;
reg   [5:0] tmp_data_11_V_reg_2963;
wire   [5:0] tmp_data_12_V_fu_2477_p3;
reg   [5:0] tmp_data_12_V_reg_2968;
wire   [5:0] tmp_data_13_V_fu_2615_p3;
reg   [5:0] tmp_data_13_V_reg_2973;
wire   [5:0] tmp_data_14_V_fu_2753_p3;
reg   [5:0] tmp_data_14_V_reg_2978;
wire   [5:0] tmp_data_15_V_fu_2891_p3;
reg   [5:0] tmp_data_15_V_reg_2983;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] trunc_ln718_fu_715_p1;
wire   [0:0] icmp_ln718_fu_719_p2;
wire   [0:0] tmp_630_fu_707_p3;
wire   [0:0] or_ln412_fu_733_p2;
wire   [0:0] tmp_632_fu_739_p3;
wire   [0:0] and_ln415_fu_747_p2;
wire   [5:0] zext_ln415_fu_753_p1;
wire   [5:0] trunc_ln_fu_697_p4;
wire   [5:0] add_ln415_fu_757_p2;
wire   [0:0] tmp_633_fu_763_p3;
wire   [0:0] tmp_631_fu_725_p3;
wire   [0:0] xor_ln416_fu_771_p2;
wire   [5:0] p_Result_s_fu_783_p4;
wire   [0:0] and_ln416_fu_777_p2;
wire   [0:0] icmp_ln879_fu_793_p2;
wire   [0:0] icmp_ln768_fu_799_p2;
wire   [0:0] select_ln777_fu_805_p3;
wire   [0:0] icmp_ln1494_fu_691_p2;
wire   [5:0] select_ln340_fu_813_p3;
wire   [2:0] trunc_ln718_143_fu_853_p1;
wire   [0:0] icmp_ln718_143_fu_857_p2;
wire   [0:0] tmp_634_fu_845_p3;
wire   [0:0] or_ln412_143_fu_871_p2;
wire   [0:0] tmp_636_fu_877_p3;
wire   [0:0] and_ln415_1_fu_885_p2;
wire   [5:0] zext_ln415_143_fu_891_p1;
wire   [5:0] trunc_ln708_s_fu_835_p4;
wire   [5:0] add_ln415_143_fu_895_p2;
wire   [0:0] tmp_637_fu_901_p3;
wire   [0:0] tmp_635_fu_863_p3;
wire   [0:0] xor_ln416_143_fu_909_p2;
wire   [5:0] p_Result_36_1_fu_921_p4;
wire   [0:0] and_ln416_143_fu_915_p2;
wire   [0:0] icmp_ln879_143_fu_931_p2;
wire   [0:0] icmp_ln768_143_fu_937_p2;
wire   [0:0] select_ln777_143_fu_943_p3;
wire   [0:0] icmp_ln1494_1_fu_829_p2;
wire   [5:0] select_ln340_1_fu_951_p3;
wire   [2:0] trunc_ln718_144_fu_991_p1;
wire   [0:0] icmp_ln718_144_fu_995_p2;
wire   [0:0] tmp_638_fu_983_p3;
wire   [0:0] or_ln412_144_fu_1009_p2;
wire   [0:0] tmp_640_fu_1015_p3;
wire   [0:0] and_ln415_2_fu_1023_p2;
wire   [5:0] zext_ln415_144_fu_1029_p1;
wire   [5:0] trunc_ln708_139_fu_973_p4;
wire   [5:0] add_ln415_144_fu_1033_p2;
wire   [0:0] tmp_641_fu_1039_p3;
wire   [0:0] tmp_639_fu_1001_p3;
wire   [0:0] xor_ln416_144_fu_1047_p2;
wire   [5:0] p_Result_36_2_fu_1059_p4;
wire   [0:0] and_ln416_144_fu_1053_p2;
wire   [0:0] icmp_ln879_144_fu_1069_p2;
wire   [0:0] icmp_ln768_144_fu_1075_p2;
wire   [0:0] select_ln777_144_fu_1081_p3;
wire   [0:0] icmp_ln1494_2_fu_967_p2;
wire   [5:0] select_ln340_2_fu_1089_p3;
wire   [2:0] trunc_ln718_145_fu_1129_p1;
wire   [0:0] icmp_ln718_145_fu_1133_p2;
wire   [0:0] tmp_642_fu_1121_p3;
wire   [0:0] or_ln412_145_fu_1147_p2;
wire   [0:0] tmp_644_fu_1153_p3;
wire   [0:0] and_ln415_3_fu_1161_p2;
wire   [5:0] zext_ln415_145_fu_1167_p1;
wire   [5:0] trunc_ln708_140_fu_1111_p4;
wire   [5:0] add_ln415_145_fu_1171_p2;
wire   [0:0] tmp_645_fu_1177_p3;
wire   [0:0] tmp_643_fu_1139_p3;
wire   [0:0] xor_ln416_145_fu_1185_p2;
wire   [5:0] p_Result_36_3_fu_1197_p4;
wire   [0:0] and_ln416_145_fu_1191_p2;
wire   [0:0] icmp_ln879_145_fu_1207_p2;
wire   [0:0] icmp_ln768_145_fu_1213_p2;
wire   [0:0] select_ln777_145_fu_1219_p3;
wire   [0:0] icmp_ln1494_3_fu_1105_p2;
wire   [5:0] select_ln340_3_fu_1227_p3;
wire   [2:0] trunc_ln718_146_fu_1267_p1;
wire   [0:0] icmp_ln718_146_fu_1271_p2;
wire   [0:0] tmp_646_fu_1259_p3;
wire   [0:0] or_ln412_146_fu_1285_p2;
wire   [0:0] tmp_648_fu_1291_p3;
wire   [0:0] and_ln415_4_fu_1299_p2;
wire   [5:0] zext_ln415_146_fu_1305_p1;
wire   [5:0] trunc_ln708_141_fu_1249_p4;
wire   [5:0] add_ln415_146_fu_1309_p2;
wire   [0:0] tmp_649_fu_1315_p3;
wire   [0:0] tmp_647_fu_1277_p3;
wire   [0:0] xor_ln416_146_fu_1323_p2;
wire   [5:0] p_Result_36_4_fu_1335_p4;
wire   [0:0] and_ln416_146_fu_1329_p2;
wire   [0:0] icmp_ln879_146_fu_1345_p2;
wire   [0:0] icmp_ln768_146_fu_1351_p2;
wire   [0:0] select_ln777_146_fu_1357_p3;
wire   [0:0] icmp_ln1494_4_fu_1243_p2;
wire   [5:0] select_ln340_4_fu_1365_p3;
wire   [2:0] trunc_ln718_147_fu_1405_p1;
wire   [0:0] icmp_ln718_147_fu_1409_p2;
wire   [0:0] tmp_650_fu_1397_p3;
wire   [0:0] or_ln412_147_fu_1423_p2;
wire   [0:0] tmp_652_fu_1429_p3;
wire   [0:0] and_ln415_5_fu_1437_p2;
wire   [5:0] zext_ln415_147_fu_1443_p1;
wire   [5:0] trunc_ln708_142_fu_1387_p4;
wire   [5:0] add_ln415_147_fu_1447_p2;
wire   [0:0] tmp_653_fu_1453_p3;
wire   [0:0] tmp_651_fu_1415_p3;
wire   [0:0] xor_ln416_147_fu_1461_p2;
wire   [5:0] p_Result_36_5_fu_1473_p4;
wire   [0:0] and_ln416_147_fu_1467_p2;
wire   [0:0] icmp_ln879_147_fu_1483_p2;
wire   [0:0] icmp_ln768_147_fu_1489_p2;
wire   [0:0] select_ln777_147_fu_1495_p3;
wire   [0:0] icmp_ln1494_5_fu_1381_p2;
wire   [5:0] select_ln340_5_fu_1503_p3;
wire   [2:0] trunc_ln718_148_fu_1543_p1;
wire   [0:0] icmp_ln718_148_fu_1547_p2;
wire   [0:0] tmp_654_fu_1535_p3;
wire   [0:0] or_ln412_148_fu_1561_p2;
wire   [0:0] tmp_656_fu_1567_p3;
wire   [0:0] and_ln415_6_fu_1575_p2;
wire   [5:0] zext_ln415_148_fu_1581_p1;
wire   [5:0] trunc_ln708_143_fu_1525_p4;
wire   [5:0] add_ln415_148_fu_1585_p2;
wire   [0:0] tmp_657_fu_1591_p3;
wire   [0:0] tmp_655_fu_1553_p3;
wire   [0:0] xor_ln416_148_fu_1599_p2;
wire   [5:0] p_Result_36_6_fu_1611_p4;
wire   [0:0] and_ln416_148_fu_1605_p2;
wire   [0:0] icmp_ln879_148_fu_1621_p2;
wire   [0:0] icmp_ln768_148_fu_1627_p2;
wire   [0:0] select_ln777_148_fu_1633_p3;
wire   [0:0] icmp_ln1494_6_fu_1519_p2;
wire   [5:0] select_ln340_6_fu_1641_p3;
wire   [2:0] trunc_ln718_149_fu_1681_p1;
wire   [0:0] icmp_ln718_149_fu_1685_p2;
wire   [0:0] tmp_658_fu_1673_p3;
wire   [0:0] or_ln412_149_fu_1699_p2;
wire   [0:0] tmp_660_fu_1705_p3;
wire   [0:0] and_ln415_7_fu_1713_p2;
wire   [5:0] zext_ln415_149_fu_1719_p1;
wire   [5:0] trunc_ln708_144_fu_1663_p4;
wire   [5:0] add_ln415_149_fu_1723_p2;
wire   [0:0] tmp_661_fu_1729_p3;
wire   [0:0] tmp_659_fu_1691_p3;
wire   [0:0] xor_ln416_149_fu_1737_p2;
wire   [5:0] p_Result_36_7_fu_1749_p4;
wire   [0:0] and_ln416_149_fu_1743_p2;
wire   [0:0] icmp_ln879_149_fu_1759_p2;
wire   [0:0] icmp_ln768_149_fu_1765_p2;
wire   [0:0] select_ln777_149_fu_1771_p3;
wire   [0:0] icmp_ln1494_7_fu_1657_p2;
wire   [5:0] select_ln340_7_fu_1779_p3;
wire   [2:0] trunc_ln718_150_fu_1819_p1;
wire   [0:0] icmp_ln718_150_fu_1823_p2;
wire   [0:0] tmp_662_fu_1811_p3;
wire   [0:0] or_ln412_150_fu_1837_p2;
wire   [0:0] tmp_664_fu_1843_p3;
wire   [0:0] and_ln415_8_fu_1851_p2;
wire   [5:0] zext_ln415_150_fu_1857_p1;
wire   [5:0] trunc_ln708_145_fu_1801_p4;
wire   [5:0] add_ln415_150_fu_1861_p2;
wire   [0:0] tmp_665_fu_1867_p3;
wire   [0:0] tmp_663_fu_1829_p3;
wire   [0:0] xor_ln416_150_fu_1875_p2;
wire   [5:0] p_Result_36_8_fu_1887_p4;
wire   [0:0] and_ln416_150_fu_1881_p2;
wire   [0:0] icmp_ln879_150_fu_1897_p2;
wire   [0:0] icmp_ln768_150_fu_1903_p2;
wire   [0:0] select_ln777_150_fu_1909_p3;
wire   [0:0] icmp_ln1494_8_fu_1795_p2;
wire   [5:0] select_ln340_8_fu_1917_p3;
wire   [2:0] trunc_ln718_151_fu_1957_p1;
wire   [0:0] icmp_ln718_151_fu_1961_p2;
wire   [0:0] tmp_666_fu_1949_p3;
wire   [0:0] or_ln412_151_fu_1975_p2;
wire   [0:0] tmp_668_fu_1981_p3;
wire   [0:0] and_ln415_9_fu_1989_p2;
wire   [5:0] zext_ln415_151_fu_1995_p1;
wire   [5:0] trunc_ln708_146_fu_1939_p4;
wire   [5:0] add_ln415_151_fu_1999_p2;
wire   [0:0] tmp_669_fu_2005_p3;
wire   [0:0] tmp_667_fu_1967_p3;
wire   [0:0] xor_ln416_151_fu_2013_p2;
wire   [5:0] p_Result_36_9_fu_2025_p4;
wire   [0:0] and_ln416_151_fu_2019_p2;
wire   [0:0] icmp_ln879_151_fu_2035_p2;
wire   [0:0] icmp_ln768_151_fu_2041_p2;
wire   [0:0] select_ln777_151_fu_2047_p3;
wire   [0:0] icmp_ln1494_9_fu_1933_p2;
wire   [5:0] select_ln340_9_fu_2055_p3;
wire   [2:0] trunc_ln718_152_fu_2095_p1;
wire   [0:0] icmp_ln718_152_fu_2099_p2;
wire   [0:0] tmp_670_fu_2087_p3;
wire   [0:0] or_ln412_152_fu_2113_p2;
wire   [0:0] tmp_672_fu_2119_p3;
wire   [0:0] and_ln415_10_fu_2127_p2;
wire   [5:0] zext_ln415_152_fu_2133_p1;
wire   [5:0] trunc_ln708_147_fu_2077_p4;
wire   [5:0] add_ln415_152_fu_2137_p2;
wire   [0:0] tmp_673_fu_2143_p3;
wire   [0:0] tmp_671_fu_2105_p3;
wire   [0:0] xor_ln416_152_fu_2151_p2;
wire   [5:0] p_Result_36_s_fu_2163_p4;
wire   [0:0] and_ln416_152_fu_2157_p2;
wire   [0:0] icmp_ln879_152_fu_2173_p2;
wire   [0:0] icmp_ln768_152_fu_2179_p2;
wire   [0:0] select_ln777_152_fu_2185_p3;
wire   [0:0] icmp_ln1494_10_fu_2071_p2;
wire   [5:0] select_ln340_10_fu_2193_p3;
wire   [2:0] trunc_ln718_153_fu_2233_p1;
wire   [0:0] icmp_ln718_153_fu_2237_p2;
wire   [0:0] tmp_674_fu_2225_p3;
wire   [0:0] or_ln412_153_fu_2251_p2;
wire   [0:0] tmp_676_fu_2257_p3;
wire   [0:0] and_ln415_11_fu_2265_p2;
wire   [5:0] zext_ln415_153_fu_2271_p1;
wire   [5:0] trunc_ln708_148_fu_2215_p4;
wire   [5:0] add_ln415_153_fu_2275_p2;
wire   [0:0] tmp_677_fu_2281_p3;
wire   [0:0] tmp_675_fu_2243_p3;
wire   [0:0] xor_ln416_153_fu_2289_p2;
wire   [5:0] p_Result_36_10_fu_2301_p4;
wire   [0:0] and_ln416_153_fu_2295_p2;
wire   [0:0] icmp_ln879_153_fu_2311_p2;
wire   [0:0] icmp_ln768_153_fu_2317_p2;
wire   [0:0] select_ln777_153_fu_2323_p3;
wire   [0:0] icmp_ln1494_11_fu_2209_p2;
wire   [5:0] select_ln340_11_fu_2331_p3;
wire   [2:0] trunc_ln718_154_fu_2371_p1;
wire   [0:0] icmp_ln718_154_fu_2375_p2;
wire   [0:0] tmp_678_fu_2363_p3;
wire   [0:0] or_ln412_154_fu_2389_p2;
wire   [0:0] tmp_680_fu_2395_p3;
wire   [0:0] and_ln415_12_fu_2403_p2;
wire   [5:0] zext_ln415_154_fu_2409_p1;
wire   [5:0] trunc_ln708_149_fu_2353_p4;
wire   [5:0] add_ln415_154_fu_2413_p2;
wire   [0:0] tmp_681_fu_2419_p3;
wire   [0:0] tmp_679_fu_2381_p3;
wire   [0:0] xor_ln416_154_fu_2427_p2;
wire   [5:0] p_Result_36_11_fu_2439_p4;
wire   [0:0] and_ln416_154_fu_2433_p2;
wire   [0:0] icmp_ln879_154_fu_2449_p2;
wire   [0:0] icmp_ln768_154_fu_2455_p2;
wire   [0:0] select_ln777_154_fu_2461_p3;
wire   [0:0] icmp_ln1494_12_fu_2347_p2;
wire   [5:0] select_ln340_12_fu_2469_p3;
wire   [2:0] trunc_ln718_155_fu_2509_p1;
wire   [0:0] icmp_ln718_155_fu_2513_p2;
wire   [0:0] tmp_682_fu_2501_p3;
wire   [0:0] or_ln412_155_fu_2527_p2;
wire   [0:0] tmp_684_fu_2533_p3;
wire   [0:0] and_ln415_13_fu_2541_p2;
wire   [5:0] zext_ln415_155_fu_2547_p1;
wire   [5:0] trunc_ln708_150_fu_2491_p4;
wire   [5:0] add_ln415_155_fu_2551_p2;
wire   [0:0] tmp_685_fu_2557_p3;
wire   [0:0] tmp_683_fu_2519_p3;
wire   [0:0] xor_ln416_155_fu_2565_p2;
wire   [5:0] p_Result_36_12_fu_2577_p4;
wire   [0:0] and_ln416_155_fu_2571_p2;
wire   [0:0] icmp_ln879_155_fu_2587_p2;
wire   [0:0] icmp_ln768_155_fu_2593_p2;
wire   [0:0] select_ln777_155_fu_2599_p3;
wire   [0:0] icmp_ln1494_13_fu_2485_p2;
wire   [5:0] select_ln340_13_fu_2607_p3;
wire   [2:0] trunc_ln718_156_fu_2647_p1;
wire   [0:0] icmp_ln718_156_fu_2651_p2;
wire   [0:0] tmp_686_fu_2639_p3;
wire   [0:0] or_ln412_156_fu_2665_p2;
wire   [0:0] tmp_688_fu_2671_p3;
wire   [0:0] and_ln415_14_fu_2679_p2;
wire   [5:0] zext_ln415_156_fu_2685_p1;
wire   [5:0] trunc_ln708_151_fu_2629_p4;
wire   [5:0] add_ln415_156_fu_2689_p2;
wire   [0:0] tmp_689_fu_2695_p3;
wire   [0:0] tmp_687_fu_2657_p3;
wire   [0:0] xor_ln416_156_fu_2703_p2;
wire   [5:0] p_Result_36_13_fu_2715_p4;
wire   [0:0] and_ln416_156_fu_2709_p2;
wire   [0:0] icmp_ln879_156_fu_2725_p2;
wire   [0:0] icmp_ln768_156_fu_2731_p2;
wire   [0:0] select_ln777_156_fu_2737_p3;
wire   [0:0] icmp_ln1494_14_fu_2623_p2;
wire   [5:0] select_ln340_14_fu_2745_p3;
wire   [2:0] trunc_ln718_157_fu_2785_p1;
wire   [0:0] icmp_ln718_157_fu_2789_p2;
wire   [0:0] tmp_690_fu_2777_p3;
wire   [0:0] or_ln412_157_fu_2803_p2;
wire   [0:0] tmp_692_fu_2809_p3;
wire   [0:0] and_ln415_15_fu_2817_p2;
wire   [5:0] zext_ln415_157_fu_2823_p1;
wire   [5:0] trunc_ln708_152_fu_2767_p4;
wire   [5:0] add_ln415_157_fu_2827_p2;
wire   [0:0] tmp_693_fu_2833_p3;
wire   [0:0] tmp_691_fu_2795_p3;
wire   [0:0] xor_ln416_157_fu_2841_p2;
wire   [5:0] p_Result_36_14_fu_2853_p4;
wire   [0:0] and_ln416_157_fu_2847_p2;
wire   [0:0] icmp_ln879_157_fu_2863_p2;
wire   [0:0] icmp_ln768_157_fu_2869_p2;
wire   [0:0] select_ln777_157_fu_2875_p3;
wire   [0:0] icmp_ln1494_15_fu_2761_p2;
wire   [5:0] select_ln340_15_fu_2883_p3;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_fu_615_p2 == 1'd0))) begin
        i_0_reg_604 <= i_fu_621_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_604 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln41_reg_2899 <= icmp_ln41_fu_615_p2;
        icmp_ln41_reg_2899_pp0_iter1_reg <= icmp_ln41_reg_2899;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        tmp_data_0_V_reg_2908 <= tmp_data_0_V_fu_821_p3;
        tmp_data_10_V_reg_2958 <= tmp_data_10_V_fu_2201_p3;
        tmp_data_11_V_reg_2963 <= tmp_data_11_V_fu_2339_p3;
        tmp_data_12_V_reg_2968 <= tmp_data_12_V_fu_2477_p3;
        tmp_data_13_V_reg_2973 <= tmp_data_13_V_fu_2615_p3;
        tmp_data_14_V_reg_2978 <= tmp_data_14_V_fu_2753_p3;
        tmp_data_15_V_reg_2983 <= tmp_data_15_V_fu_2891_p3;
        tmp_data_1_V_reg_2913 <= tmp_data_1_V_fu_959_p3;
        tmp_data_2_V_reg_2918 <= tmp_data_2_V_fu_1097_p3;
        tmp_data_3_V_reg_2923 <= tmp_data_3_V_fu_1235_p3;
        tmp_data_4_V_reg_2928 <= tmp_data_4_V_fu_1373_p3;
        tmp_data_5_V_reg_2933 <= tmp_data_5_V_fu_1511_p3;
        tmp_data_6_V_reg_2938 <= tmp_data_6_V_fu_1649_p3;
        tmp_data_7_V_reg_2943 <= tmp_data_7_V_fu_1787_p3;
        tmp_data_8_V_reg_2948 <= tmp_data_8_V_fu_1925_p3;
        tmp_data_9_V_reg_2953 <= tmp_data_9_V_fu_2063_p3;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_615_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_reg_2899 == 1'd0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_615_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_615_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_143_fu_895_p2 = (zext_ln415_143_fu_891_p1 + trunc_ln708_s_fu_835_p4);

assign add_ln415_144_fu_1033_p2 = (zext_ln415_144_fu_1029_p1 + trunc_ln708_139_fu_973_p4);

assign add_ln415_145_fu_1171_p2 = (zext_ln415_145_fu_1167_p1 + trunc_ln708_140_fu_1111_p4);

assign add_ln415_146_fu_1309_p2 = (zext_ln415_146_fu_1305_p1 + trunc_ln708_141_fu_1249_p4);

assign add_ln415_147_fu_1447_p2 = (zext_ln415_147_fu_1443_p1 + trunc_ln708_142_fu_1387_p4);

assign add_ln415_148_fu_1585_p2 = (zext_ln415_148_fu_1581_p1 + trunc_ln708_143_fu_1525_p4);

assign add_ln415_149_fu_1723_p2 = (zext_ln415_149_fu_1719_p1 + trunc_ln708_144_fu_1663_p4);

assign add_ln415_150_fu_1861_p2 = (zext_ln415_150_fu_1857_p1 + trunc_ln708_145_fu_1801_p4);

assign add_ln415_151_fu_1999_p2 = (zext_ln415_151_fu_1995_p1 + trunc_ln708_146_fu_1939_p4);

assign add_ln415_152_fu_2137_p2 = (zext_ln415_152_fu_2133_p1 + trunc_ln708_147_fu_2077_p4);

assign add_ln415_153_fu_2275_p2 = (zext_ln415_153_fu_2271_p1 + trunc_ln708_148_fu_2215_p4);

assign add_ln415_154_fu_2413_p2 = (zext_ln415_154_fu_2409_p1 + trunc_ln708_149_fu_2353_p4);

assign add_ln415_155_fu_2551_p2 = (zext_ln415_155_fu_2547_p1 + trunc_ln708_150_fu_2491_p4);

assign add_ln415_156_fu_2689_p2 = (zext_ln415_156_fu_2685_p1 + trunc_ln708_151_fu_2629_p4);

assign add_ln415_157_fu_2827_p2 = (zext_ln415_157_fu_2823_p1 + trunc_ln708_152_fu_2767_p4);

assign add_ln415_fu_757_p2 = (zext_ln415_fu_753_p1 + trunc_ln_fu_697_p4);

assign and_ln415_10_fu_2127_p2 = (tmp_672_fu_2119_p3 & or_ln412_152_fu_2113_p2);

assign and_ln415_11_fu_2265_p2 = (tmp_676_fu_2257_p3 & or_ln412_153_fu_2251_p2);

assign and_ln415_12_fu_2403_p2 = (tmp_680_fu_2395_p3 & or_ln412_154_fu_2389_p2);

assign and_ln415_13_fu_2541_p2 = (tmp_684_fu_2533_p3 & or_ln412_155_fu_2527_p2);

assign and_ln415_14_fu_2679_p2 = (tmp_688_fu_2671_p3 & or_ln412_156_fu_2665_p2);

assign and_ln415_15_fu_2817_p2 = (tmp_692_fu_2809_p3 & or_ln412_157_fu_2803_p2);

assign and_ln415_1_fu_885_p2 = (tmp_636_fu_877_p3 & or_ln412_143_fu_871_p2);

assign and_ln415_2_fu_1023_p2 = (tmp_640_fu_1015_p3 & or_ln412_144_fu_1009_p2);

assign and_ln415_3_fu_1161_p2 = (tmp_644_fu_1153_p3 & or_ln412_145_fu_1147_p2);

assign and_ln415_4_fu_1299_p2 = (tmp_648_fu_1291_p3 & or_ln412_146_fu_1285_p2);

assign and_ln415_5_fu_1437_p2 = (tmp_652_fu_1429_p3 & or_ln412_147_fu_1423_p2);

assign and_ln415_6_fu_1575_p2 = (tmp_656_fu_1567_p3 & or_ln412_148_fu_1561_p2);

assign and_ln415_7_fu_1713_p2 = (tmp_660_fu_1705_p3 & or_ln412_149_fu_1699_p2);

assign and_ln415_8_fu_1851_p2 = (tmp_664_fu_1843_p3 & or_ln412_150_fu_1837_p2);

assign and_ln415_9_fu_1989_p2 = (tmp_668_fu_1981_p3 & or_ln412_151_fu_1975_p2);

assign and_ln415_fu_747_p2 = (tmp_632_fu_739_p3 & or_ln412_fu_733_p2);

assign and_ln416_143_fu_915_p2 = (xor_ln416_143_fu_909_p2 & tmp_635_fu_863_p3);

assign and_ln416_144_fu_1053_p2 = (xor_ln416_144_fu_1047_p2 & tmp_639_fu_1001_p3);

assign and_ln416_145_fu_1191_p2 = (xor_ln416_145_fu_1185_p2 & tmp_643_fu_1139_p3);

assign and_ln416_146_fu_1329_p2 = (xor_ln416_146_fu_1323_p2 & tmp_647_fu_1277_p3);

assign and_ln416_147_fu_1467_p2 = (xor_ln416_147_fu_1461_p2 & tmp_651_fu_1415_p3);

assign and_ln416_148_fu_1605_p2 = (xor_ln416_148_fu_1599_p2 & tmp_655_fu_1553_p3);

assign and_ln416_149_fu_1743_p2 = (xor_ln416_149_fu_1737_p2 & tmp_659_fu_1691_p3);

assign and_ln416_150_fu_1881_p2 = (xor_ln416_150_fu_1875_p2 & tmp_663_fu_1829_p3);

assign and_ln416_151_fu_2019_p2 = (xor_ln416_151_fu_2013_p2 & tmp_667_fu_1967_p3);

assign and_ln416_152_fu_2157_p2 = (xor_ln416_152_fu_2151_p2 & tmp_671_fu_2105_p3);

assign and_ln416_153_fu_2295_p2 = (xor_ln416_153_fu_2289_p2 & tmp_675_fu_2243_p3);

assign and_ln416_154_fu_2433_p2 = (xor_ln416_154_fu_2427_p2 & tmp_679_fu_2381_p3);

assign and_ln416_155_fu_2571_p2 = (xor_ln416_155_fu_2565_p2 & tmp_683_fu_2519_p3);

assign and_ln416_156_fu_2709_p2 = (xor_ln416_156_fu_2703_p2 & tmp_687_fu_2657_p3);

assign and_ln416_157_fu_2847_p2 = (xor_ln416_157_fu_2841_p2 & tmp_691_fu_2795_p3);

assign and_ln416_fu_777_p2 = (xor_ln416_fu_771_p2 & tmp_631_fu_725_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op384 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0)) | ((io_acc_block_signal_op44 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln41_reg_2899 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op384 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0)) | ((io_acc_block_signal_op44 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln41_reg_2899 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op384 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0)) | ((io_acc_block_signal_op44 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln41_reg_2899 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op44 == 1'b0) & (icmp_ln41_reg_2899 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((io_acc_block_signal_op384 == 1'b0) & (icmp_ln41_reg_2899_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_fu_621_p2 = (i_0_reg_604 + 10'd1);

assign icmp_ln1494_10_fu_2071_p2 = (($signed(data_V_data_10_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_11_fu_2209_p2 = (($signed(data_V_data_11_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_12_fu_2347_p2 = (($signed(data_V_data_12_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_13_fu_2485_p2 = (($signed(data_V_data_13_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_14_fu_2623_p2 = (($signed(data_V_data_14_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_15_fu_2761_p2 = (($signed(data_V_data_15_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_829_p2 = (($signed(data_V_data_1_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_967_p2 = (($signed(data_V_data_2_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_1105_p2 = (($signed(data_V_data_3_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_1243_p2 = (($signed(data_V_data_4_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_1381_p2 = (($signed(data_V_data_5_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_1519_p2 = (($signed(data_V_data_6_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_1657_p2 = (($signed(data_V_data_7_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_1795_p2 = (($signed(data_V_data_8_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_1933_p2 = (($signed(data_V_data_9_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_691_p2 = (($signed(data_V_data_0_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_615_p2 = ((i_0_reg_604 == 10'd900) ? 1'b1 : 1'b0);

assign icmp_ln718_143_fu_857_p2 = ((trunc_ln718_143_fu_853_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_144_fu_995_p2 = ((trunc_ln718_144_fu_991_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_145_fu_1133_p2 = ((trunc_ln718_145_fu_1129_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_146_fu_1271_p2 = ((trunc_ln718_146_fu_1267_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_147_fu_1409_p2 = ((trunc_ln718_147_fu_1405_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_148_fu_1547_p2 = ((trunc_ln718_148_fu_1543_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_149_fu_1685_p2 = ((trunc_ln718_149_fu_1681_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_150_fu_1823_p2 = ((trunc_ln718_150_fu_1819_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_151_fu_1961_p2 = ((trunc_ln718_151_fu_1957_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_152_fu_2099_p2 = ((trunc_ln718_152_fu_2095_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_153_fu_2237_p2 = ((trunc_ln718_153_fu_2233_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_154_fu_2375_p2 = ((trunc_ln718_154_fu_2371_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_155_fu_2513_p2 = ((trunc_ln718_155_fu_2509_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_156_fu_2651_p2 = ((trunc_ln718_156_fu_2647_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_157_fu_2789_p2 = ((trunc_ln718_157_fu_2785_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln718_fu_719_p2 = ((trunc_ln718_fu_715_p1 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_143_fu_937_p2 = ((p_Result_36_1_fu_921_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_144_fu_1075_p2 = ((p_Result_36_2_fu_1059_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_145_fu_1213_p2 = ((p_Result_36_3_fu_1197_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_146_fu_1351_p2 = ((p_Result_36_4_fu_1335_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_147_fu_1489_p2 = ((p_Result_36_5_fu_1473_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_148_fu_1627_p2 = ((p_Result_36_6_fu_1611_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_149_fu_1765_p2 = ((p_Result_36_7_fu_1749_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_150_fu_1903_p2 = ((p_Result_36_8_fu_1887_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_151_fu_2041_p2 = ((p_Result_36_9_fu_2025_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_152_fu_2179_p2 = ((p_Result_36_s_fu_2163_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_153_fu_2317_p2 = ((p_Result_36_10_fu_2301_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_154_fu_2455_p2 = ((p_Result_36_11_fu_2439_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_155_fu_2593_p2 = ((p_Result_36_12_fu_2577_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_156_fu_2731_p2 = ((p_Result_36_13_fu_2715_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_157_fu_2869_p2 = ((p_Result_36_14_fu_2853_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_799_p2 = ((p_Result_s_fu_783_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_143_fu_931_p2 = ((p_Result_36_1_fu_921_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_144_fu_1069_p2 = ((p_Result_36_2_fu_1059_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_145_fu_1207_p2 = ((p_Result_36_3_fu_1197_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_146_fu_1345_p2 = ((p_Result_36_4_fu_1335_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_147_fu_1483_p2 = ((p_Result_36_5_fu_1473_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_148_fu_1621_p2 = ((p_Result_36_6_fu_1611_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_149_fu_1759_p2 = ((p_Result_36_7_fu_1749_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_150_fu_1897_p2 = ((p_Result_36_8_fu_1887_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_151_fu_2035_p2 = ((p_Result_36_9_fu_2025_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_152_fu_2173_p2 = ((p_Result_36_s_fu_2163_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_153_fu_2311_p2 = ((p_Result_36_10_fu_2301_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_154_fu_2449_p2 = ((p_Result_36_11_fu_2439_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_155_fu_2587_p2 = ((p_Result_36_12_fu_2577_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_156_fu_2725_p2 = ((p_Result_36_13_fu_2715_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_157_fu_2863_p2 = ((p_Result_36_14_fu_2853_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_793_p2 = ((p_Result_s_fu_783_p4 == 6'd63) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op384 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op44 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign or_ln412_143_fu_871_p2 = (tmp_634_fu_845_p3 | icmp_ln718_143_fu_857_p2);

assign or_ln412_144_fu_1009_p2 = (tmp_638_fu_983_p3 | icmp_ln718_144_fu_995_p2);

assign or_ln412_145_fu_1147_p2 = (tmp_642_fu_1121_p3 | icmp_ln718_145_fu_1133_p2);

assign or_ln412_146_fu_1285_p2 = (tmp_646_fu_1259_p3 | icmp_ln718_146_fu_1271_p2);

assign or_ln412_147_fu_1423_p2 = (tmp_650_fu_1397_p3 | icmp_ln718_147_fu_1409_p2);

assign or_ln412_148_fu_1561_p2 = (tmp_654_fu_1535_p3 | icmp_ln718_148_fu_1547_p2);

assign or_ln412_149_fu_1699_p2 = (tmp_658_fu_1673_p3 | icmp_ln718_149_fu_1685_p2);

assign or_ln412_150_fu_1837_p2 = (tmp_662_fu_1811_p3 | icmp_ln718_150_fu_1823_p2);

assign or_ln412_151_fu_1975_p2 = (tmp_666_fu_1949_p3 | icmp_ln718_151_fu_1961_p2);

assign or_ln412_152_fu_2113_p2 = (tmp_670_fu_2087_p3 | icmp_ln718_152_fu_2099_p2);

assign or_ln412_153_fu_2251_p2 = (tmp_674_fu_2225_p3 | icmp_ln718_153_fu_2237_p2);

assign or_ln412_154_fu_2389_p2 = (tmp_678_fu_2363_p3 | icmp_ln718_154_fu_2375_p2);

assign or_ln412_155_fu_2527_p2 = (tmp_682_fu_2501_p3 | icmp_ln718_155_fu_2513_p2);

assign or_ln412_156_fu_2665_p2 = (tmp_686_fu_2639_p3 | icmp_ln718_156_fu_2651_p2);

assign or_ln412_157_fu_2803_p2 = (tmp_690_fu_2777_p3 | icmp_ln718_157_fu_2789_p2);

assign or_ln412_fu_733_p2 = (tmp_630_fu_707_p3 | icmp_ln718_fu_719_p2);

assign p_Result_36_10_fu_2301_p4 = {{data_V_data_11_V_dout[15:10]}};

assign p_Result_36_11_fu_2439_p4 = {{data_V_data_12_V_dout[15:10]}};

assign p_Result_36_12_fu_2577_p4 = {{data_V_data_13_V_dout[15:10]}};

assign p_Result_36_13_fu_2715_p4 = {{data_V_data_14_V_dout[15:10]}};

assign p_Result_36_14_fu_2853_p4 = {{data_V_data_15_V_dout[15:10]}};

assign p_Result_36_1_fu_921_p4 = {{data_V_data_1_V_dout[15:10]}};

assign p_Result_36_2_fu_1059_p4 = {{data_V_data_2_V_dout[15:10]}};

assign p_Result_36_3_fu_1197_p4 = {{data_V_data_3_V_dout[15:10]}};

assign p_Result_36_4_fu_1335_p4 = {{data_V_data_4_V_dout[15:10]}};

assign p_Result_36_5_fu_1473_p4 = {{data_V_data_5_V_dout[15:10]}};

assign p_Result_36_6_fu_1611_p4 = {{data_V_data_6_V_dout[15:10]}};

assign p_Result_36_7_fu_1749_p4 = {{data_V_data_7_V_dout[15:10]}};

assign p_Result_36_8_fu_1887_p4 = {{data_V_data_8_V_dout[15:10]}};

assign p_Result_36_9_fu_2025_p4 = {{data_V_data_9_V_dout[15:10]}};

assign p_Result_36_s_fu_2163_p4 = {{data_V_data_10_V_dout[15:10]}};

assign p_Result_s_fu_783_p4 = {{data_V_data_0_V_dout[15:10]}};

assign res_V_data_0_V_din = tmp_data_0_V_reg_2908;

assign res_V_data_10_V_din = tmp_data_10_V_reg_2958;

assign res_V_data_11_V_din = tmp_data_11_V_reg_2963;

assign res_V_data_12_V_din = tmp_data_12_V_reg_2968;

assign res_V_data_13_V_din = tmp_data_13_V_reg_2973;

assign res_V_data_14_V_din = tmp_data_14_V_reg_2978;

assign res_V_data_15_V_din = tmp_data_15_V_reg_2983;

assign res_V_data_1_V_din = tmp_data_1_V_reg_2913;

assign res_V_data_2_V_din = tmp_data_2_V_reg_2918;

assign res_V_data_3_V_din = tmp_data_3_V_reg_2923;

assign res_V_data_4_V_din = tmp_data_4_V_reg_2928;

assign res_V_data_5_V_din = tmp_data_5_V_reg_2933;

assign res_V_data_6_V_din = tmp_data_6_V_reg_2938;

assign res_V_data_7_V_din = tmp_data_7_V_reg_2943;

assign res_V_data_8_V_din = tmp_data_8_V_reg_2948;

assign res_V_data_9_V_din = tmp_data_9_V_reg_2953;

assign select_ln340_10_fu_2193_p3 = ((select_ln777_152_fu_2185_p3[0:0] === 1'b1) ? add_ln415_152_fu_2137_p2 : 6'd63);

assign select_ln340_11_fu_2331_p3 = ((select_ln777_153_fu_2323_p3[0:0] === 1'b1) ? add_ln415_153_fu_2275_p2 : 6'd63);

assign select_ln340_12_fu_2469_p3 = ((select_ln777_154_fu_2461_p3[0:0] === 1'b1) ? add_ln415_154_fu_2413_p2 : 6'd63);

assign select_ln340_13_fu_2607_p3 = ((select_ln777_155_fu_2599_p3[0:0] === 1'b1) ? add_ln415_155_fu_2551_p2 : 6'd63);

assign select_ln340_14_fu_2745_p3 = ((select_ln777_156_fu_2737_p3[0:0] === 1'b1) ? add_ln415_156_fu_2689_p2 : 6'd63);

assign select_ln340_15_fu_2883_p3 = ((select_ln777_157_fu_2875_p3[0:0] === 1'b1) ? add_ln415_157_fu_2827_p2 : 6'd63);

assign select_ln340_1_fu_951_p3 = ((select_ln777_143_fu_943_p3[0:0] === 1'b1) ? add_ln415_143_fu_895_p2 : 6'd63);

assign select_ln340_2_fu_1089_p3 = ((select_ln777_144_fu_1081_p3[0:0] === 1'b1) ? add_ln415_144_fu_1033_p2 : 6'd63);

assign select_ln340_3_fu_1227_p3 = ((select_ln777_145_fu_1219_p3[0:0] === 1'b1) ? add_ln415_145_fu_1171_p2 : 6'd63);

assign select_ln340_4_fu_1365_p3 = ((select_ln777_146_fu_1357_p3[0:0] === 1'b1) ? add_ln415_146_fu_1309_p2 : 6'd63);

assign select_ln340_5_fu_1503_p3 = ((select_ln777_147_fu_1495_p3[0:0] === 1'b1) ? add_ln415_147_fu_1447_p2 : 6'd63);

assign select_ln340_6_fu_1641_p3 = ((select_ln777_148_fu_1633_p3[0:0] === 1'b1) ? add_ln415_148_fu_1585_p2 : 6'd63);

assign select_ln340_7_fu_1779_p3 = ((select_ln777_149_fu_1771_p3[0:0] === 1'b1) ? add_ln415_149_fu_1723_p2 : 6'd63);

assign select_ln340_8_fu_1917_p3 = ((select_ln777_150_fu_1909_p3[0:0] === 1'b1) ? add_ln415_150_fu_1861_p2 : 6'd63);

assign select_ln340_9_fu_2055_p3 = ((select_ln777_151_fu_2047_p3[0:0] === 1'b1) ? add_ln415_151_fu_1999_p2 : 6'd63);

assign select_ln340_fu_813_p3 = ((select_ln777_fu_805_p3[0:0] === 1'b1) ? add_ln415_fu_757_p2 : 6'd63);

assign select_ln777_143_fu_943_p3 = ((and_ln416_143_fu_915_p2[0:0] === 1'b1) ? icmp_ln879_143_fu_931_p2 : icmp_ln768_143_fu_937_p2);

assign select_ln777_144_fu_1081_p3 = ((and_ln416_144_fu_1053_p2[0:0] === 1'b1) ? icmp_ln879_144_fu_1069_p2 : icmp_ln768_144_fu_1075_p2);

assign select_ln777_145_fu_1219_p3 = ((and_ln416_145_fu_1191_p2[0:0] === 1'b1) ? icmp_ln879_145_fu_1207_p2 : icmp_ln768_145_fu_1213_p2);

assign select_ln777_146_fu_1357_p3 = ((and_ln416_146_fu_1329_p2[0:0] === 1'b1) ? icmp_ln879_146_fu_1345_p2 : icmp_ln768_146_fu_1351_p2);

assign select_ln777_147_fu_1495_p3 = ((and_ln416_147_fu_1467_p2[0:0] === 1'b1) ? icmp_ln879_147_fu_1483_p2 : icmp_ln768_147_fu_1489_p2);

assign select_ln777_148_fu_1633_p3 = ((and_ln416_148_fu_1605_p2[0:0] === 1'b1) ? icmp_ln879_148_fu_1621_p2 : icmp_ln768_148_fu_1627_p2);

assign select_ln777_149_fu_1771_p3 = ((and_ln416_149_fu_1743_p2[0:0] === 1'b1) ? icmp_ln879_149_fu_1759_p2 : icmp_ln768_149_fu_1765_p2);

assign select_ln777_150_fu_1909_p3 = ((and_ln416_150_fu_1881_p2[0:0] === 1'b1) ? icmp_ln879_150_fu_1897_p2 : icmp_ln768_150_fu_1903_p2);

assign select_ln777_151_fu_2047_p3 = ((and_ln416_151_fu_2019_p2[0:0] === 1'b1) ? icmp_ln879_151_fu_2035_p2 : icmp_ln768_151_fu_2041_p2);

assign select_ln777_152_fu_2185_p3 = ((and_ln416_152_fu_2157_p2[0:0] === 1'b1) ? icmp_ln879_152_fu_2173_p2 : icmp_ln768_152_fu_2179_p2);

assign select_ln777_153_fu_2323_p3 = ((and_ln416_153_fu_2295_p2[0:0] === 1'b1) ? icmp_ln879_153_fu_2311_p2 : icmp_ln768_153_fu_2317_p2);

assign select_ln777_154_fu_2461_p3 = ((and_ln416_154_fu_2433_p2[0:0] === 1'b1) ? icmp_ln879_154_fu_2449_p2 : icmp_ln768_154_fu_2455_p2);

assign select_ln777_155_fu_2599_p3 = ((and_ln416_155_fu_2571_p2[0:0] === 1'b1) ? icmp_ln879_155_fu_2587_p2 : icmp_ln768_155_fu_2593_p2);

assign select_ln777_156_fu_2737_p3 = ((and_ln416_156_fu_2709_p2[0:0] === 1'b1) ? icmp_ln879_156_fu_2725_p2 : icmp_ln768_156_fu_2731_p2);

assign select_ln777_157_fu_2875_p3 = ((and_ln416_157_fu_2847_p2[0:0] === 1'b1) ? icmp_ln879_157_fu_2863_p2 : icmp_ln768_157_fu_2869_p2);

assign select_ln777_fu_805_p3 = ((and_ln416_fu_777_p2[0:0] === 1'b1) ? icmp_ln879_fu_793_p2 : icmp_ln768_fu_799_p2);

assign start_out = real_start;

assign tmp_630_fu_707_p3 = data_V_data_0_V_dout[32'd4];

assign tmp_631_fu_725_p3 = data_V_data_0_V_dout[32'd9];

assign tmp_632_fu_739_p3 = data_V_data_0_V_dout[32'd3];

assign tmp_633_fu_763_p3 = add_ln415_fu_757_p2[32'd5];

assign tmp_634_fu_845_p3 = data_V_data_1_V_dout[32'd4];

assign tmp_635_fu_863_p3 = data_V_data_1_V_dout[32'd9];

assign tmp_636_fu_877_p3 = data_V_data_1_V_dout[32'd3];

assign tmp_637_fu_901_p3 = add_ln415_143_fu_895_p2[32'd5];

assign tmp_638_fu_983_p3 = data_V_data_2_V_dout[32'd4];

assign tmp_639_fu_1001_p3 = data_V_data_2_V_dout[32'd9];

assign tmp_640_fu_1015_p3 = data_V_data_2_V_dout[32'd3];

assign tmp_641_fu_1039_p3 = add_ln415_144_fu_1033_p2[32'd5];

assign tmp_642_fu_1121_p3 = data_V_data_3_V_dout[32'd4];

assign tmp_643_fu_1139_p3 = data_V_data_3_V_dout[32'd9];

assign tmp_644_fu_1153_p3 = data_V_data_3_V_dout[32'd3];

assign tmp_645_fu_1177_p3 = add_ln415_145_fu_1171_p2[32'd5];

assign tmp_646_fu_1259_p3 = data_V_data_4_V_dout[32'd4];

assign tmp_647_fu_1277_p3 = data_V_data_4_V_dout[32'd9];

assign tmp_648_fu_1291_p3 = data_V_data_4_V_dout[32'd3];

assign tmp_649_fu_1315_p3 = add_ln415_146_fu_1309_p2[32'd5];

assign tmp_650_fu_1397_p3 = data_V_data_5_V_dout[32'd4];

assign tmp_651_fu_1415_p3 = data_V_data_5_V_dout[32'd9];

assign tmp_652_fu_1429_p3 = data_V_data_5_V_dout[32'd3];

assign tmp_653_fu_1453_p3 = add_ln415_147_fu_1447_p2[32'd5];

assign tmp_654_fu_1535_p3 = data_V_data_6_V_dout[32'd4];

assign tmp_655_fu_1553_p3 = data_V_data_6_V_dout[32'd9];

assign tmp_656_fu_1567_p3 = data_V_data_6_V_dout[32'd3];

assign tmp_657_fu_1591_p3 = add_ln415_148_fu_1585_p2[32'd5];

assign tmp_658_fu_1673_p3 = data_V_data_7_V_dout[32'd4];

assign tmp_659_fu_1691_p3 = data_V_data_7_V_dout[32'd9];

assign tmp_660_fu_1705_p3 = data_V_data_7_V_dout[32'd3];

assign tmp_661_fu_1729_p3 = add_ln415_149_fu_1723_p2[32'd5];

assign tmp_662_fu_1811_p3 = data_V_data_8_V_dout[32'd4];

assign tmp_663_fu_1829_p3 = data_V_data_8_V_dout[32'd9];

assign tmp_664_fu_1843_p3 = data_V_data_8_V_dout[32'd3];

assign tmp_665_fu_1867_p3 = add_ln415_150_fu_1861_p2[32'd5];

assign tmp_666_fu_1949_p3 = data_V_data_9_V_dout[32'd4];

assign tmp_667_fu_1967_p3 = data_V_data_9_V_dout[32'd9];

assign tmp_668_fu_1981_p3 = data_V_data_9_V_dout[32'd3];

assign tmp_669_fu_2005_p3 = add_ln415_151_fu_1999_p2[32'd5];

assign tmp_670_fu_2087_p3 = data_V_data_10_V_dout[32'd4];

assign tmp_671_fu_2105_p3 = data_V_data_10_V_dout[32'd9];

assign tmp_672_fu_2119_p3 = data_V_data_10_V_dout[32'd3];

assign tmp_673_fu_2143_p3 = add_ln415_152_fu_2137_p2[32'd5];

assign tmp_674_fu_2225_p3 = data_V_data_11_V_dout[32'd4];

assign tmp_675_fu_2243_p3 = data_V_data_11_V_dout[32'd9];

assign tmp_676_fu_2257_p3 = data_V_data_11_V_dout[32'd3];

assign tmp_677_fu_2281_p3 = add_ln415_153_fu_2275_p2[32'd5];

assign tmp_678_fu_2363_p3 = data_V_data_12_V_dout[32'd4];

assign tmp_679_fu_2381_p3 = data_V_data_12_V_dout[32'd9];

assign tmp_680_fu_2395_p3 = data_V_data_12_V_dout[32'd3];

assign tmp_681_fu_2419_p3 = add_ln415_154_fu_2413_p2[32'd5];

assign tmp_682_fu_2501_p3 = data_V_data_13_V_dout[32'd4];

assign tmp_683_fu_2519_p3 = data_V_data_13_V_dout[32'd9];

assign tmp_684_fu_2533_p3 = data_V_data_13_V_dout[32'd3];

assign tmp_685_fu_2557_p3 = add_ln415_155_fu_2551_p2[32'd5];

assign tmp_686_fu_2639_p3 = data_V_data_14_V_dout[32'd4];

assign tmp_687_fu_2657_p3 = data_V_data_14_V_dout[32'd9];

assign tmp_688_fu_2671_p3 = data_V_data_14_V_dout[32'd3];

assign tmp_689_fu_2695_p3 = add_ln415_156_fu_2689_p2[32'd5];

assign tmp_690_fu_2777_p3 = data_V_data_15_V_dout[32'd4];

assign tmp_691_fu_2795_p3 = data_V_data_15_V_dout[32'd9];

assign tmp_692_fu_2809_p3 = data_V_data_15_V_dout[32'd3];

assign tmp_693_fu_2833_p3 = add_ln415_157_fu_2827_p2[32'd5];

assign tmp_data_0_V_fu_821_p3 = ((icmp_ln1494_fu_691_p2[0:0] === 1'b1) ? select_ln340_fu_813_p3 : 6'd0);

assign tmp_data_10_V_fu_2201_p3 = ((icmp_ln1494_10_fu_2071_p2[0:0] === 1'b1) ? select_ln340_10_fu_2193_p3 : 6'd0);

assign tmp_data_11_V_fu_2339_p3 = ((icmp_ln1494_11_fu_2209_p2[0:0] === 1'b1) ? select_ln340_11_fu_2331_p3 : 6'd0);

assign tmp_data_12_V_fu_2477_p3 = ((icmp_ln1494_12_fu_2347_p2[0:0] === 1'b1) ? select_ln340_12_fu_2469_p3 : 6'd0);

assign tmp_data_13_V_fu_2615_p3 = ((icmp_ln1494_13_fu_2485_p2[0:0] === 1'b1) ? select_ln340_13_fu_2607_p3 : 6'd0);

assign tmp_data_14_V_fu_2753_p3 = ((icmp_ln1494_14_fu_2623_p2[0:0] === 1'b1) ? select_ln340_14_fu_2745_p3 : 6'd0);

assign tmp_data_15_V_fu_2891_p3 = ((icmp_ln1494_15_fu_2761_p2[0:0] === 1'b1) ? select_ln340_15_fu_2883_p3 : 6'd0);

assign tmp_data_1_V_fu_959_p3 = ((icmp_ln1494_1_fu_829_p2[0:0] === 1'b1) ? select_ln340_1_fu_951_p3 : 6'd0);

assign tmp_data_2_V_fu_1097_p3 = ((icmp_ln1494_2_fu_967_p2[0:0] === 1'b1) ? select_ln340_2_fu_1089_p3 : 6'd0);

assign tmp_data_3_V_fu_1235_p3 = ((icmp_ln1494_3_fu_1105_p2[0:0] === 1'b1) ? select_ln340_3_fu_1227_p3 : 6'd0);

assign tmp_data_4_V_fu_1373_p3 = ((icmp_ln1494_4_fu_1243_p2[0:0] === 1'b1) ? select_ln340_4_fu_1365_p3 : 6'd0);

assign tmp_data_5_V_fu_1511_p3 = ((icmp_ln1494_5_fu_1381_p2[0:0] === 1'b1) ? select_ln340_5_fu_1503_p3 : 6'd0);

assign tmp_data_6_V_fu_1649_p3 = ((icmp_ln1494_6_fu_1519_p2[0:0] === 1'b1) ? select_ln340_6_fu_1641_p3 : 6'd0);

assign tmp_data_7_V_fu_1787_p3 = ((icmp_ln1494_7_fu_1657_p2[0:0] === 1'b1) ? select_ln340_7_fu_1779_p3 : 6'd0);

assign tmp_data_8_V_fu_1925_p3 = ((icmp_ln1494_8_fu_1795_p2[0:0] === 1'b1) ? select_ln340_8_fu_1917_p3 : 6'd0);

assign tmp_data_9_V_fu_2063_p3 = ((icmp_ln1494_9_fu_1933_p2[0:0] === 1'b1) ? select_ln340_9_fu_2055_p3 : 6'd0);

assign trunc_ln708_139_fu_973_p4 = {{data_V_data_2_V_dout[9:4]}};

assign trunc_ln708_140_fu_1111_p4 = {{data_V_data_3_V_dout[9:4]}};

assign trunc_ln708_141_fu_1249_p4 = {{data_V_data_4_V_dout[9:4]}};

assign trunc_ln708_142_fu_1387_p4 = {{data_V_data_5_V_dout[9:4]}};

assign trunc_ln708_143_fu_1525_p4 = {{data_V_data_6_V_dout[9:4]}};

assign trunc_ln708_144_fu_1663_p4 = {{data_V_data_7_V_dout[9:4]}};

assign trunc_ln708_145_fu_1801_p4 = {{data_V_data_8_V_dout[9:4]}};

assign trunc_ln708_146_fu_1939_p4 = {{data_V_data_9_V_dout[9:4]}};

assign trunc_ln708_147_fu_2077_p4 = {{data_V_data_10_V_dout[9:4]}};

assign trunc_ln708_148_fu_2215_p4 = {{data_V_data_11_V_dout[9:4]}};

assign trunc_ln708_149_fu_2353_p4 = {{data_V_data_12_V_dout[9:4]}};

assign trunc_ln708_150_fu_2491_p4 = {{data_V_data_13_V_dout[9:4]}};

assign trunc_ln708_151_fu_2629_p4 = {{data_V_data_14_V_dout[9:4]}};

assign trunc_ln708_152_fu_2767_p4 = {{data_V_data_15_V_dout[9:4]}};

assign trunc_ln708_s_fu_835_p4 = {{data_V_data_1_V_dout[9:4]}};

assign trunc_ln718_143_fu_853_p1 = data_V_data_1_V_dout[2:0];

assign trunc_ln718_144_fu_991_p1 = data_V_data_2_V_dout[2:0];

assign trunc_ln718_145_fu_1129_p1 = data_V_data_3_V_dout[2:0];

assign trunc_ln718_146_fu_1267_p1 = data_V_data_4_V_dout[2:0];

assign trunc_ln718_147_fu_1405_p1 = data_V_data_5_V_dout[2:0];

assign trunc_ln718_148_fu_1543_p1 = data_V_data_6_V_dout[2:0];

assign trunc_ln718_149_fu_1681_p1 = data_V_data_7_V_dout[2:0];

assign trunc_ln718_150_fu_1819_p1 = data_V_data_8_V_dout[2:0];

assign trunc_ln718_151_fu_1957_p1 = data_V_data_9_V_dout[2:0];

assign trunc_ln718_152_fu_2095_p1 = data_V_data_10_V_dout[2:0];

assign trunc_ln718_153_fu_2233_p1 = data_V_data_11_V_dout[2:0];

assign trunc_ln718_154_fu_2371_p1 = data_V_data_12_V_dout[2:0];

assign trunc_ln718_155_fu_2509_p1 = data_V_data_13_V_dout[2:0];

assign trunc_ln718_156_fu_2647_p1 = data_V_data_14_V_dout[2:0];

assign trunc_ln718_157_fu_2785_p1 = data_V_data_15_V_dout[2:0];

assign trunc_ln718_fu_715_p1 = data_V_data_0_V_dout[2:0];

assign trunc_ln_fu_697_p4 = {{data_V_data_0_V_dout[9:4]}};

assign xor_ln416_143_fu_909_p2 = (tmp_637_fu_901_p3 ^ 1'd1);

assign xor_ln416_144_fu_1047_p2 = (tmp_641_fu_1039_p3 ^ 1'd1);

assign xor_ln416_145_fu_1185_p2 = (tmp_645_fu_1177_p3 ^ 1'd1);

assign xor_ln416_146_fu_1323_p2 = (tmp_649_fu_1315_p3 ^ 1'd1);

assign xor_ln416_147_fu_1461_p2 = (tmp_653_fu_1453_p3 ^ 1'd1);

assign xor_ln416_148_fu_1599_p2 = (tmp_657_fu_1591_p3 ^ 1'd1);

assign xor_ln416_149_fu_1737_p2 = (tmp_661_fu_1729_p3 ^ 1'd1);

assign xor_ln416_150_fu_1875_p2 = (tmp_665_fu_1867_p3 ^ 1'd1);

assign xor_ln416_151_fu_2013_p2 = (tmp_669_fu_2005_p3 ^ 1'd1);

assign xor_ln416_152_fu_2151_p2 = (tmp_673_fu_2143_p3 ^ 1'd1);

assign xor_ln416_153_fu_2289_p2 = (tmp_677_fu_2281_p3 ^ 1'd1);

assign xor_ln416_154_fu_2427_p2 = (tmp_681_fu_2419_p3 ^ 1'd1);

assign xor_ln416_155_fu_2565_p2 = (tmp_685_fu_2557_p3 ^ 1'd1);

assign xor_ln416_156_fu_2703_p2 = (tmp_689_fu_2695_p3 ^ 1'd1);

assign xor_ln416_157_fu_2841_p2 = (tmp_693_fu_2833_p3 ^ 1'd1);

assign xor_ln416_fu_771_p2 = (tmp_633_fu_763_p3 ^ 1'd1);

assign zext_ln415_143_fu_891_p1 = and_ln415_1_fu_885_p2;

assign zext_ln415_144_fu_1029_p1 = and_ln415_2_fu_1023_p2;

assign zext_ln415_145_fu_1167_p1 = and_ln415_3_fu_1161_p2;

assign zext_ln415_146_fu_1305_p1 = and_ln415_4_fu_1299_p2;

assign zext_ln415_147_fu_1443_p1 = and_ln415_5_fu_1437_p2;

assign zext_ln415_148_fu_1581_p1 = and_ln415_6_fu_1575_p2;

assign zext_ln415_149_fu_1719_p1 = and_ln415_7_fu_1713_p2;

assign zext_ln415_150_fu_1857_p1 = and_ln415_8_fu_1851_p2;

assign zext_ln415_151_fu_1995_p1 = and_ln415_9_fu_1989_p2;

assign zext_ln415_152_fu_2133_p1 = and_ln415_10_fu_2127_p2;

assign zext_ln415_153_fu_2271_p1 = and_ln415_11_fu_2265_p2;

assign zext_ln415_154_fu_2409_p1 = and_ln415_12_fu_2403_p2;

assign zext_ln415_155_fu_2547_p1 = and_ln415_13_fu_2541_p2;

assign zext_ln415_156_fu_2685_p1 = and_ln415_14_fu_2679_p2;

assign zext_ln415_157_fu_2823_p1 = and_ln415_15_fu_2817_p2;

assign zext_ln415_fu_753_p1 = and_ln415_fu_747_p2;

endmodule //relu_array_ap_fixed_16u_array_ap_ufixed_6_0_4_0_0_16u_relu_config4_s
