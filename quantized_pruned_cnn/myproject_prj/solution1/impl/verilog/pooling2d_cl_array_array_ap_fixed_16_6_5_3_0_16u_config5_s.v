// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        data_V_data_10_V_dout,
        data_V_data_10_V_empty_n,
        data_V_data_10_V_read,
        data_V_data_11_V_dout,
        data_V_data_11_V_empty_n,
        data_V_data_11_V_read,
        data_V_data_12_V_dout,
        data_V_data_12_V_empty_n,
        data_V_data_12_V_read,
        data_V_data_13_V_dout,
        data_V_data_13_V_empty_n,
        data_V_data_13_V_read,
        data_V_data_14_V_dout,
        data_V_data_14_V_empty_n,
        data_V_data_14_V_read,
        data_V_data_15_V_dout,
        data_V_data_15_V_empty_n,
        data_V_data_15_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        res_V_data_10_V_din,
        res_V_data_10_V_full_n,
        res_V_data_10_V_write,
        res_V_data_11_V_din,
        res_V_data_11_V_full_n,
        res_V_data_11_V_write,
        res_V_data_12_V_din,
        res_V_data_12_V_full_n,
        res_V_data_12_V_write,
        res_V_data_13_V_din,
        res_V_data_13_V_full_n,
        res_V_data_13_V_write,
        res_V_data_14_V_din,
        res_V_data_14_V_full_n,
        res_V_data_14_V_write,
        res_V_data_15_V_din,
        res_V_data_15_V_full_n,
        res_V_data_15_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [5:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [5:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [5:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [5:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [5:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [5:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [5:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [5:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [5:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [5:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input  [5:0] data_V_data_10_V_dout;
input   data_V_data_10_V_empty_n;
output   data_V_data_10_V_read;
input  [5:0] data_V_data_11_V_dout;
input   data_V_data_11_V_empty_n;
output   data_V_data_11_V_read;
input  [5:0] data_V_data_12_V_dout;
input   data_V_data_12_V_empty_n;
output   data_V_data_12_V_read;
input  [5:0] data_V_data_13_V_dout;
input   data_V_data_13_V_empty_n;
output   data_V_data_13_V_read;
input  [5:0] data_V_data_14_V_dout;
input   data_V_data_14_V_empty_n;
output   data_V_data_14_V_read;
input  [5:0] data_V_data_15_V_dout;
input   data_V_data_15_V_empty_n;
output   data_V_data_15_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output  [15:0] res_V_data_10_V_din;
input   res_V_data_10_V_full_n;
output   res_V_data_10_V_write;
output  [15:0] res_V_data_11_V_din;
input   res_V_data_11_V_full_n;
output   res_V_data_11_V_write;
output  [15:0] res_V_data_12_V_din;
input   res_V_data_12_V_full_n;
output   res_V_data_12_V_write;
output  [15:0] res_V_data_13_V_din;
input   res_V_data_13_V_full_n;
output   res_V_data_13_V_write;
output  [15:0] res_V_data_14_V_din;
input   res_V_data_14_V_full_n;
output   res_V_data_14_V_write;
output  [15:0] res_V_data_15_V_din;
input   res_V_data_15_V_full_n;
output   res_V_data_15_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg data_V_data_10_V_read;
reg data_V_data_11_V_read;
reg data_V_data_12_V_read;
reg data_V_data_13_V_read;
reg data_V_data_14_V_read;
reg data_V_data_15_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg res_V_data_10_V_write;
reg res_V_data_11_V_write;
reg res_V_data_12_V_write;
reg res_V_data_13_V_write;
reg res_V_data_14_V_write;
reg res_V_data_15_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_2;
reg   [31:0] sX_2;
reg   [31:0] pY_2;
reg   [31:0] sY_2;
reg   [5:0] kernel_data_V_3_16;
reg   [5:0] kernel_data_V_3_17;
reg   [5:0] kernel_data_V_3_18;
reg   [5:0] kernel_data_V_3_19;
reg   [5:0] kernel_data_V_3_20;
reg   [5:0] kernel_data_V_3_21;
reg   [5:0] kernel_data_V_3_22;
reg   [5:0] kernel_data_V_3_23;
reg   [5:0] kernel_data_V_3_24;
reg   [5:0] kernel_data_V_3_25;
reg   [5:0] kernel_data_V_3_26;
reg   [5:0] kernel_data_V_3_27;
reg   [5:0] kernel_data_V_3_28;
reg   [5:0] kernel_data_V_3_29;
reg   [5:0] kernel_data_V_3_30;
reg   [5:0] kernel_data_V_3_31;
reg   [5:0] kernel_data_V_3_48;
reg   [5:0] kernel_data_V_3_49;
reg   [5:0] kernel_data_V_3_50;
reg   [5:0] kernel_data_V_3_51;
reg   [5:0] kernel_data_V_3_52;
reg   [5:0] kernel_data_V_3_53;
reg   [5:0] kernel_data_V_3_54;
reg   [5:0] kernel_data_V_3_55;
reg   [5:0] kernel_data_V_3_56;
reg   [5:0] kernel_data_V_3_57;
reg   [5:0] kernel_data_V_3_58;
reg   [5:0] kernel_data_V_3_59;
reg   [5:0] kernel_data_V_3_60;
reg   [5:0] kernel_data_V_3_61;
reg   [5:0] kernel_data_V_3_62;
reg   [5:0] kernel_data_V_3_63;
reg    line_buffer_Array_V_3_0_0_ce0;
reg    line_buffer_Array_V_3_0_0_we0;
wire   [5:0] line_buffer_Array_V_3_0_0_q0;
reg    line_buffer_Array_V_3_0_1_ce0;
reg    line_buffer_Array_V_3_0_1_we0;
wire   [5:0] line_buffer_Array_V_3_0_1_q0;
reg    line_buffer_Array_V_3_0_2_ce0;
reg    line_buffer_Array_V_3_0_2_we0;
wire   [5:0] line_buffer_Array_V_3_0_2_q0;
reg    line_buffer_Array_V_3_0_3_ce0;
reg    line_buffer_Array_V_3_0_3_we0;
wire   [5:0] line_buffer_Array_V_3_0_3_q0;
reg    line_buffer_Array_V_3_0_4_ce0;
reg    line_buffer_Array_V_3_0_4_we0;
wire   [5:0] line_buffer_Array_V_3_0_4_q0;
reg    line_buffer_Array_V_3_0_5_ce0;
reg    line_buffer_Array_V_3_0_5_we0;
wire   [5:0] line_buffer_Array_V_3_0_5_q0;
reg    line_buffer_Array_V_3_0_6_ce0;
reg    line_buffer_Array_V_3_0_6_we0;
wire   [5:0] line_buffer_Array_V_3_0_6_q0;
reg    line_buffer_Array_V_3_0_7_ce0;
reg    line_buffer_Array_V_3_0_7_we0;
wire   [5:0] line_buffer_Array_V_3_0_7_q0;
reg    line_buffer_Array_V_3_0_8_ce0;
reg    line_buffer_Array_V_3_0_8_we0;
wire   [5:0] line_buffer_Array_V_3_0_8_q0;
reg    line_buffer_Array_V_3_0_9_ce0;
reg    line_buffer_Array_V_3_0_9_we0;
wire   [5:0] line_buffer_Array_V_3_0_9_q0;
reg    line_buffer_Array_V_3_0_10_ce0;
reg    line_buffer_Array_V_3_0_10_we0;
wire   [5:0] line_buffer_Array_V_3_0_10_q0;
reg    line_buffer_Array_V_3_0_11_ce0;
reg    line_buffer_Array_V_3_0_11_we0;
wire   [5:0] line_buffer_Array_V_3_0_11_q0;
reg    line_buffer_Array_V_3_0_12_ce0;
reg    line_buffer_Array_V_3_0_12_we0;
wire   [5:0] line_buffer_Array_V_3_0_12_q0;
reg    line_buffer_Array_V_3_0_13_ce0;
reg    line_buffer_Array_V_3_0_13_we0;
wire   [5:0] line_buffer_Array_V_3_0_13_q0;
reg    line_buffer_Array_V_3_0_14_ce0;
reg    line_buffer_Array_V_3_0_14_we0;
wire   [5:0] line_buffer_Array_V_3_0_14_q0;
reg    line_buffer_Array_V_3_0_15_ce0;
reg    line_buffer_Array_V_3_0_15_we0;
wire   [5:0] line_buffer_Array_V_3_0_15_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln241_reg_2757;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    data_V_data_6_V_blk_n;
reg    data_V_data_7_V_blk_n;
reg    data_V_data_8_V_blk_n;
reg    data_V_data_9_V_blk_n;
reg    data_V_data_10_V_blk_n;
reg    data_V_data_11_V_blk_n;
reg    data_V_data_12_V_blk_n;
reg    data_V_data_13_V_blk_n;
reg    data_V_data_14_V_blk_n;
reg    data_V_data_15_V_blk_n;
reg    res_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] and_ln191_6_reg_2766;
reg   [0:0] and_ln191_6_reg_2766_pp0_iter1_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg    res_V_data_6_V_blk_n;
reg    res_V_data_7_V_blk_n;
reg    res_V_data_8_V_blk_n;
reg    res_V_data_9_V_blk_n;
reg    res_V_data_10_V_blk_n;
reg    res_V_data_11_V_blk_n;
reg    res_V_data_12_V_blk_n;
reg    res_V_data_13_V_blk_n;
reg    res_V_data_14_V_blk_n;
reg    res_V_data_15_V_blk_n;
reg   [9:0] indvar_flatten_reg_348;
wire   [0:0] icmp_ln241_fu_370_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    io_acc_block_signal_op455;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln241_fu_376_p2;
reg   [9:0] add_ln241_reg_2761;
wire   [0:0] and_ln191_6_fu_434_p2;
wire   [0:0] icmp_ln212_fu_440_p2;
reg   [0:0] icmp_ln212_reg_2770;
wire   [31:0] select_ln227_fu_464_p3;
reg   [31:0] select_ln227_reg_2774;
wire   [0:0] icmp_ln216_fu_484_p2;
reg   [0:0] icmp_ln216_reg_2779;
wire   [31:0] select_ln222_fu_508_p3;
reg   [31:0] select_ln222_reg_2783;
reg   [5:0] shift_buffer_1_0_V_reg_2788;
wire    io_acc_block_signal_op76;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [5:0] shift_buffer_1_1_V_reg_2794;
reg   [5:0] shift_buffer_1_2_V_reg_2800;
reg   [5:0] shift_buffer_1_3_V_reg_2806;
reg   [5:0] shift_buffer_1_4_V_reg_2812;
reg   [5:0] shift_buffer_1_5_V_reg_2818;
reg   [5:0] shift_buffer_1_6_V_reg_2824;
reg   [5:0] shift_buffer_1_7_V_reg_2830;
reg   [5:0] shift_buffer_1_8_V_reg_2836;
reg   [5:0] shift_buffer_1_9_V_reg_2842;
reg   [5:0] shift_buffer_1_10_V_reg_2848;
reg   [5:0] shift_buffer_1_11_V_reg_2854;
reg   [5:0] shift_buffer_1_12_V_reg_2860;
reg   [5:0] shift_buffer_1_13_V_reg_2866;
reg   [5:0] shift_buffer_1_14_V_reg_2872;
reg   [5:0] shift_buffer_1_15_V_reg_2878;
reg   [5:0] DataOut_V_248_reg_2884;
reg   [5:0] DataOut_V_249_reg_2890;
reg   [5:0] DataOut_V_250_reg_2896;
reg   [5:0] DataOut_V_251_reg_2902;
reg   [5:0] DataOut_V_252_reg_2908;
reg   [5:0] DataOut_V_253_reg_2914;
reg   [5:0] DataOut_V_254_reg_2920;
reg   [5:0] DataOut_V_255_reg_2926;
reg   [5:0] DataOut_V_256_reg_2932;
reg   [5:0] DataOut_V_257_reg_2938;
reg   [5:0] DataOut_V_258_reg_2944;
reg   [5:0] DataOut_V_259_reg_2950;
reg   [5:0] DataOut_V_260_reg_2956;
reg   [5:0] DataOut_V_261_reg_2962;
reg   [5:0] DataOut_V_262_reg_2968;
reg   [5:0] DataOut_V_reg_2974;
wire   [9:0] pool_window_0_V_fu_1039_p3;
reg   [9:0] pool_window_0_V_reg_2980;
wire   [9:0] pool_window_1_V_fu_1047_p3;
reg   [9:0] pool_window_1_V_reg_2985;
wire   [9:0] pool_window_2_V_fu_1054_p3;
reg   [9:0] pool_window_2_V_reg_2990;
wire   [9:0] pool_window_3_V_fu_1062_p3;
reg   [9:0] pool_window_3_V_reg_2995;
wire   [0:0] icmp_ln1496_fu_1069_p2;
reg   [0:0] icmp_ln1496_reg_3000;
wire   [0:0] icmp_ln1496_106_fu_1083_p2;
reg   [0:0] icmp_ln1496_106_reg_3005;
wire   [0:0] icmp_ln1496_107_fu_1097_p2;
reg   [0:0] icmp_ln1496_107_reg_3010;
wire   [9:0] pool_window_0_V_80_fu_1103_p3;
reg   [9:0] pool_window_0_V_80_reg_3015;
wire   [9:0] pool_window_1_V_80_fu_1111_p3;
reg   [9:0] pool_window_1_V_80_reg_3020;
wire   [9:0] pool_window_2_V_80_fu_1118_p3;
reg   [9:0] pool_window_2_V_80_reg_3025;
wire   [9:0] pool_window_3_V_80_fu_1126_p3;
reg   [9:0] pool_window_3_V_80_reg_3030;
wire   [0:0] icmp_ln1496_1_fu_1133_p2;
reg   [0:0] icmp_ln1496_1_reg_3035;
wire   [0:0] icmp_ln1496_108_fu_1147_p2;
reg   [0:0] icmp_ln1496_108_reg_3040;
wire   [0:0] icmp_ln1496_109_fu_1161_p2;
reg   [0:0] icmp_ln1496_109_reg_3045;
wire   [9:0] pool_window_0_V_82_fu_1167_p3;
reg   [9:0] pool_window_0_V_82_reg_3050;
wire   [9:0] pool_window_1_V_82_fu_1175_p3;
reg   [9:0] pool_window_1_V_82_reg_3055;
wire   [9:0] pool_window_2_V_82_fu_1182_p3;
reg   [9:0] pool_window_2_V_82_reg_3060;
wire   [9:0] pool_window_3_V_82_fu_1190_p3;
reg   [9:0] pool_window_3_V_82_reg_3065;
wire   [0:0] icmp_ln1496_2_fu_1197_p2;
reg   [0:0] icmp_ln1496_2_reg_3070;
wire   [0:0] icmp_ln1496_110_fu_1211_p2;
reg   [0:0] icmp_ln1496_110_reg_3075;
wire   [0:0] icmp_ln1496_111_fu_1225_p2;
reg   [0:0] icmp_ln1496_111_reg_3080;
wire   [9:0] pool_window_0_V_84_fu_1231_p3;
reg   [9:0] pool_window_0_V_84_reg_3085;
wire   [9:0] pool_window_1_V_84_fu_1239_p3;
reg   [9:0] pool_window_1_V_84_reg_3090;
wire   [9:0] pool_window_2_V_84_fu_1246_p3;
reg   [9:0] pool_window_2_V_84_reg_3095;
wire   [9:0] pool_window_3_V_84_fu_1254_p3;
reg   [9:0] pool_window_3_V_84_reg_3100;
wire   [0:0] icmp_ln1496_3_fu_1261_p2;
reg   [0:0] icmp_ln1496_3_reg_3105;
wire   [0:0] icmp_ln1496_112_fu_1275_p2;
reg   [0:0] icmp_ln1496_112_reg_3110;
wire   [0:0] icmp_ln1496_113_fu_1289_p2;
reg   [0:0] icmp_ln1496_113_reg_3115;
wire   [9:0] pool_window_0_V_86_fu_1295_p3;
reg   [9:0] pool_window_0_V_86_reg_3120;
wire   [9:0] pool_window_1_V_86_fu_1303_p3;
reg   [9:0] pool_window_1_V_86_reg_3125;
wire   [9:0] pool_window_2_V_86_fu_1310_p3;
reg   [9:0] pool_window_2_V_86_reg_3130;
wire   [9:0] pool_window_3_V_86_fu_1318_p3;
reg   [9:0] pool_window_3_V_86_reg_3135;
wire   [0:0] icmp_ln1496_4_fu_1325_p2;
reg   [0:0] icmp_ln1496_4_reg_3140;
wire   [0:0] icmp_ln1496_114_fu_1339_p2;
reg   [0:0] icmp_ln1496_114_reg_3145;
wire   [0:0] icmp_ln1496_115_fu_1353_p2;
reg   [0:0] icmp_ln1496_115_reg_3150;
wire   [9:0] pool_window_0_V_88_fu_1359_p3;
reg   [9:0] pool_window_0_V_88_reg_3155;
wire   [9:0] pool_window_1_V_88_fu_1367_p3;
reg   [9:0] pool_window_1_V_88_reg_3160;
wire   [9:0] pool_window_2_V_88_fu_1374_p3;
reg   [9:0] pool_window_2_V_88_reg_3165;
wire   [9:0] pool_window_3_V_88_fu_1382_p3;
reg   [9:0] pool_window_3_V_88_reg_3170;
wire   [0:0] icmp_ln1496_116_fu_1389_p2;
reg   [0:0] icmp_ln1496_116_reg_3175;
wire   [0:0] icmp_ln1496_117_fu_1403_p2;
reg   [0:0] icmp_ln1496_117_reg_3180;
wire   [0:0] icmp_ln1496_118_fu_1417_p2;
reg   [0:0] icmp_ln1496_118_reg_3185;
wire   [9:0] pool_window_0_V_90_fu_1423_p3;
reg   [9:0] pool_window_0_V_90_reg_3190;
wire   [9:0] pool_window_1_V_90_fu_1431_p3;
reg   [9:0] pool_window_1_V_90_reg_3195;
wire   [9:0] pool_window_2_V_90_fu_1438_p3;
reg   [9:0] pool_window_2_V_90_reg_3200;
wire   [9:0] pool_window_3_V_90_fu_1446_p3;
reg   [9:0] pool_window_3_V_90_reg_3205;
wire   [0:0] icmp_ln1496_119_fu_1453_p2;
reg   [0:0] icmp_ln1496_119_reg_3210;
wire   [0:0] icmp_ln1496_120_fu_1467_p2;
reg   [0:0] icmp_ln1496_120_reg_3215;
wire   [0:0] icmp_ln1496_121_fu_1481_p2;
reg   [0:0] icmp_ln1496_121_reg_3220;
wire   [9:0] pool_window_0_V_92_fu_1487_p3;
reg   [9:0] pool_window_0_V_92_reg_3225;
wire   [9:0] pool_window_1_V_92_fu_1495_p3;
reg   [9:0] pool_window_1_V_92_reg_3230;
wire   [9:0] pool_window_2_V_92_fu_1502_p3;
reg   [9:0] pool_window_2_V_92_reg_3235;
wire   [9:0] pool_window_3_V_92_fu_1510_p3;
reg   [9:0] pool_window_3_V_92_reg_3240;
wire   [0:0] icmp_ln1496_7_fu_1517_p2;
reg   [0:0] icmp_ln1496_7_reg_3245;
wire   [0:0] icmp_ln1496_122_fu_1531_p2;
reg   [0:0] icmp_ln1496_122_reg_3250;
wire   [0:0] icmp_ln1496_123_fu_1545_p2;
reg   [0:0] icmp_ln1496_123_reg_3255;
wire   [9:0] pool_window_0_V_94_fu_1551_p3;
reg   [9:0] pool_window_0_V_94_reg_3260;
wire   [9:0] pool_window_1_V_94_fu_1559_p3;
reg   [9:0] pool_window_1_V_94_reg_3265;
wire   [9:0] pool_window_2_V_94_fu_1566_p3;
reg   [9:0] pool_window_2_V_94_reg_3270;
wire   [9:0] pool_window_3_V_94_fu_1574_p3;
reg   [9:0] pool_window_3_V_94_reg_3275;
wire   [0:0] icmp_ln1496_8_fu_1581_p2;
reg   [0:0] icmp_ln1496_8_reg_3280;
wire   [0:0] icmp_ln1496_124_fu_1595_p2;
reg   [0:0] icmp_ln1496_124_reg_3285;
wire   [0:0] icmp_ln1496_125_fu_1609_p2;
reg   [0:0] icmp_ln1496_125_reg_3290;
wire   [9:0] pool_window_0_V_96_fu_1615_p3;
reg   [9:0] pool_window_0_V_96_reg_3295;
wire   [9:0] pool_window_1_V_96_fu_1623_p3;
reg   [9:0] pool_window_1_V_96_reg_3300;
wire   [9:0] pool_window_2_V_96_fu_1630_p3;
reg   [9:0] pool_window_2_V_96_reg_3305;
wire   [9:0] pool_window_3_V_96_fu_1638_p3;
reg   [9:0] pool_window_3_V_96_reg_3310;
wire   [0:0] icmp_ln1496_9_fu_1645_p2;
reg   [0:0] icmp_ln1496_9_reg_3315;
wire   [0:0] icmp_ln1496_126_fu_1659_p2;
reg   [0:0] icmp_ln1496_126_reg_3320;
wire   [0:0] icmp_ln1496_127_fu_1673_p2;
reg   [0:0] icmp_ln1496_127_reg_3325;
wire   [9:0] pool_window_0_V_98_fu_1679_p3;
reg   [9:0] pool_window_0_V_98_reg_3330;
wire   [9:0] pool_window_1_V_98_fu_1687_p3;
reg   [9:0] pool_window_1_V_98_reg_3335;
wire   [9:0] pool_window_2_V_98_fu_1694_p3;
reg   [9:0] pool_window_2_V_98_reg_3340;
wire   [9:0] pool_window_3_V_98_fu_1702_p3;
reg   [9:0] pool_window_3_V_98_reg_3345;
wire   [0:0] icmp_ln1496_10_fu_1709_p2;
reg   [0:0] icmp_ln1496_10_reg_3350;
wire   [0:0] icmp_ln1496_128_fu_1723_p2;
reg   [0:0] icmp_ln1496_128_reg_3355;
wire   [0:0] icmp_ln1496_129_fu_1737_p2;
reg   [0:0] icmp_ln1496_129_reg_3360;
wire   [9:0] pool_window_0_V_100_fu_1743_p3;
reg   [9:0] pool_window_0_V_100_reg_3365;
wire   [9:0] pool_window_1_V_100_fu_1751_p3;
reg   [9:0] pool_window_1_V_100_reg_3370;
wire   [9:0] pool_window_2_V_100_fu_1758_p3;
reg   [9:0] pool_window_2_V_100_reg_3375;
wire   [9:0] pool_window_3_V_100_fu_1766_p3;
reg   [9:0] pool_window_3_V_100_reg_3380;
wire   [0:0] icmp_ln1496_11_fu_1773_p2;
reg   [0:0] icmp_ln1496_11_reg_3385;
wire   [0:0] icmp_ln1496_130_fu_1787_p2;
reg   [0:0] icmp_ln1496_130_reg_3390;
wire   [0:0] icmp_ln1496_131_fu_1801_p2;
reg   [0:0] icmp_ln1496_131_reg_3395;
wire   [9:0] pool_window_0_V_102_fu_1807_p3;
reg   [9:0] pool_window_0_V_102_reg_3400;
wire   [9:0] pool_window_1_V_102_fu_1815_p3;
reg   [9:0] pool_window_1_V_102_reg_3405;
wire   [9:0] pool_window_2_V_102_fu_1822_p3;
reg   [9:0] pool_window_2_V_102_reg_3410;
wire   [9:0] pool_window_3_V_102_fu_1830_p3;
reg   [9:0] pool_window_3_V_102_reg_3415;
wire   [0:0] icmp_ln1496_12_fu_1837_p2;
reg   [0:0] icmp_ln1496_12_reg_3420;
wire   [0:0] icmp_ln1496_132_fu_1851_p2;
reg   [0:0] icmp_ln1496_132_reg_3425;
wire   [0:0] icmp_ln1496_133_fu_1865_p2;
reg   [0:0] icmp_ln1496_133_reg_3430;
wire   [9:0] pool_window_0_V_104_fu_1871_p3;
reg   [9:0] pool_window_0_V_104_reg_3435;
wire   [9:0] pool_window_1_V_104_fu_1879_p3;
reg   [9:0] pool_window_1_V_104_reg_3440;
wire   [9:0] pool_window_2_V_104_fu_1886_p3;
reg   [9:0] pool_window_2_V_104_reg_3445;
wire   [9:0] pool_window_3_V_104_fu_1894_p3;
reg   [9:0] pool_window_3_V_104_reg_3450;
wire   [0:0] icmp_ln1496_13_fu_1901_p2;
reg   [0:0] icmp_ln1496_13_reg_3455;
wire   [0:0] icmp_ln1496_134_fu_1915_p2;
reg   [0:0] icmp_ln1496_134_reg_3460;
wire   [0:0] icmp_ln1496_135_fu_1929_p2;
reg   [0:0] icmp_ln1496_135_reg_3465;
wire   [9:0] pool_window_0_V_106_fu_1935_p3;
reg   [9:0] pool_window_0_V_106_reg_3470;
wire   [9:0] pool_window_1_V_106_fu_1943_p3;
reg   [9:0] pool_window_1_V_106_reg_3475;
wire   [9:0] pool_window_2_V_106_fu_1950_p3;
reg   [9:0] pool_window_2_V_106_reg_3480;
wire   [9:0] pool_window_3_V_106_fu_1958_p3;
reg   [9:0] pool_window_3_V_106_reg_3485;
wire   [0:0] icmp_ln1496_14_fu_1965_p2;
reg   [0:0] icmp_ln1496_14_reg_3490;
wire   [0:0] icmp_ln1496_136_fu_1979_p2;
reg   [0:0] icmp_ln1496_136_reg_3495;
wire   [0:0] icmp_ln1496_137_fu_1993_p2;
reg   [0:0] icmp_ln1496_137_reg_3500;
wire   [9:0] pool_window_0_V_108_fu_1999_p3;
reg   [9:0] pool_window_0_V_108_reg_3505;
wire   [9:0] pool_window_1_V_108_fu_2007_p3;
reg   [9:0] pool_window_1_V_108_reg_3510;
wire   [9:0] pool_window_2_V_108_fu_2014_p3;
reg   [9:0] pool_window_2_V_108_reg_3515;
wire   [9:0] pool_window_3_V_108_fu_2022_p3;
reg   [9:0] pool_window_3_V_108_reg_3520;
wire   [0:0] icmp_ln1496_15_fu_2029_p2;
reg   [0:0] icmp_ln1496_15_reg_3525;
wire   [0:0] icmp_ln1496_138_fu_2043_p2;
reg   [0:0] icmp_ln1496_138_reg_3530;
wire   [0:0] icmp_ln1496_139_fu_2057_p2;
reg   [0:0] icmp_ln1496_139_reg_3535;
wire   [15:0] tmp_data_0_V_fu_2098_p6;
reg   [15:0] tmp_data_0_V_reg_3540;
wire   [15:0] tmp_data_1_V_fu_2141_p6;
reg   [15:0] tmp_data_1_V_reg_3545;
wire   [15:0] tmp_data_2_V_fu_2184_p6;
reg   [15:0] tmp_data_2_V_reg_3550;
wire   [15:0] tmp_data_3_V_fu_2227_p6;
reg   [15:0] tmp_data_3_V_reg_3555;
wire   [15:0] tmp_data_4_V_fu_2270_p6;
reg   [15:0] tmp_data_4_V_reg_3560;
wire   [15:0] tmp_data_5_V_fu_2313_p6;
reg   [15:0] tmp_data_5_V_reg_3565;
wire   [15:0] tmp_data_6_V_fu_2356_p6;
reg   [15:0] tmp_data_6_V_reg_3570;
wire   [15:0] tmp_data_7_V_fu_2399_p6;
reg   [15:0] tmp_data_7_V_reg_3575;
wire   [15:0] tmp_data_8_V_fu_2442_p6;
reg   [15:0] tmp_data_8_V_reg_3580;
wire   [15:0] tmp_data_9_V_fu_2485_p6;
reg   [15:0] tmp_data_9_V_reg_3585;
wire   [15:0] tmp_data_10_V_fu_2528_p6;
reg   [15:0] tmp_data_10_V_reg_3590;
wire   [15:0] tmp_data_11_V_fu_2571_p6;
reg   [15:0] tmp_data_11_V_reg_3595;
wire   [15:0] tmp_data_12_V_fu_2614_p6;
reg   [15:0] tmp_data_12_V_reg_3600;
wire   [15:0] tmp_data_13_V_fu_2657_p6;
reg   [15:0] tmp_data_13_V_reg_3605;
wire   [15:0] tmp_data_14_V_fu_2700_p6;
reg   [15:0] tmp_data_14_V_reg_3610;
wire   [15:0] tmp_data_15_V_fu_2743_p6;
reg   [15:0] tmp_data_15_V_reg_3615;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_352_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_359;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_359;
wire   [31:0] add_ln225_fu_446_p2;
wire   [31:0] add_ln220_fu_490_p2;
reg   [31:0] ap_sig_allocacmp_sY_2_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln191_fu_386_p2;
wire   [0:0] icmp_ln191_7_fu_396_p2;
wire   [0:0] icmp_ln191_8_fu_406_p2;
wire   [0:0] icmp_ln191_9_fu_416_p2;
wire   [0:0] and_ln191_5_fu_428_p2;
wire   [0:0] and_ln191_fu_422_p2;
wire   [31:0] add_ln227_fu_458_p2;
wire   [31:0] add_ln222_fu_502_p2;
wire   [9:0] select_ln65_fu_1075_p3;
wire   [9:0] select_ln65_145_fu_1089_p3;
wire   [9:0] select_ln65_147_fu_1139_p3;
wire   [9:0] select_ln65_149_fu_1153_p3;
wire   [9:0] select_ln65_150_fu_1203_p3;
wire   [9:0] select_ln65_152_fu_1217_p3;
wire   [9:0] select_ln65_153_fu_1267_p3;
wire   [9:0] select_ln65_155_fu_1281_p3;
wire   [9:0] select_ln65_156_fu_1331_p3;
wire   [9:0] select_ln65_158_fu_1345_p3;
wire   [9:0] select_ln65_159_fu_1395_p3;
wire   [9:0] select_ln65_161_fu_1409_p3;
wire   [9:0] select_ln65_162_fu_1459_p3;
wire   [9:0] select_ln65_164_fu_1473_p3;
wire   [9:0] select_ln65_165_fu_1523_p3;
wire   [9:0] select_ln65_167_fu_1537_p3;
wire   [9:0] select_ln65_168_fu_1587_p3;
wire   [9:0] select_ln65_170_fu_1601_p3;
wire   [9:0] select_ln65_171_fu_1651_p3;
wire   [9:0] select_ln65_173_fu_1665_p3;
wire   [9:0] select_ln65_174_fu_1715_p3;
wire   [9:0] select_ln65_176_fu_1729_p3;
wire   [9:0] select_ln65_177_fu_1779_p3;
wire   [9:0] select_ln65_179_fu_1793_p3;
wire   [9:0] select_ln65_180_fu_1843_p3;
wire   [9:0] select_ln65_182_fu_1857_p3;
wire   [9:0] select_ln65_183_fu_1907_p3;
wire   [9:0] select_ln65_185_fu_1921_p3;
wire   [9:0] select_ln65_186_fu_1971_p3;
wire   [9:0] select_ln65_188_fu_1985_p3;
wire   [9:0] select_ln65_189_fu_2035_p3;
wire   [9:0] select_ln65_191_fu_2049_p3;
wire   [1:0] select_ln65_163_fu_2081_p3;
wire   [1:0] zext_ln65_fu_2088_p1;
wire   [15:0] tmp_data_0_V_fu_2098_p1;
wire   [15:0] tmp_data_0_V_fu_2098_p2;
wire   [15:0] tmp_data_0_V_fu_2098_p3;
wire   [15:0] tmp_data_0_V_fu_2098_p4;
wire   [1:0] tmp_data_0_V_fu_2098_p5;
wire   [1:0] select_ln65_169_fu_2124_p3;
wire   [1:0] zext_ln65_39_fu_2131_p1;
wire   [15:0] tmp_data_1_V_fu_2141_p1;
wire   [15:0] tmp_data_1_V_fu_2141_p2;
wire   [15:0] tmp_data_1_V_fu_2141_p3;
wire   [15:0] tmp_data_1_V_fu_2141_p4;
wire   [1:0] tmp_data_1_V_fu_2141_p5;
wire   [1:0] select_ln65_175_fu_2167_p3;
wire   [1:0] zext_ln65_40_fu_2174_p1;
wire   [15:0] tmp_data_2_V_fu_2184_p1;
wire   [15:0] tmp_data_2_V_fu_2184_p2;
wire   [15:0] tmp_data_2_V_fu_2184_p3;
wire   [15:0] tmp_data_2_V_fu_2184_p4;
wire   [1:0] tmp_data_2_V_fu_2184_p5;
wire   [1:0] select_ln65_181_fu_2210_p3;
wire   [1:0] zext_ln65_41_fu_2217_p1;
wire   [15:0] tmp_data_3_V_fu_2227_p1;
wire   [15:0] tmp_data_3_V_fu_2227_p2;
wire   [15:0] tmp_data_3_V_fu_2227_p3;
wire   [15:0] tmp_data_3_V_fu_2227_p4;
wire   [1:0] tmp_data_3_V_fu_2227_p5;
wire   [1:0] select_ln65_187_fu_2253_p3;
wire   [1:0] zext_ln65_42_fu_2260_p1;
wire   [15:0] tmp_data_4_V_fu_2270_p1;
wire   [15:0] tmp_data_4_V_fu_2270_p2;
wire   [15:0] tmp_data_4_V_fu_2270_p3;
wire   [15:0] tmp_data_4_V_fu_2270_p4;
wire   [1:0] tmp_data_4_V_fu_2270_p5;
wire   [1:0] select_ln65_192_fu_2296_p3;
wire   [1:0] zext_ln65_43_fu_2303_p1;
wire   [15:0] tmp_data_5_V_fu_2313_p1;
wire   [15:0] tmp_data_5_V_fu_2313_p2;
wire   [15:0] tmp_data_5_V_fu_2313_p3;
wire   [15:0] tmp_data_5_V_fu_2313_p4;
wire   [1:0] tmp_data_5_V_fu_2313_p5;
wire   [1:0] select_ln65_194_fu_2339_p3;
wire   [1:0] zext_ln65_44_fu_2346_p1;
wire   [15:0] tmp_data_6_V_fu_2356_p1;
wire   [15:0] tmp_data_6_V_fu_2356_p2;
wire   [15:0] tmp_data_6_V_fu_2356_p3;
wire   [15:0] tmp_data_6_V_fu_2356_p4;
wire   [1:0] tmp_data_6_V_fu_2356_p5;
wire   [1:0] select_ln65_196_fu_2382_p3;
wire   [1:0] zext_ln65_45_fu_2389_p1;
wire   [15:0] tmp_data_7_V_fu_2399_p1;
wire   [15:0] tmp_data_7_V_fu_2399_p2;
wire   [15:0] tmp_data_7_V_fu_2399_p3;
wire   [15:0] tmp_data_7_V_fu_2399_p4;
wire   [1:0] tmp_data_7_V_fu_2399_p5;
wire   [1:0] select_ln65_198_fu_2425_p3;
wire   [1:0] zext_ln65_46_fu_2432_p1;
wire   [15:0] tmp_data_8_V_fu_2442_p1;
wire   [15:0] tmp_data_8_V_fu_2442_p2;
wire   [15:0] tmp_data_8_V_fu_2442_p3;
wire   [15:0] tmp_data_8_V_fu_2442_p4;
wire   [1:0] tmp_data_8_V_fu_2442_p5;
wire   [1:0] select_ln65_200_fu_2468_p3;
wire   [1:0] zext_ln65_47_fu_2475_p1;
wire   [15:0] tmp_data_9_V_fu_2485_p1;
wire   [15:0] tmp_data_9_V_fu_2485_p2;
wire   [15:0] tmp_data_9_V_fu_2485_p3;
wire   [15:0] tmp_data_9_V_fu_2485_p4;
wire   [1:0] tmp_data_9_V_fu_2485_p5;
wire   [1:0] select_ln65_202_fu_2511_p3;
wire   [1:0] zext_ln65_48_fu_2518_p1;
wire   [15:0] tmp_data_10_V_fu_2528_p1;
wire   [15:0] tmp_data_10_V_fu_2528_p2;
wire   [15:0] tmp_data_10_V_fu_2528_p3;
wire   [15:0] tmp_data_10_V_fu_2528_p4;
wire   [1:0] tmp_data_10_V_fu_2528_p5;
wire   [1:0] select_ln65_204_fu_2554_p3;
wire   [1:0] zext_ln65_49_fu_2561_p1;
wire   [15:0] tmp_data_11_V_fu_2571_p1;
wire   [15:0] tmp_data_11_V_fu_2571_p2;
wire   [15:0] tmp_data_11_V_fu_2571_p3;
wire   [15:0] tmp_data_11_V_fu_2571_p4;
wire   [1:0] tmp_data_11_V_fu_2571_p5;
wire   [1:0] select_ln65_206_fu_2597_p3;
wire   [1:0] zext_ln65_50_fu_2604_p1;
wire   [15:0] tmp_data_12_V_fu_2614_p1;
wire   [15:0] tmp_data_12_V_fu_2614_p2;
wire   [15:0] tmp_data_12_V_fu_2614_p3;
wire   [15:0] tmp_data_12_V_fu_2614_p4;
wire   [1:0] tmp_data_12_V_fu_2614_p5;
wire   [1:0] select_ln65_208_fu_2640_p3;
wire   [1:0] zext_ln65_51_fu_2647_p1;
wire   [15:0] tmp_data_13_V_fu_2657_p1;
wire   [15:0] tmp_data_13_V_fu_2657_p2;
wire   [15:0] tmp_data_13_V_fu_2657_p3;
wire   [15:0] tmp_data_13_V_fu_2657_p4;
wire   [1:0] tmp_data_13_V_fu_2657_p5;
wire   [1:0] select_ln65_210_fu_2683_p3;
wire   [1:0] zext_ln65_52_fu_2690_p1;
wire   [15:0] tmp_data_14_V_fu_2700_p1;
wire   [15:0] tmp_data_14_V_fu_2700_p2;
wire   [15:0] tmp_data_14_V_fu_2700_p3;
wire   [15:0] tmp_data_14_V_fu_2700_p4;
wire   [1:0] tmp_data_14_V_fu_2700_p5;
wire   [1:0] select_ln65_212_fu_2726_p3;
wire   [1:0] zext_ln65_53_fu_2733_p1;
wire   [15:0] tmp_data_15_V_fu_2743_p1;
wire   [15:0] tmp_data_15_V_fu_2743_p2;
wire   [15:0] tmp_data_15_V_fu_2743_p3;
wire   [15:0] tmp_data_15_V_fu_2743_p4;
wire   [1:0] tmp_data_15_V_fu_2743_p5;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_818;
reg    ap_condition_814;
reg    ap_condition_2028;
reg    ap_condition_825;
reg    ap_condition_440;
reg    ap_condition_2364;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 pX_2 = 32'd0;
#0 sX_2 = 32'd0;
#0 pY_2 = 32'd0;
#0 sY_2 = 32'd0;
#0 kernel_data_V_3_16 = 6'd0;
#0 kernel_data_V_3_17 = 6'd0;
#0 kernel_data_V_3_18 = 6'd0;
#0 kernel_data_V_3_19 = 6'd0;
#0 kernel_data_V_3_20 = 6'd0;
#0 kernel_data_V_3_21 = 6'd0;
#0 kernel_data_V_3_22 = 6'd0;
#0 kernel_data_V_3_23 = 6'd0;
#0 kernel_data_V_3_24 = 6'd0;
#0 kernel_data_V_3_25 = 6'd0;
#0 kernel_data_V_3_26 = 6'd0;
#0 kernel_data_V_3_27 = 6'd0;
#0 kernel_data_V_3_28 = 6'd0;
#0 kernel_data_V_3_29 = 6'd0;
#0 kernel_data_V_3_30 = 6'd0;
#0 kernel_data_V_3_31 = 6'd0;
#0 kernel_data_V_3_48 = 6'd0;
#0 kernel_data_V_3_49 = 6'd0;
#0 kernel_data_V_3_50 = 6'd0;
#0 kernel_data_V_3_51 = 6'd0;
#0 kernel_data_V_3_52 = 6'd0;
#0 kernel_data_V_3_53 = 6'd0;
#0 kernel_data_V_3_54 = 6'd0;
#0 kernel_data_V_3_55 = 6'd0;
#0 kernel_data_V_3_56 = 6'd0;
#0 kernel_data_V_3_57 = 6'd0;
#0 kernel_data_V_3_58 = 6'd0;
#0 kernel_data_V_3_59 = 6'd0;
#0 kernel_data_V_3_60 = 6'd0;
#0 kernel_data_V_3_61 = 6'd0;
#0 kernel_data_V_3_62 = 6'd0;
#0 kernel_data_V_3_63 = 6'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_0_ce0),
    .we0(line_buffer_Array_V_3_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_3_0_0_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_1_ce0),
    .we0(line_buffer_Array_V_3_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_3_0_1_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_2_ce0),
    .we0(line_buffer_Array_V_3_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_3_0_2_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_3_ce0),
    .we0(line_buffer_Array_V_3_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_3_0_3_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_4_ce0),
    .we0(line_buffer_Array_V_3_0_4_we0),
    .d0(data_V_data_4_V_dout),
    .q0(line_buffer_Array_V_3_0_4_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_5_ce0),
    .we0(line_buffer_Array_V_3_0_5_we0),
    .d0(data_V_data_5_V_dout),
    .q0(line_buffer_Array_V_3_0_5_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_6_ce0),
    .we0(line_buffer_Array_V_3_0_6_we0),
    .d0(data_V_data_6_V_dout),
    .q0(line_buffer_Array_V_3_0_6_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_7_ce0),
    .we0(line_buffer_Array_V_3_0_7_we0),
    .d0(data_V_data_7_V_dout),
    .q0(line_buffer_Array_V_3_0_7_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_8_ce0),
    .we0(line_buffer_Array_V_3_0_8_we0),
    .d0(data_V_data_8_V_dout),
    .q0(line_buffer_Array_V_3_0_8_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_9_ce0),
    .we0(line_buffer_Array_V_3_0_9_we0),
    .d0(data_V_data_9_V_dout),
    .q0(line_buffer_Array_V_3_0_9_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_10_ce0),
    .we0(line_buffer_Array_V_3_0_10_we0),
    .d0(data_V_data_10_V_dout),
    .q0(line_buffer_Array_V_3_0_10_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_11_ce0),
    .we0(line_buffer_Array_V_3_0_11_we0),
    .d0(data_V_data_11_V_dout),
    .q0(line_buffer_Array_V_3_0_11_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_12_ce0),
    .we0(line_buffer_Array_V_3_0_12_we0),
    .d0(data_V_data_12_V_dout),
    .q0(line_buffer_Array_V_3_0_12_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_13_ce0),
    .we0(line_buffer_Array_V_3_0_13_we0),
    .d0(data_V_data_13_V_dout),
    .q0(line_buffer_Array_V_3_0_13_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_14_ce0),
    .we0(line_buffer_Array_V_3_0_14_we0),
    .d0(data_V_data_14_V_dout),
    .q0(line_buffer_Array_V_3_0_14_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s_line_buffer_Array_hbi #(
    .DataWidth( 6 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_3_0_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd29),
    .ce0(line_buffer_Array_V_3_0_15_ce0),
    .we0(line_buffer_Array_V_3_0_15_we0),
    .d0(data_V_data_15_V_dout),
    .q0(line_buffer_Array_V_3_0_15_q0)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U156(
    .din0(tmp_data_0_V_fu_2098_p1),
    .din1(tmp_data_0_V_fu_2098_p2),
    .din2(tmp_data_0_V_fu_2098_p3),
    .din3(tmp_data_0_V_fu_2098_p4),
    .din4(tmp_data_0_V_fu_2098_p5),
    .dout(tmp_data_0_V_fu_2098_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U157(
    .din0(tmp_data_1_V_fu_2141_p1),
    .din1(tmp_data_1_V_fu_2141_p2),
    .din2(tmp_data_1_V_fu_2141_p3),
    .din3(tmp_data_1_V_fu_2141_p4),
    .din4(tmp_data_1_V_fu_2141_p5),
    .dout(tmp_data_1_V_fu_2141_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U158(
    .din0(tmp_data_2_V_fu_2184_p1),
    .din1(tmp_data_2_V_fu_2184_p2),
    .din2(tmp_data_2_V_fu_2184_p3),
    .din3(tmp_data_2_V_fu_2184_p4),
    .din4(tmp_data_2_V_fu_2184_p5),
    .dout(tmp_data_2_V_fu_2184_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U159(
    .din0(tmp_data_3_V_fu_2227_p1),
    .din1(tmp_data_3_V_fu_2227_p2),
    .din2(tmp_data_3_V_fu_2227_p3),
    .din3(tmp_data_3_V_fu_2227_p4),
    .din4(tmp_data_3_V_fu_2227_p5),
    .dout(tmp_data_3_V_fu_2227_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U160(
    .din0(tmp_data_4_V_fu_2270_p1),
    .din1(tmp_data_4_V_fu_2270_p2),
    .din2(tmp_data_4_V_fu_2270_p3),
    .din3(tmp_data_4_V_fu_2270_p4),
    .din4(tmp_data_4_V_fu_2270_p5),
    .dout(tmp_data_4_V_fu_2270_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U161(
    .din0(tmp_data_5_V_fu_2313_p1),
    .din1(tmp_data_5_V_fu_2313_p2),
    .din2(tmp_data_5_V_fu_2313_p3),
    .din3(tmp_data_5_V_fu_2313_p4),
    .din4(tmp_data_5_V_fu_2313_p5),
    .dout(tmp_data_5_V_fu_2313_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U162(
    .din0(tmp_data_6_V_fu_2356_p1),
    .din1(tmp_data_6_V_fu_2356_p2),
    .din2(tmp_data_6_V_fu_2356_p3),
    .din3(tmp_data_6_V_fu_2356_p4),
    .din4(tmp_data_6_V_fu_2356_p5),
    .dout(tmp_data_6_V_fu_2356_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U163(
    .din0(tmp_data_7_V_fu_2399_p1),
    .din1(tmp_data_7_V_fu_2399_p2),
    .din2(tmp_data_7_V_fu_2399_p3),
    .din3(tmp_data_7_V_fu_2399_p4),
    .din4(tmp_data_7_V_fu_2399_p5),
    .dout(tmp_data_7_V_fu_2399_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U164(
    .din0(tmp_data_8_V_fu_2442_p1),
    .din1(tmp_data_8_V_fu_2442_p2),
    .din2(tmp_data_8_V_fu_2442_p3),
    .din3(tmp_data_8_V_fu_2442_p4),
    .din4(tmp_data_8_V_fu_2442_p5),
    .dout(tmp_data_8_V_fu_2442_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U165(
    .din0(tmp_data_9_V_fu_2485_p1),
    .din1(tmp_data_9_V_fu_2485_p2),
    .din2(tmp_data_9_V_fu_2485_p3),
    .din3(tmp_data_9_V_fu_2485_p4),
    .din4(tmp_data_9_V_fu_2485_p5),
    .dout(tmp_data_9_V_fu_2485_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U166(
    .din0(tmp_data_10_V_fu_2528_p1),
    .din1(tmp_data_10_V_fu_2528_p2),
    .din2(tmp_data_10_V_fu_2528_p3),
    .din3(tmp_data_10_V_fu_2528_p4),
    .din4(tmp_data_10_V_fu_2528_p5),
    .dout(tmp_data_10_V_fu_2528_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U167(
    .din0(tmp_data_11_V_fu_2571_p1),
    .din1(tmp_data_11_V_fu_2571_p2),
    .din2(tmp_data_11_V_fu_2571_p3),
    .din3(tmp_data_11_V_fu_2571_p4),
    .din4(tmp_data_11_V_fu_2571_p5),
    .dout(tmp_data_11_V_fu_2571_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U168(
    .din0(tmp_data_12_V_fu_2614_p1),
    .din1(tmp_data_12_V_fu_2614_p2),
    .din2(tmp_data_12_V_fu_2614_p3),
    .din3(tmp_data_12_V_fu_2614_p4),
    .din4(tmp_data_12_V_fu_2614_p5),
    .dout(tmp_data_12_V_fu_2614_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U169(
    .din0(tmp_data_13_V_fu_2657_p1),
    .din1(tmp_data_13_V_fu_2657_p2),
    .din2(tmp_data_13_V_fu_2657_p3),
    .din3(tmp_data_13_V_fu_2657_p4),
    .din4(tmp_data_13_V_fu_2657_p5),
    .dout(tmp_data_13_V_fu_2657_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U170(
    .din0(tmp_data_14_V_fu_2700_p1),
    .din1(tmp_data_14_V_fu_2700_p2),
    .din2(tmp_data_14_V_fu_2700_p3),
    .din3(tmp_data_14_V_fu_2700_p4),
    .din4(tmp_data_14_V_fu_2700_p5),
    .dout(tmp_data_14_V_fu_2700_p6)
);

myproject_axi_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_42_16_1_1_U171(
    .din0(tmp_data_15_V_fu_2743_p1),
    .din1(tmp_data_15_V_fu_2743_p2),
    .din2(tmp_data_15_V_fu_2743_p3),
    .din3(tmp_data_15_V_fu_2743_p4),
    .din4(tmp_data_15_V_fu_2743_p5),
    .dout(tmp_data_15_V_fu_2743_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_814)) begin
        if ((1'b1 == ap_condition_818)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_359 <= select_ln222_reg_2783;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_storemerge_i_i_reg_359 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_359;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_348 <= add_ln241_reg_2761;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_348 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_2028)) begin
        if ((icmp_ln212_fu_440_p2 == 1'd1)) begin
            pX_2 <= 32'd0;
        end else if ((icmp_ln212_fu_440_p2 == 1'd0)) begin
            pX_2 <= add_ln225_fu_446_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_825)) begin
        if ((icmp_ln216_fu_484_p2 == 1'd1)) begin
            pY_2 <= 32'd0;
        end else if ((icmp_ln216_fu_484_p2 == 1'd0)) begin
            pY_2 <= add_ln220_fu_490_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_2364)) begin
            sX_2 <= select_ln227_reg_2774;
        end else if ((1'b1 == ap_condition_440)) begin
            sX_2 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        DataOut_V_248_reg_2884 <= line_buffer_Array_V_3_0_0_q0;
        DataOut_V_249_reg_2890 <= line_buffer_Array_V_3_0_1_q0;
        DataOut_V_250_reg_2896 <= line_buffer_Array_V_3_0_2_q0;
        DataOut_V_251_reg_2902 <= line_buffer_Array_V_3_0_3_q0;
        DataOut_V_252_reg_2908 <= line_buffer_Array_V_3_0_4_q0;
        DataOut_V_253_reg_2914 <= line_buffer_Array_V_3_0_5_q0;
        DataOut_V_254_reg_2920 <= line_buffer_Array_V_3_0_6_q0;
        DataOut_V_255_reg_2926 <= line_buffer_Array_V_3_0_7_q0;
        DataOut_V_256_reg_2932 <= line_buffer_Array_V_3_0_8_q0;
        DataOut_V_257_reg_2938 <= line_buffer_Array_V_3_0_9_q0;
        DataOut_V_258_reg_2944 <= line_buffer_Array_V_3_0_10_q0;
        DataOut_V_259_reg_2950 <= line_buffer_Array_V_3_0_11_q0;
        DataOut_V_260_reg_2956 <= line_buffer_Array_V_3_0_12_q0;
        DataOut_V_261_reg_2962 <= line_buffer_Array_V_3_0_13_q0;
        DataOut_V_262_reg_2968 <= line_buffer_Array_V_3_0_14_q0;
        DataOut_V_reg_2974 <= line_buffer_Array_V_3_0_15_q0;
        shift_buffer_1_0_V_reg_2788 <= data_V_data_0_V_dout;
        shift_buffer_1_10_V_reg_2848 <= data_V_data_10_V_dout;
        shift_buffer_1_11_V_reg_2854 <= data_V_data_11_V_dout;
        shift_buffer_1_12_V_reg_2860 <= data_V_data_12_V_dout;
        shift_buffer_1_13_V_reg_2866 <= data_V_data_13_V_dout;
        shift_buffer_1_14_V_reg_2872 <= data_V_data_14_V_dout;
        shift_buffer_1_15_V_reg_2878 <= data_V_data_15_V_dout;
        shift_buffer_1_1_V_reg_2794 <= data_V_data_1_V_dout;
        shift_buffer_1_2_V_reg_2800 <= data_V_data_2_V_dout;
        shift_buffer_1_3_V_reg_2806 <= data_V_data_3_V_dout;
        shift_buffer_1_4_V_reg_2812 <= data_V_data_4_V_dout;
        shift_buffer_1_5_V_reg_2818 <= data_V_data_5_V_dout;
        shift_buffer_1_6_V_reg_2824 <= data_V_data_6_V_dout;
        shift_buffer_1_7_V_reg_2830 <= data_V_data_7_V_dout;
        shift_buffer_1_8_V_reg_2836 <= data_V_data_8_V_dout;
        shift_buffer_1_9_V_reg_2842 <= data_V_data_9_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln241_reg_2761 <= add_ln241_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_370_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_6_reg_2766 <= and_ln191_6_fu_434_p2;
        icmp_ln212_reg_2770 <= icmp_ln212_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln191_6_reg_2766_pp0_iter1_reg <= and_ln191_6_reg_2766;
        icmp_ln241_reg_2757 <= icmp_ln241_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1496_106_reg_3005 <= icmp_ln1496_106_fu_1083_p2;
        icmp_ln1496_107_reg_3010 <= icmp_ln1496_107_fu_1097_p2;
        icmp_ln1496_108_reg_3040 <= icmp_ln1496_108_fu_1147_p2;
        icmp_ln1496_109_reg_3045 <= icmp_ln1496_109_fu_1161_p2;
        icmp_ln1496_10_reg_3350 <= icmp_ln1496_10_fu_1709_p2;
        icmp_ln1496_110_reg_3075 <= icmp_ln1496_110_fu_1211_p2;
        icmp_ln1496_111_reg_3080 <= icmp_ln1496_111_fu_1225_p2;
        icmp_ln1496_112_reg_3110 <= icmp_ln1496_112_fu_1275_p2;
        icmp_ln1496_113_reg_3115 <= icmp_ln1496_113_fu_1289_p2;
        icmp_ln1496_114_reg_3145 <= icmp_ln1496_114_fu_1339_p2;
        icmp_ln1496_115_reg_3150 <= icmp_ln1496_115_fu_1353_p2;
        icmp_ln1496_116_reg_3175 <= icmp_ln1496_116_fu_1389_p2;
        icmp_ln1496_117_reg_3180 <= icmp_ln1496_117_fu_1403_p2;
        icmp_ln1496_118_reg_3185 <= icmp_ln1496_118_fu_1417_p2;
        icmp_ln1496_119_reg_3210 <= icmp_ln1496_119_fu_1453_p2;
        icmp_ln1496_11_reg_3385 <= icmp_ln1496_11_fu_1773_p2;
        icmp_ln1496_120_reg_3215 <= icmp_ln1496_120_fu_1467_p2;
        icmp_ln1496_121_reg_3220 <= icmp_ln1496_121_fu_1481_p2;
        icmp_ln1496_122_reg_3250 <= icmp_ln1496_122_fu_1531_p2;
        icmp_ln1496_123_reg_3255 <= icmp_ln1496_123_fu_1545_p2;
        icmp_ln1496_124_reg_3285 <= icmp_ln1496_124_fu_1595_p2;
        icmp_ln1496_125_reg_3290 <= icmp_ln1496_125_fu_1609_p2;
        icmp_ln1496_126_reg_3320 <= icmp_ln1496_126_fu_1659_p2;
        icmp_ln1496_127_reg_3325 <= icmp_ln1496_127_fu_1673_p2;
        icmp_ln1496_128_reg_3355 <= icmp_ln1496_128_fu_1723_p2;
        icmp_ln1496_129_reg_3360 <= icmp_ln1496_129_fu_1737_p2;
        icmp_ln1496_12_reg_3420 <= icmp_ln1496_12_fu_1837_p2;
        icmp_ln1496_130_reg_3390 <= icmp_ln1496_130_fu_1787_p2;
        icmp_ln1496_131_reg_3395 <= icmp_ln1496_131_fu_1801_p2;
        icmp_ln1496_132_reg_3425 <= icmp_ln1496_132_fu_1851_p2;
        icmp_ln1496_133_reg_3430 <= icmp_ln1496_133_fu_1865_p2;
        icmp_ln1496_134_reg_3460 <= icmp_ln1496_134_fu_1915_p2;
        icmp_ln1496_135_reg_3465 <= icmp_ln1496_135_fu_1929_p2;
        icmp_ln1496_136_reg_3495 <= icmp_ln1496_136_fu_1979_p2;
        icmp_ln1496_137_reg_3500 <= icmp_ln1496_137_fu_1993_p2;
        icmp_ln1496_138_reg_3530 <= icmp_ln1496_138_fu_2043_p2;
        icmp_ln1496_139_reg_3535 <= icmp_ln1496_139_fu_2057_p2;
        icmp_ln1496_13_reg_3455 <= icmp_ln1496_13_fu_1901_p2;
        icmp_ln1496_14_reg_3490 <= icmp_ln1496_14_fu_1965_p2;
        icmp_ln1496_15_reg_3525 <= icmp_ln1496_15_fu_2029_p2;
        icmp_ln1496_1_reg_3035 <= icmp_ln1496_1_fu_1133_p2;
        icmp_ln1496_2_reg_3070 <= icmp_ln1496_2_fu_1197_p2;
        icmp_ln1496_3_reg_3105 <= icmp_ln1496_3_fu_1261_p2;
        icmp_ln1496_4_reg_3140 <= icmp_ln1496_4_fu_1325_p2;
        icmp_ln1496_7_reg_3245 <= icmp_ln1496_7_fu_1517_p2;
        icmp_ln1496_8_reg_3280 <= icmp_ln1496_8_fu_1581_p2;
        icmp_ln1496_9_reg_3315 <= icmp_ln1496_9_fu_1645_p2;
        icmp_ln1496_reg_3000 <= icmp_ln1496_fu_1069_p2;
        pool_window_0_V_100_reg_3365[9 : 4] <= pool_window_0_V_100_fu_1743_p3[9 : 4];
        pool_window_0_V_102_reg_3400[9 : 4] <= pool_window_0_V_102_fu_1807_p3[9 : 4];
        pool_window_0_V_104_reg_3435[9 : 4] <= pool_window_0_V_104_fu_1871_p3[9 : 4];
        pool_window_0_V_106_reg_3470[9 : 4] <= pool_window_0_V_106_fu_1935_p3[9 : 4];
        pool_window_0_V_108_reg_3505[9 : 4] <= pool_window_0_V_108_fu_1999_p3[9 : 4];
        pool_window_0_V_80_reg_3015[9 : 4] <= pool_window_0_V_80_fu_1103_p3[9 : 4];
        pool_window_0_V_82_reg_3050[9 : 4] <= pool_window_0_V_82_fu_1167_p3[9 : 4];
        pool_window_0_V_84_reg_3085[9 : 4] <= pool_window_0_V_84_fu_1231_p3[9 : 4];
        pool_window_0_V_86_reg_3120[9 : 4] <= pool_window_0_V_86_fu_1295_p3[9 : 4];
        pool_window_0_V_88_reg_3155[9 : 4] <= pool_window_0_V_88_fu_1359_p3[9 : 4];
        pool_window_0_V_90_reg_3190[9 : 4] <= pool_window_0_V_90_fu_1423_p3[9 : 4];
        pool_window_0_V_92_reg_3225[9 : 4] <= pool_window_0_V_92_fu_1487_p3[9 : 4];
        pool_window_0_V_94_reg_3260[9 : 4] <= pool_window_0_V_94_fu_1551_p3[9 : 4];
        pool_window_0_V_96_reg_3295[9 : 4] <= pool_window_0_V_96_fu_1615_p3[9 : 4];
        pool_window_0_V_98_reg_3330[9 : 4] <= pool_window_0_V_98_fu_1679_p3[9 : 4];
        pool_window_0_V_reg_2980[9 : 4] <= pool_window_0_V_fu_1039_p3[9 : 4];
        pool_window_1_V_100_reg_3370[9 : 4] <= pool_window_1_V_100_fu_1751_p3[9 : 4];
        pool_window_1_V_102_reg_3405[9 : 4] <= pool_window_1_V_102_fu_1815_p3[9 : 4];
        pool_window_1_V_104_reg_3440[9 : 4] <= pool_window_1_V_104_fu_1879_p3[9 : 4];
        pool_window_1_V_106_reg_3475[9 : 4] <= pool_window_1_V_106_fu_1943_p3[9 : 4];
        pool_window_1_V_108_reg_3510[9 : 4] <= pool_window_1_V_108_fu_2007_p3[9 : 4];
        pool_window_1_V_80_reg_3020[9 : 4] <= pool_window_1_V_80_fu_1111_p3[9 : 4];
        pool_window_1_V_82_reg_3055[9 : 4] <= pool_window_1_V_82_fu_1175_p3[9 : 4];
        pool_window_1_V_84_reg_3090[9 : 4] <= pool_window_1_V_84_fu_1239_p3[9 : 4];
        pool_window_1_V_86_reg_3125[9 : 4] <= pool_window_1_V_86_fu_1303_p3[9 : 4];
        pool_window_1_V_88_reg_3160[9 : 4] <= pool_window_1_V_88_fu_1367_p3[9 : 4];
        pool_window_1_V_90_reg_3195[9 : 4] <= pool_window_1_V_90_fu_1431_p3[9 : 4];
        pool_window_1_V_92_reg_3230[9 : 4] <= pool_window_1_V_92_fu_1495_p3[9 : 4];
        pool_window_1_V_94_reg_3265[9 : 4] <= pool_window_1_V_94_fu_1559_p3[9 : 4];
        pool_window_1_V_96_reg_3300[9 : 4] <= pool_window_1_V_96_fu_1623_p3[9 : 4];
        pool_window_1_V_98_reg_3335[9 : 4] <= pool_window_1_V_98_fu_1687_p3[9 : 4];
        pool_window_1_V_reg_2985[9 : 4] <= pool_window_1_V_fu_1047_p3[9 : 4];
        pool_window_2_V_100_reg_3375[9 : 4] <= pool_window_2_V_100_fu_1758_p3[9 : 4];
        pool_window_2_V_102_reg_3410[9 : 4] <= pool_window_2_V_102_fu_1822_p3[9 : 4];
        pool_window_2_V_104_reg_3445[9 : 4] <= pool_window_2_V_104_fu_1886_p3[9 : 4];
        pool_window_2_V_106_reg_3480[9 : 4] <= pool_window_2_V_106_fu_1950_p3[9 : 4];
        pool_window_2_V_108_reg_3515[9 : 4] <= pool_window_2_V_108_fu_2014_p3[9 : 4];
        pool_window_2_V_80_reg_3025[9 : 4] <= pool_window_2_V_80_fu_1118_p3[9 : 4];
        pool_window_2_V_82_reg_3060[9 : 4] <= pool_window_2_V_82_fu_1182_p3[9 : 4];
        pool_window_2_V_84_reg_3095[9 : 4] <= pool_window_2_V_84_fu_1246_p3[9 : 4];
        pool_window_2_V_86_reg_3130[9 : 4] <= pool_window_2_V_86_fu_1310_p3[9 : 4];
        pool_window_2_V_88_reg_3165[9 : 4] <= pool_window_2_V_88_fu_1374_p3[9 : 4];
        pool_window_2_V_90_reg_3200[9 : 4] <= pool_window_2_V_90_fu_1438_p3[9 : 4];
        pool_window_2_V_92_reg_3235[9 : 4] <= pool_window_2_V_92_fu_1502_p3[9 : 4];
        pool_window_2_V_94_reg_3270[9 : 4] <= pool_window_2_V_94_fu_1566_p3[9 : 4];
        pool_window_2_V_96_reg_3305[9 : 4] <= pool_window_2_V_96_fu_1630_p3[9 : 4];
        pool_window_2_V_98_reg_3340[9 : 4] <= pool_window_2_V_98_fu_1694_p3[9 : 4];
        pool_window_2_V_reg_2990[9 : 4] <= pool_window_2_V_fu_1054_p3[9 : 4];
        pool_window_3_V_100_reg_3380[9 : 4] <= pool_window_3_V_100_fu_1766_p3[9 : 4];
        pool_window_3_V_102_reg_3415[9 : 4] <= pool_window_3_V_102_fu_1830_p3[9 : 4];
        pool_window_3_V_104_reg_3450[9 : 4] <= pool_window_3_V_104_fu_1894_p3[9 : 4];
        pool_window_3_V_106_reg_3485[9 : 4] <= pool_window_3_V_106_fu_1958_p3[9 : 4];
        pool_window_3_V_108_reg_3520[9 : 4] <= pool_window_3_V_108_fu_2022_p3[9 : 4];
        pool_window_3_V_80_reg_3030[9 : 4] <= pool_window_3_V_80_fu_1126_p3[9 : 4];
        pool_window_3_V_82_reg_3065[9 : 4] <= pool_window_3_V_82_fu_1190_p3[9 : 4];
        pool_window_3_V_84_reg_3100[9 : 4] <= pool_window_3_V_84_fu_1254_p3[9 : 4];
        pool_window_3_V_86_reg_3135[9 : 4] <= pool_window_3_V_86_fu_1318_p3[9 : 4];
        pool_window_3_V_88_reg_3170[9 : 4] <= pool_window_3_V_88_fu_1382_p3[9 : 4];
        pool_window_3_V_90_reg_3205[9 : 4] <= pool_window_3_V_90_fu_1446_p3[9 : 4];
        pool_window_3_V_92_reg_3240[9 : 4] <= pool_window_3_V_92_fu_1510_p3[9 : 4];
        pool_window_3_V_94_reg_3275[9 : 4] <= pool_window_3_V_94_fu_1574_p3[9 : 4];
        pool_window_3_V_96_reg_3310[9 : 4] <= pool_window_3_V_96_fu_1638_p3[9 : 4];
        pool_window_3_V_98_reg_3345[9 : 4] <= pool_window_3_V_98_fu_1702_p3[9 : 4];
        pool_window_3_V_reg_2995[9 : 4] <= pool_window_3_V_fu_1062_p3[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_440_p2 == 1'd1) & (icmp_ln241_fu_370_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln216_reg_2779 <= icmp_ln216_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_data_V_3_16 <= DataOut_V_248_reg_2884;
        kernel_data_V_3_17 <= DataOut_V_249_reg_2890;
        kernel_data_V_3_18 <= DataOut_V_250_reg_2896;
        kernel_data_V_3_19 <= DataOut_V_251_reg_2902;
        kernel_data_V_3_20 <= DataOut_V_252_reg_2908;
        kernel_data_V_3_21 <= DataOut_V_253_reg_2914;
        kernel_data_V_3_22 <= DataOut_V_254_reg_2920;
        kernel_data_V_3_23 <= DataOut_V_255_reg_2926;
        kernel_data_V_3_24 <= DataOut_V_256_reg_2932;
        kernel_data_V_3_25 <= DataOut_V_257_reg_2938;
        kernel_data_V_3_26 <= DataOut_V_258_reg_2944;
        kernel_data_V_3_27 <= DataOut_V_259_reg_2950;
        kernel_data_V_3_28 <= DataOut_V_260_reg_2956;
        kernel_data_V_3_29 <= DataOut_V_261_reg_2962;
        kernel_data_V_3_30 <= DataOut_V_262_reg_2968;
        kernel_data_V_3_31 <= DataOut_V_reg_2974;
        kernel_data_V_3_48 <= shift_buffer_1_0_V_reg_2788;
        kernel_data_V_3_49 <= shift_buffer_1_1_V_reg_2794;
        kernel_data_V_3_50 <= shift_buffer_1_2_V_reg_2800;
        kernel_data_V_3_51 <= shift_buffer_1_3_V_reg_2806;
        kernel_data_V_3_52 <= shift_buffer_1_4_V_reg_2812;
        kernel_data_V_3_53 <= shift_buffer_1_5_V_reg_2818;
        kernel_data_V_3_54 <= shift_buffer_1_6_V_reg_2824;
        kernel_data_V_3_55 <= shift_buffer_1_7_V_reg_2830;
        kernel_data_V_3_56 <= shift_buffer_1_8_V_reg_2836;
        kernel_data_V_3_57 <= shift_buffer_1_9_V_reg_2842;
        kernel_data_V_3_58 <= shift_buffer_1_10_V_reg_2848;
        kernel_data_V_3_59 <= shift_buffer_1_11_V_reg_2854;
        kernel_data_V_3_60 <= shift_buffer_1_12_V_reg_2860;
        kernel_data_V_3_61 <= shift_buffer_1_13_V_reg_2866;
        kernel_data_V_3_62 <= shift_buffer_1_14_V_reg_2872;
        kernel_data_V_3_63 <= shift_buffer_1_15_V_reg_2878;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_reg_2770 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sY_2 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_359;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_440_p2 == 1'd1) & (icmp_ln216_fu_484_p2 == 1'd0) & (icmp_ln241_fu_370_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln222_reg_2783 <= select_ln222_fu_508_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_440_p2 == 1'd0) & (icmp_ln241_fu_370_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln227_reg_2774 <= select_ln227_fu_464_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_data_0_V_reg_3540 <= tmp_data_0_V_fu_2098_p6;
        tmp_data_10_V_reg_3590 <= tmp_data_10_V_fu_2528_p6;
        tmp_data_11_V_reg_3595 <= tmp_data_11_V_fu_2571_p6;
        tmp_data_12_V_reg_3600 <= tmp_data_12_V_fu_2614_p6;
        tmp_data_13_V_reg_3605 <= tmp_data_13_V_fu_2657_p6;
        tmp_data_14_V_reg_3610 <= tmp_data_14_V_fu_2700_p6;
        tmp_data_15_V_reg_3615 <= tmp_data_15_V_fu_2743_p6;
        tmp_data_1_V_reg_3545 <= tmp_data_1_V_fu_2141_p6;
        tmp_data_2_V_reg_3550 <= tmp_data_2_V_fu_2184_p6;
        tmp_data_3_V_reg_3555 <= tmp_data_3_V_fu_2227_p6;
        tmp_data_4_V_reg_3560 <= tmp_data_4_V_fu_2270_p6;
        tmp_data_5_V_reg_3565 <= tmp_data_5_V_fu_2313_p6;
        tmp_data_6_V_reg_3570 <= tmp_data_6_V_fu_2356_p6;
        tmp_data_7_V_reg_3575 <= tmp_data_7_V_fu_2399_p6;
        tmp_data_8_V_reg_3580 <= tmp_data_8_V_fu_2442_p6;
        tmp_data_9_V_reg_3585 <= tmp_data_9_V_fu_2485_p6;
    end
end

always @ (*) begin
    if ((icmp_ln241_fu_370_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_352_p4 = add_ln241_reg_2761;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_352_p4 = indvar_flatten_reg_348;
    end
end

always @ (*) begin
    if (((icmp_ln212_reg_2770 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_sY_2_load = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_359;
    end else begin
        ap_sig_allocacmp_sY_2_load = sY_2;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_10_V_blk_n = data_V_data_10_V_empty_n;
    end else begin
        data_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_10_V_read = 1'b1;
    end else begin
        data_V_data_10_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_11_V_blk_n = data_V_data_11_V_empty_n;
    end else begin
        data_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_11_V_read = 1'b1;
    end else begin
        data_V_data_11_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_12_V_blk_n = data_V_data_12_V_empty_n;
    end else begin
        data_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_12_V_read = 1'b1;
    end else begin
        data_V_data_12_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_13_V_blk_n = data_V_data_13_V_empty_n;
    end else begin
        data_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_13_V_read = 1'b1;
    end else begin
        data_V_data_13_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_14_V_blk_n = data_V_data_14_V_empty_n;
    end else begin
        data_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_14_V_read = 1'b1;
    end else begin
        data_V_data_14_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_15_V_blk_n = data_V_data_15_V_empty_n;
    end else begin
        data_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_15_V_read = 1'b1;
    end else begin
        data_V_data_15_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln241_reg_2757 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_10_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_10_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_11_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_11_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_12_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_12_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_13_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_13_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_14_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_14_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_15_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_15_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_4_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_4_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_5_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_5_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_6_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_6_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_7_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_7_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_8_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_8_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_9_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln241_reg_2757 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        line_buffer_Array_V_3_0_9_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_3_0_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_10_V_blk_n = res_V_data_10_V_full_n;
    end else begin
        res_V_data_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_10_V_write = 1'b1;
    end else begin
        res_V_data_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_11_V_blk_n = res_V_data_11_V_full_n;
    end else begin
        res_V_data_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_11_V_write = 1'b1;
    end else begin
        res_V_data_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_12_V_blk_n = res_V_data_12_V_full_n;
    end else begin
        res_V_data_12_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_12_V_write = 1'b1;
    end else begin
        res_V_data_12_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_13_V_blk_n = res_V_data_13_V_full_n;
    end else begin
        res_V_data_13_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_13_V_write = 1'b1;
    end else begin
        res_V_data_13_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_14_V_blk_n = res_V_data_14_V_full_n;
    end else begin
        res_V_data_14_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_14_V_write = 1'b1;
    end else begin
        res_V_data_14_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_15_V_blk_n = res_V_data_15_V_full_n;
    end else begin
        res_V_data_15_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_15_V_write = 1'b1;
    end else begin
        res_V_data_15_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_370_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln241_fu_370_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln220_fu_490_p2 = (pY_2 + 32'd1);

assign add_ln222_fu_502_p2 = (ap_sig_allocacmp_sY_2_load + 32'd1);

assign add_ln225_fu_446_p2 = (pX_2 + 32'd1);

assign add_ln227_fu_458_p2 = (sX_2 + 32'd1);

assign add_ln241_fu_376_p2 = (ap_phi_mux_indvar_flatten_phi_fu_352_p4 + 10'd1);

assign and_ln191_5_fu_428_p2 = (icmp_ln191_9_fu_416_p2 & icmp_ln191_8_fu_406_p2);

assign and_ln191_6_fu_434_p2 = (and_ln191_fu_422_p2 & and_ln191_5_fu_428_p2);

assign and_ln191_fu_422_p2 = (icmp_ln191_fu_386_p2 & icmp_ln191_7_fu_396_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (io_acc_block_signal_op455 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (io_acc_block_signal_op455 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (io_acc_block_signal_op455 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln241_reg_2757 == 1'd0) & (io_acc_block_signal_op76 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln241_reg_2757 == 1'd0) & (io_acc_block_signal_op76 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln241_reg_2757 == 1'd0) & (io_acc_block_signal_op76 == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((1'd1 == and_ln191_6_reg_2766_pp0_iter1_reg) & (io_acc_block_signal_op455 == 1'b0));
end

always @ (*) begin
    ap_condition_2028 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln241_fu_370_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_2364 = ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln212_reg_2770 == 1'd0) & (icmp_ln241_reg_2757 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_440 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_440_p2 == 1'd1) & (icmp_ln241_fu_370_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_814 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_818 = ((icmp_ln212_reg_2770 == 1'd1) & (icmp_ln216_reg_2779 == 1'd0) & (icmp_ln241_reg_2757 == 1'd0));
end

always @ (*) begin
    ap_condition_825 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln212_fu_440_p2 == 1'd1) & (icmp_ln241_fu_370_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_359 = 32'd0;

assign ap_ready = internal_ap_ready;

assign icmp_ln1496_106_fu_1083_p2 = ((pool_window_2_V_fu_1054_p3 < pool_window_3_V_fu_1062_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_107_fu_1097_p2 = ((select_ln65_fu_1075_p3 < select_ln65_145_fu_1089_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_108_fu_1147_p2 = ((pool_window_2_V_80_fu_1118_p3 < pool_window_3_V_80_fu_1126_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_109_fu_1161_p2 = ((select_ln65_147_fu_1139_p3 < select_ln65_149_fu_1153_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_10_fu_1709_p2 = ((pool_window_0_V_98_fu_1679_p3 < pool_window_1_V_98_fu_1687_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_110_fu_1211_p2 = ((pool_window_2_V_82_fu_1182_p3 < pool_window_3_V_82_fu_1190_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_111_fu_1225_p2 = ((select_ln65_150_fu_1203_p3 < select_ln65_152_fu_1217_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_112_fu_1275_p2 = ((pool_window_2_V_84_fu_1246_p3 < pool_window_3_V_84_fu_1254_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_113_fu_1289_p2 = ((select_ln65_153_fu_1267_p3 < select_ln65_155_fu_1281_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_114_fu_1339_p2 = ((pool_window_2_V_86_fu_1310_p3 < pool_window_3_V_86_fu_1318_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_115_fu_1353_p2 = ((select_ln65_156_fu_1331_p3 < select_ln65_158_fu_1345_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_116_fu_1389_p2 = ((pool_window_0_V_88_fu_1359_p3 < pool_window_1_V_88_fu_1367_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_117_fu_1403_p2 = ((pool_window_2_V_88_fu_1374_p3 < pool_window_3_V_88_fu_1382_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_118_fu_1417_p2 = ((select_ln65_159_fu_1395_p3 < select_ln65_161_fu_1409_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_119_fu_1453_p2 = ((pool_window_0_V_90_fu_1423_p3 < pool_window_1_V_90_fu_1431_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_11_fu_1773_p2 = ((pool_window_0_V_100_fu_1743_p3 < pool_window_1_V_100_fu_1751_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_120_fu_1467_p2 = ((pool_window_2_V_90_fu_1438_p3 < pool_window_3_V_90_fu_1446_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_121_fu_1481_p2 = ((select_ln65_162_fu_1459_p3 < select_ln65_164_fu_1473_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_122_fu_1531_p2 = ((pool_window_2_V_92_fu_1502_p3 < pool_window_3_V_92_fu_1510_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_123_fu_1545_p2 = ((select_ln65_165_fu_1523_p3 < select_ln65_167_fu_1537_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_124_fu_1595_p2 = ((pool_window_2_V_94_fu_1566_p3 < pool_window_3_V_94_fu_1574_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_125_fu_1609_p2 = ((select_ln65_168_fu_1587_p3 < select_ln65_170_fu_1601_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_126_fu_1659_p2 = ((pool_window_2_V_96_fu_1630_p3 < pool_window_3_V_96_fu_1638_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_127_fu_1673_p2 = ((select_ln65_171_fu_1651_p3 < select_ln65_173_fu_1665_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_128_fu_1723_p2 = ((pool_window_2_V_98_fu_1694_p3 < pool_window_3_V_98_fu_1702_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_129_fu_1737_p2 = ((select_ln65_174_fu_1715_p3 < select_ln65_176_fu_1729_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_12_fu_1837_p2 = ((pool_window_0_V_102_fu_1807_p3 < pool_window_1_V_102_fu_1815_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_130_fu_1787_p2 = ((pool_window_2_V_100_fu_1758_p3 < pool_window_3_V_100_fu_1766_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_131_fu_1801_p2 = ((select_ln65_177_fu_1779_p3 < select_ln65_179_fu_1793_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_132_fu_1851_p2 = ((pool_window_2_V_102_fu_1822_p3 < pool_window_3_V_102_fu_1830_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_133_fu_1865_p2 = ((select_ln65_180_fu_1843_p3 < select_ln65_182_fu_1857_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_134_fu_1915_p2 = ((pool_window_2_V_104_fu_1886_p3 < pool_window_3_V_104_fu_1894_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_135_fu_1929_p2 = ((select_ln65_183_fu_1907_p3 < select_ln65_185_fu_1921_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_136_fu_1979_p2 = ((pool_window_2_V_106_fu_1950_p3 < pool_window_3_V_106_fu_1958_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_137_fu_1993_p2 = ((select_ln65_186_fu_1971_p3 < select_ln65_188_fu_1985_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_138_fu_2043_p2 = ((pool_window_2_V_108_fu_2014_p3 < pool_window_3_V_108_fu_2022_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_139_fu_2057_p2 = ((select_ln65_189_fu_2035_p3 < select_ln65_191_fu_2049_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_13_fu_1901_p2 = ((pool_window_0_V_104_fu_1871_p3 < pool_window_1_V_104_fu_1879_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_14_fu_1965_p2 = ((pool_window_0_V_106_fu_1935_p3 < pool_window_1_V_106_fu_1943_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_15_fu_2029_p2 = ((pool_window_0_V_108_fu_1999_p3 < pool_window_1_V_108_fu_2007_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_1_fu_1133_p2 = ((pool_window_0_V_80_fu_1103_p3 < pool_window_1_V_80_fu_1111_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_1197_p2 = ((pool_window_0_V_82_fu_1167_p3 < pool_window_1_V_82_fu_1175_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_1261_p2 = ((pool_window_0_V_84_fu_1231_p3 < pool_window_1_V_84_fu_1239_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_1325_p2 = ((pool_window_0_V_86_fu_1295_p3 < pool_window_1_V_86_fu_1303_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_1517_p2 = ((pool_window_0_V_92_fu_1487_p3 < pool_window_1_V_92_fu_1495_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_1581_p2 = ((pool_window_0_V_94_fu_1551_p3 < pool_window_1_V_94_fu_1559_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_1645_p2 = ((pool_window_0_V_96_fu_1615_p3 < pool_window_1_V_96_fu_1623_p3) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_1069_p2 = ((pool_window_0_V_fu_1039_p3 < pool_window_1_V_fu_1047_p3) ? 1'b1 : 1'b0);

assign icmp_ln191_7_fu_396_p2 = ((ap_sig_allocacmp_sY_2_load == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln191_8_fu_406_p2 = (($signed(pY_2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_9_fu_416_p2 = (($signed(pX_2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_386_p2 = ((sX_2 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_440_p2 = ((pX_2 == 32'd29) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_484_p2 = ((pY_2 == 32'd29) ? 1'b1 : 1'b0);

assign icmp_ln241_fu_370_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_352_p4 == 10'd900) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op455 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_15_V_full_n & res_V_data_14_V_full_n & res_V_data_13_V_full_n & res_V_data_12_V_full_n & res_V_data_11_V_full_n & res_V_data_10_V_full_n & res_V_data_0_V_full_n);

assign io_acc_block_signal_op76 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_15_V_empty_n & data_V_data_14_V_empty_n & data_V_data_13_V_empty_n & data_V_data_12_V_empty_n & data_V_data_11_V_empty_n & data_V_data_10_V_empty_n & data_V_data_0_V_empty_n);

assign pool_window_0_V_100_fu_1743_p3 = {{kernel_data_V_3_27}, {4'd0}};

assign pool_window_0_V_102_fu_1807_p3 = {{kernel_data_V_3_28}, {4'd0}};

assign pool_window_0_V_104_fu_1871_p3 = {{kernel_data_V_3_29}, {4'd0}};

assign pool_window_0_V_106_fu_1935_p3 = {{kernel_data_V_3_30}, {4'd0}};

assign pool_window_0_V_108_fu_1999_p3 = {{kernel_data_V_3_31}, {4'd0}};

assign pool_window_0_V_80_fu_1103_p3 = {{kernel_data_V_3_17}, {4'd0}};

assign pool_window_0_V_82_fu_1167_p3 = {{kernel_data_V_3_18}, {4'd0}};

assign pool_window_0_V_84_fu_1231_p3 = {{kernel_data_V_3_19}, {4'd0}};

assign pool_window_0_V_86_fu_1295_p3 = {{kernel_data_V_3_20}, {4'd0}};

assign pool_window_0_V_88_fu_1359_p3 = {{kernel_data_V_3_21}, {4'd0}};

assign pool_window_0_V_90_fu_1423_p3 = {{kernel_data_V_3_22}, {4'd0}};

assign pool_window_0_V_92_fu_1487_p3 = {{kernel_data_V_3_23}, {4'd0}};

assign pool_window_0_V_94_fu_1551_p3 = {{kernel_data_V_3_24}, {4'd0}};

assign pool_window_0_V_96_fu_1615_p3 = {{kernel_data_V_3_25}, {4'd0}};

assign pool_window_0_V_98_fu_1679_p3 = {{kernel_data_V_3_26}, {4'd0}};

assign pool_window_0_V_fu_1039_p3 = {{kernel_data_V_3_16}, {4'd0}};

assign pool_window_1_V_100_fu_1751_p3 = {{DataOut_V_259_reg_2950}, {4'd0}};

assign pool_window_1_V_102_fu_1815_p3 = {{DataOut_V_260_reg_2956}, {4'd0}};

assign pool_window_1_V_104_fu_1879_p3 = {{DataOut_V_261_reg_2962}, {4'd0}};

assign pool_window_1_V_106_fu_1943_p3 = {{DataOut_V_262_reg_2968}, {4'd0}};

assign pool_window_1_V_108_fu_2007_p3 = {{DataOut_V_reg_2974}, {4'd0}};

assign pool_window_1_V_80_fu_1111_p3 = {{DataOut_V_249_reg_2890}, {4'd0}};

assign pool_window_1_V_82_fu_1175_p3 = {{DataOut_V_250_reg_2896}, {4'd0}};

assign pool_window_1_V_84_fu_1239_p3 = {{DataOut_V_251_reg_2902}, {4'd0}};

assign pool_window_1_V_86_fu_1303_p3 = {{DataOut_V_252_reg_2908}, {4'd0}};

assign pool_window_1_V_88_fu_1367_p3 = {{DataOut_V_253_reg_2914}, {4'd0}};

assign pool_window_1_V_90_fu_1431_p3 = {{DataOut_V_254_reg_2920}, {4'd0}};

assign pool_window_1_V_92_fu_1495_p3 = {{DataOut_V_255_reg_2926}, {4'd0}};

assign pool_window_1_V_94_fu_1559_p3 = {{DataOut_V_256_reg_2932}, {4'd0}};

assign pool_window_1_V_96_fu_1623_p3 = {{DataOut_V_257_reg_2938}, {4'd0}};

assign pool_window_1_V_98_fu_1687_p3 = {{DataOut_V_258_reg_2944}, {4'd0}};

assign pool_window_1_V_fu_1047_p3 = {{DataOut_V_248_reg_2884}, {4'd0}};

assign pool_window_2_V_100_fu_1758_p3 = {{kernel_data_V_3_59}, {4'd0}};

assign pool_window_2_V_102_fu_1822_p3 = {{kernel_data_V_3_60}, {4'd0}};

assign pool_window_2_V_104_fu_1886_p3 = {{kernel_data_V_3_61}, {4'd0}};

assign pool_window_2_V_106_fu_1950_p3 = {{kernel_data_V_3_62}, {4'd0}};

assign pool_window_2_V_108_fu_2014_p3 = {{kernel_data_V_3_63}, {4'd0}};

assign pool_window_2_V_80_fu_1118_p3 = {{kernel_data_V_3_49}, {4'd0}};

assign pool_window_2_V_82_fu_1182_p3 = {{kernel_data_V_3_50}, {4'd0}};

assign pool_window_2_V_84_fu_1246_p3 = {{kernel_data_V_3_51}, {4'd0}};

assign pool_window_2_V_86_fu_1310_p3 = {{kernel_data_V_3_52}, {4'd0}};

assign pool_window_2_V_88_fu_1374_p3 = {{kernel_data_V_3_53}, {4'd0}};

assign pool_window_2_V_90_fu_1438_p3 = {{kernel_data_V_3_54}, {4'd0}};

assign pool_window_2_V_92_fu_1502_p3 = {{kernel_data_V_3_55}, {4'd0}};

assign pool_window_2_V_94_fu_1566_p3 = {{kernel_data_V_3_56}, {4'd0}};

assign pool_window_2_V_96_fu_1630_p3 = {{kernel_data_V_3_57}, {4'd0}};

assign pool_window_2_V_98_fu_1694_p3 = {{kernel_data_V_3_58}, {4'd0}};

assign pool_window_2_V_fu_1054_p3 = {{kernel_data_V_3_48}, {4'd0}};

assign pool_window_3_V_100_fu_1766_p3 = {{shift_buffer_1_11_V_reg_2854}, {4'd0}};

assign pool_window_3_V_102_fu_1830_p3 = {{shift_buffer_1_12_V_reg_2860}, {4'd0}};

assign pool_window_3_V_104_fu_1894_p3 = {{shift_buffer_1_13_V_reg_2866}, {4'd0}};

assign pool_window_3_V_106_fu_1958_p3 = {{shift_buffer_1_14_V_reg_2872}, {4'd0}};

assign pool_window_3_V_108_fu_2022_p3 = {{shift_buffer_1_15_V_reg_2878}, {4'd0}};

assign pool_window_3_V_80_fu_1126_p3 = {{shift_buffer_1_1_V_reg_2794}, {4'd0}};

assign pool_window_3_V_82_fu_1190_p3 = {{shift_buffer_1_2_V_reg_2800}, {4'd0}};

assign pool_window_3_V_84_fu_1254_p3 = {{shift_buffer_1_3_V_reg_2806}, {4'd0}};

assign pool_window_3_V_86_fu_1318_p3 = {{shift_buffer_1_4_V_reg_2812}, {4'd0}};

assign pool_window_3_V_88_fu_1382_p3 = {{shift_buffer_1_5_V_reg_2818}, {4'd0}};

assign pool_window_3_V_90_fu_1446_p3 = {{shift_buffer_1_6_V_reg_2824}, {4'd0}};

assign pool_window_3_V_92_fu_1510_p3 = {{shift_buffer_1_7_V_reg_2830}, {4'd0}};

assign pool_window_3_V_94_fu_1574_p3 = {{shift_buffer_1_8_V_reg_2836}, {4'd0}};

assign pool_window_3_V_96_fu_1638_p3 = {{shift_buffer_1_9_V_reg_2842}, {4'd0}};

assign pool_window_3_V_98_fu_1702_p3 = {{shift_buffer_1_10_V_reg_2848}, {4'd0}};

assign pool_window_3_V_fu_1062_p3 = {{shift_buffer_1_0_V_reg_2788}, {4'd0}};

assign res_V_data_0_V_din = tmp_data_0_V_reg_3540;

assign res_V_data_10_V_din = tmp_data_10_V_reg_3590;

assign res_V_data_11_V_din = tmp_data_11_V_reg_3595;

assign res_V_data_12_V_din = tmp_data_12_V_reg_3600;

assign res_V_data_13_V_din = tmp_data_13_V_reg_3605;

assign res_V_data_14_V_din = tmp_data_14_V_reg_3610;

assign res_V_data_15_V_din = tmp_data_15_V_reg_3615;

assign res_V_data_1_V_din = tmp_data_1_V_reg_3545;

assign res_V_data_2_V_din = tmp_data_2_V_reg_3550;

assign res_V_data_3_V_din = tmp_data_3_V_reg_3555;

assign res_V_data_4_V_din = tmp_data_4_V_reg_3560;

assign res_V_data_5_V_din = tmp_data_5_V_reg_3565;

assign res_V_data_6_V_din = tmp_data_6_V_reg_3570;

assign res_V_data_7_V_din = tmp_data_7_V_reg_3575;

assign res_V_data_8_V_din = tmp_data_8_V_reg_3580;

assign res_V_data_9_V_din = tmp_data_9_V_reg_3585;

assign select_ln222_fu_508_p3 = ((icmp_ln191_7_fu_396_p2[0:0] === 1'b1) ? 32'd0 : add_ln222_fu_502_p2);

assign select_ln227_fu_464_p3 = ((icmp_ln191_fu_386_p2[0:0] === 1'b1) ? 32'd0 : add_ln227_fu_458_p2);

assign select_ln65_145_fu_1089_p3 = ((icmp_ln1496_106_fu_1083_p2[0:0] === 1'b1) ? pool_window_3_V_fu_1062_p3 : pool_window_2_V_fu_1054_p3);

assign select_ln65_147_fu_1139_p3 = ((icmp_ln1496_1_fu_1133_p2[0:0] === 1'b1) ? pool_window_1_V_80_fu_1111_p3 : pool_window_0_V_80_fu_1103_p3);

assign select_ln65_149_fu_1153_p3 = ((icmp_ln1496_108_fu_1147_p2[0:0] === 1'b1) ? pool_window_3_V_80_fu_1126_p3 : pool_window_2_V_80_fu_1118_p3);

assign select_ln65_150_fu_1203_p3 = ((icmp_ln1496_2_fu_1197_p2[0:0] === 1'b1) ? pool_window_1_V_82_fu_1175_p3 : pool_window_0_V_82_fu_1167_p3);

assign select_ln65_152_fu_1217_p3 = ((icmp_ln1496_110_fu_1211_p2[0:0] === 1'b1) ? pool_window_3_V_82_fu_1190_p3 : pool_window_2_V_82_fu_1182_p3);

assign select_ln65_153_fu_1267_p3 = ((icmp_ln1496_3_fu_1261_p2[0:0] === 1'b1) ? pool_window_1_V_84_fu_1239_p3 : pool_window_0_V_84_fu_1231_p3);

assign select_ln65_155_fu_1281_p3 = ((icmp_ln1496_112_fu_1275_p2[0:0] === 1'b1) ? pool_window_3_V_84_fu_1254_p3 : pool_window_2_V_84_fu_1246_p3);

assign select_ln65_156_fu_1331_p3 = ((icmp_ln1496_4_fu_1325_p2[0:0] === 1'b1) ? pool_window_1_V_86_fu_1303_p3 : pool_window_0_V_86_fu_1295_p3);

assign select_ln65_158_fu_1345_p3 = ((icmp_ln1496_114_fu_1339_p2[0:0] === 1'b1) ? pool_window_3_V_86_fu_1318_p3 : pool_window_2_V_86_fu_1310_p3);

assign select_ln65_159_fu_1395_p3 = ((icmp_ln1496_116_fu_1389_p2[0:0] === 1'b1) ? pool_window_1_V_88_fu_1367_p3 : pool_window_0_V_88_fu_1359_p3);

assign select_ln65_161_fu_1409_p3 = ((icmp_ln1496_117_fu_1403_p2[0:0] === 1'b1) ? pool_window_3_V_88_fu_1382_p3 : pool_window_2_V_88_fu_1374_p3);

assign select_ln65_162_fu_1459_p3 = ((icmp_ln1496_119_fu_1453_p2[0:0] === 1'b1) ? pool_window_1_V_90_fu_1431_p3 : pool_window_0_V_90_fu_1423_p3);

assign select_ln65_163_fu_2081_p3 = ((icmp_ln1496_106_reg_3005[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_164_fu_1473_p3 = ((icmp_ln1496_120_fu_1467_p2[0:0] === 1'b1) ? pool_window_3_V_90_fu_1446_p3 : pool_window_2_V_90_fu_1438_p3);

assign select_ln65_165_fu_1523_p3 = ((icmp_ln1496_7_fu_1517_p2[0:0] === 1'b1) ? pool_window_1_V_92_fu_1495_p3 : pool_window_0_V_92_fu_1487_p3);

assign select_ln65_167_fu_1537_p3 = ((icmp_ln1496_122_fu_1531_p2[0:0] === 1'b1) ? pool_window_3_V_92_fu_1510_p3 : pool_window_2_V_92_fu_1502_p3);

assign select_ln65_168_fu_1587_p3 = ((icmp_ln1496_8_fu_1581_p2[0:0] === 1'b1) ? pool_window_1_V_94_fu_1559_p3 : pool_window_0_V_94_fu_1551_p3);

assign select_ln65_169_fu_2124_p3 = ((icmp_ln1496_108_reg_3040[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_170_fu_1601_p3 = ((icmp_ln1496_124_fu_1595_p2[0:0] === 1'b1) ? pool_window_3_V_94_fu_1574_p3 : pool_window_2_V_94_fu_1566_p3);

assign select_ln65_171_fu_1651_p3 = ((icmp_ln1496_9_fu_1645_p2[0:0] === 1'b1) ? pool_window_1_V_96_fu_1623_p3 : pool_window_0_V_96_fu_1615_p3);

assign select_ln65_173_fu_1665_p3 = ((icmp_ln1496_126_fu_1659_p2[0:0] === 1'b1) ? pool_window_3_V_96_fu_1638_p3 : pool_window_2_V_96_fu_1630_p3);

assign select_ln65_174_fu_1715_p3 = ((icmp_ln1496_10_fu_1709_p2[0:0] === 1'b1) ? pool_window_1_V_98_fu_1687_p3 : pool_window_0_V_98_fu_1679_p3);

assign select_ln65_175_fu_2167_p3 = ((icmp_ln1496_110_reg_3075[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_176_fu_1729_p3 = ((icmp_ln1496_128_fu_1723_p2[0:0] === 1'b1) ? pool_window_3_V_98_fu_1702_p3 : pool_window_2_V_98_fu_1694_p3);

assign select_ln65_177_fu_1779_p3 = ((icmp_ln1496_11_fu_1773_p2[0:0] === 1'b1) ? pool_window_1_V_100_fu_1751_p3 : pool_window_0_V_100_fu_1743_p3);

assign select_ln65_179_fu_1793_p3 = ((icmp_ln1496_130_fu_1787_p2[0:0] === 1'b1) ? pool_window_3_V_100_fu_1766_p3 : pool_window_2_V_100_fu_1758_p3);

assign select_ln65_180_fu_1843_p3 = ((icmp_ln1496_12_fu_1837_p2[0:0] === 1'b1) ? pool_window_1_V_102_fu_1815_p3 : pool_window_0_V_102_fu_1807_p3);

assign select_ln65_181_fu_2210_p3 = ((icmp_ln1496_112_reg_3110[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_182_fu_1857_p3 = ((icmp_ln1496_132_fu_1851_p2[0:0] === 1'b1) ? pool_window_3_V_102_fu_1830_p3 : pool_window_2_V_102_fu_1822_p3);

assign select_ln65_183_fu_1907_p3 = ((icmp_ln1496_13_fu_1901_p2[0:0] === 1'b1) ? pool_window_1_V_104_fu_1879_p3 : pool_window_0_V_104_fu_1871_p3);

assign select_ln65_185_fu_1921_p3 = ((icmp_ln1496_134_fu_1915_p2[0:0] === 1'b1) ? pool_window_3_V_104_fu_1894_p3 : pool_window_2_V_104_fu_1886_p3);

assign select_ln65_186_fu_1971_p3 = ((icmp_ln1496_14_fu_1965_p2[0:0] === 1'b1) ? pool_window_1_V_106_fu_1943_p3 : pool_window_0_V_106_fu_1935_p3);

assign select_ln65_187_fu_2253_p3 = ((icmp_ln1496_114_reg_3145[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_188_fu_1985_p3 = ((icmp_ln1496_136_fu_1979_p2[0:0] === 1'b1) ? pool_window_3_V_106_fu_1958_p3 : pool_window_2_V_106_fu_1950_p3);

assign select_ln65_189_fu_2035_p3 = ((icmp_ln1496_15_fu_2029_p2[0:0] === 1'b1) ? pool_window_1_V_108_fu_2007_p3 : pool_window_0_V_108_fu_1999_p3);

assign select_ln65_191_fu_2049_p3 = ((icmp_ln1496_138_fu_2043_p2[0:0] === 1'b1) ? pool_window_3_V_108_fu_2022_p3 : pool_window_2_V_108_fu_2014_p3);

assign select_ln65_192_fu_2296_p3 = ((icmp_ln1496_117_reg_3180[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_194_fu_2339_p3 = ((icmp_ln1496_120_reg_3215[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_196_fu_2382_p3 = ((icmp_ln1496_122_reg_3250[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_198_fu_2425_p3 = ((icmp_ln1496_124_reg_3285[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_200_fu_2468_p3 = ((icmp_ln1496_126_reg_3320[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_202_fu_2511_p3 = ((icmp_ln1496_128_reg_3355[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_204_fu_2554_p3 = ((icmp_ln1496_130_reg_3390[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_206_fu_2597_p3 = ((icmp_ln1496_132_reg_3425[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_208_fu_2640_p3 = ((icmp_ln1496_134_reg_3460[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_210_fu_2683_p3 = ((icmp_ln1496_136_reg_3495[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_212_fu_2726_p3 = ((icmp_ln1496_138_reg_3530[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln65_fu_1075_p3 = ((icmp_ln1496_fu_1069_p2[0:0] === 1'b1) ? pool_window_1_V_fu_1047_p3 : pool_window_0_V_fu_1039_p3);

assign start_out = real_start;

assign tmp_data_0_V_fu_2098_p1 = pool_window_0_V_reg_2980;

assign tmp_data_0_V_fu_2098_p2 = pool_window_1_V_reg_2985;

assign tmp_data_0_V_fu_2098_p3 = pool_window_2_V_reg_2990;

assign tmp_data_0_V_fu_2098_p4 = pool_window_3_V_reg_2995;

assign tmp_data_0_V_fu_2098_p5 = ((icmp_ln1496_107_reg_3010[0:0] === 1'b1) ? select_ln65_163_fu_2081_p3 : zext_ln65_fu_2088_p1);

assign tmp_data_10_V_fu_2528_p1 = pool_window_0_V_98_reg_3330;

assign tmp_data_10_V_fu_2528_p2 = pool_window_1_V_98_reg_3335;

assign tmp_data_10_V_fu_2528_p3 = pool_window_2_V_98_reg_3340;

assign tmp_data_10_V_fu_2528_p4 = pool_window_3_V_98_reg_3345;

assign tmp_data_10_V_fu_2528_p5 = ((icmp_ln1496_129_reg_3360[0:0] === 1'b1) ? select_ln65_202_fu_2511_p3 : zext_ln65_48_fu_2518_p1);

assign tmp_data_11_V_fu_2571_p1 = pool_window_0_V_100_reg_3365;

assign tmp_data_11_V_fu_2571_p2 = pool_window_1_V_100_reg_3370;

assign tmp_data_11_V_fu_2571_p3 = pool_window_2_V_100_reg_3375;

assign tmp_data_11_V_fu_2571_p4 = pool_window_3_V_100_reg_3380;

assign tmp_data_11_V_fu_2571_p5 = ((icmp_ln1496_131_reg_3395[0:0] === 1'b1) ? select_ln65_204_fu_2554_p3 : zext_ln65_49_fu_2561_p1);

assign tmp_data_12_V_fu_2614_p1 = pool_window_0_V_102_reg_3400;

assign tmp_data_12_V_fu_2614_p2 = pool_window_1_V_102_reg_3405;

assign tmp_data_12_V_fu_2614_p3 = pool_window_2_V_102_reg_3410;

assign tmp_data_12_V_fu_2614_p4 = pool_window_3_V_102_reg_3415;

assign tmp_data_12_V_fu_2614_p5 = ((icmp_ln1496_133_reg_3430[0:0] === 1'b1) ? select_ln65_206_fu_2597_p3 : zext_ln65_50_fu_2604_p1);

assign tmp_data_13_V_fu_2657_p1 = pool_window_0_V_104_reg_3435;

assign tmp_data_13_V_fu_2657_p2 = pool_window_1_V_104_reg_3440;

assign tmp_data_13_V_fu_2657_p3 = pool_window_2_V_104_reg_3445;

assign tmp_data_13_V_fu_2657_p4 = pool_window_3_V_104_reg_3450;

assign tmp_data_13_V_fu_2657_p5 = ((icmp_ln1496_135_reg_3465[0:0] === 1'b1) ? select_ln65_208_fu_2640_p3 : zext_ln65_51_fu_2647_p1);

assign tmp_data_14_V_fu_2700_p1 = pool_window_0_V_106_reg_3470;

assign tmp_data_14_V_fu_2700_p2 = pool_window_1_V_106_reg_3475;

assign tmp_data_14_V_fu_2700_p3 = pool_window_2_V_106_reg_3480;

assign tmp_data_14_V_fu_2700_p4 = pool_window_3_V_106_reg_3485;

assign tmp_data_14_V_fu_2700_p5 = ((icmp_ln1496_137_reg_3500[0:0] === 1'b1) ? select_ln65_210_fu_2683_p3 : zext_ln65_52_fu_2690_p1);

assign tmp_data_15_V_fu_2743_p1 = pool_window_0_V_108_reg_3505;

assign tmp_data_15_V_fu_2743_p2 = pool_window_1_V_108_reg_3510;

assign tmp_data_15_V_fu_2743_p3 = pool_window_2_V_108_reg_3515;

assign tmp_data_15_V_fu_2743_p4 = pool_window_3_V_108_reg_3520;

assign tmp_data_15_V_fu_2743_p5 = ((icmp_ln1496_139_reg_3535[0:0] === 1'b1) ? select_ln65_212_fu_2726_p3 : zext_ln65_53_fu_2733_p1);

assign tmp_data_1_V_fu_2141_p1 = pool_window_0_V_80_reg_3015;

assign tmp_data_1_V_fu_2141_p2 = pool_window_1_V_80_reg_3020;

assign tmp_data_1_V_fu_2141_p3 = pool_window_2_V_80_reg_3025;

assign tmp_data_1_V_fu_2141_p4 = pool_window_3_V_80_reg_3030;

assign tmp_data_1_V_fu_2141_p5 = ((icmp_ln1496_109_reg_3045[0:0] === 1'b1) ? select_ln65_169_fu_2124_p3 : zext_ln65_39_fu_2131_p1);

assign tmp_data_2_V_fu_2184_p1 = pool_window_0_V_82_reg_3050;

assign tmp_data_2_V_fu_2184_p2 = pool_window_1_V_82_reg_3055;

assign tmp_data_2_V_fu_2184_p3 = pool_window_2_V_82_reg_3060;

assign tmp_data_2_V_fu_2184_p4 = pool_window_3_V_82_reg_3065;

assign tmp_data_2_V_fu_2184_p5 = ((icmp_ln1496_111_reg_3080[0:0] === 1'b1) ? select_ln65_175_fu_2167_p3 : zext_ln65_40_fu_2174_p1);

assign tmp_data_3_V_fu_2227_p1 = pool_window_0_V_84_reg_3085;

assign tmp_data_3_V_fu_2227_p2 = pool_window_1_V_84_reg_3090;

assign tmp_data_3_V_fu_2227_p3 = pool_window_2_V_84_reg_3095;

assign tmp_data_3_V_fu_2227_p4 = pool_window_3_V_84_reg_3100;

assign tmp_data_3_V_fu_2227_p5 = ((icmp_ln1496_113_reg_3115[0:0] === 1'b1) ? select_ln65_181_fu_2210_p3 : zext_ln65_41_fu_2217_p1);

assign tmp_data_4_V_fu_2270_p1 = pool_window_0_V_86_reg_3120;

assign tmp_data_4_V_fu_2270_p2 = pool_window_1_V_86_reg_3125;

assign tmp_data_4_V_fu_2270_p3 = pool_window_2_V_86_reg_3130;

assign tmp_data_4_V_fu_2270_p4 = pool_window_3_V_86_reg_3135;

assign tmp_data_4_V_fu_2270_p5 = ((icmp_ln1496_115_reg_3150[0:0] === 1'b1) ? select_ln65_187_fu_2253_p3 : zext_ln65_42_fu_2260_p1);

assign tmp_data_5_V_fu_2313_p1 = pool_window_0_V_88_reg_3155;

assign tmp_data_5_V_fu_2313_p2 = pool_window_1_V_88_reg_3160;

assign tmp_data_5_V_fu_2313_p3 = pool_window_2_V_88_reg_3165;

assign tmp_data_5_V_fu_2313_p4 = pool_window_3_V_88_reg_3170;

assign tmp_data_5_V_fu_2313_p5 = ((icmp_ln1496_118_reg_3185[0:0] === 1'b1) ? select_ln65_192_fu_2296_p3 : zext_ln65_43_fu_2303_p1);

assign tmp_data_6_V_fu_2356_p1 = pool_window_0_V_90_reg_3190;

assign tmp_data_6_V_fu_2356_p2 = pool_window_1_V_90_reg_3195;

assign tmp_data_6_V_fu_2356_p3 = pool_window_2_V_90_reg_3200;

assign tmp_data_6_V_fu_2356_p4 = pool_window_3_V_90_reg_3205;

assign tmp_data_6_V_fu_2356_p5 = ((icmp_ln1496_121_reg_3220[0:0] === 1'b1) ? select_ln65_194_fu_2339_p3 : zext_ln65_44_fu_2346_p1);

assign tmp_data_7_V_fu_2399_p1 = pool_window_0_V_92_reg_3225;

assign tmp_data_7_V_fu_2399_p2 = pool_window_1_V_92_reg_3230;

assign tmp_data_7_V_fu_2399_p3 = pool_window_2_V_92_reg_3235;

assign tmp_data_7_V_fu_2399_p4 = pool_window_3_V_92_reg_3240;

assign tmp_data_7_V_fu_2399_p5 = ((icmp_ln1496_123_reg_3255[0:0] === 1'b1) ? select_ln65_196_fu_2382_p3 : zext_ln65_45_fu_2389_p1);

assign tmp_data_8_V_fu_2442_p1 = pool_window_0_V_94_reg_3260;

assign tmp_data_8_V_fu_2442_p2 = pool_window_1_V_94_reg_3265;

assign tmp_data_8_V_fu_2442_p3 = pool_window_2_V_94_reg_3270;

assign tmp_data_8_V_fu_2442_p4 = pool_window_3_V_94_reg_3275;

assign tmp_data_8_V_fu_2442_p5 = ((icmp_ln1496_125_reg_3290[0:0] === 1'b1) ? select_ln65_198_fu_2425_p3 : zext_ln65_46_fu_2432_p1);

assign tmp_data_9_V_fu_2485_p1 = pool_window_0_V_96_reg_3295;

assign tmp_data_9_V_fu_2485_p2 = pool_window_1_V_96_reg_3300;

assign tmp_data_9_V_fu_2485_p3 = pool_window_2_V_96_reg_3305;

assign tmp_data_9_V_fu_2485_p4 = pool_window_3_V_96_reg_3310;

assign tmp_data_9_V_fu_2485_p5 = ((icmp_ln1496_127_reg_3325[0:0] === 1'b1) ? select_ln65_200_fu_2468_p3 : zext_ln65_47_fu_2475_p1);

assign zext_ln65_39_fu_2131_p1 = icmp_ln1496_1_reg_3035;

assign zext_ln65_40_fu_2174_p1 = icmp_ln1496_2_reg_3070;

assign zext_ln65_41_fu_2217_p1 = icmp_ln1496_3_reg_3105;

assign zext_ln65_42_fu_2260_p1 = icmp_ln1496_4_reg_3140;

assign zext_ln65_43_fu_2303_p1 = icmp_ln1496_116_reg_3175;

assign zext_ln65_44_fu_2346_p1 = icmp_ln1496_119_reg_3210;

assign zext_ln65_45_fu_2389_p1 = icmp_ln1496_7_reg_3245;

assign zext_ln65_46_fu_2432_p1 = icmp_ln1496_8_reg_3280;

assign zext_ln65_47_fu_2475_p1 = icmp_ln1496_9_reg_3315;

assign zext_ln65_48_fu_2518_p1 = icmp_ln1496_10_reg_3350;

assign zext_ln65_49_fu_2561_p1 = icmp_ln1496_11_reg_3385;

assign zext_ln65_50_fu_2604_p1 = icmp_ln1496_12_reg_3420;

assign zext_ln65_51_fu_2647_p1 = icmp_ln1496_13_reg_3455;

assign zext_ln65_52_fu_2690_p1 = icmp_ln1496_14_reg_3490;

assign zext_ln65_53_fu_2733_p1 = icmp_ln1496_15_reg_3525;

assign zext_ln65_fu_2088_p1 = icmp_ln1496_reg_3000;

always @ (posedge ap_clk) begin
    pool_window_0_V_reg_2980[3:0] <= 4'b0000;
    pool_window_1_V_reg_2985[3:0] <= 4'b0000;
    pool_window_2_V_reg_2990[3:0] <= 4'b0000;
    pool_window_3_V_reg_2995[3:0] <= 4'b0000;
    pool_window_0_V_80_reg_3015[3:0] <= 4'b0000;
    pool_window_1_V_80_reg_3020[3:0] <= 4'b0000;
    pool_window_2_V_80_reg_3025[3:0] <= 4'b0000;
    pool_window_3_V_80_reg_3030[3:0] <= 4'b0000;
    pool_window_0_V_82_reg_3050[3:0] <= 4'b0000;
    pool_window_1_V_82_reg_3055[3:0] <= 4'b0000;
    pool_window_2_V_82_reg_3060[3:0] <= 4'b0000;
    pool_window_3_V_82_reg_3065[3:0] <= 4'b0000;
    pool_window_0_V_84_reg_3085[3:0] <= 4'b0000;
    pool_window_1_V_84_reg_3090[3:0] <= 4'b0000;
    pool_window_2_V_84_reg_3095[3:0] <= 4'b0000;
    pool_window_3_V_84_reg_3100[3:0] <= 4'b0000;
    pool_window_0_V_86_reg_3120[3:0] <= 4'b0000;
    pool_window_1_V_86_reg_3125[3:0] <= 4'b0000;
    pool_window_2_V_86_reg_3130[3:0] <= 4'b0000;
    pool_window_3_V_86_reg_3135[3:0] <= 4'b0000;
    pool_window_0_V_88_reg_3155[3:0] <= 4'b0000;
    pool_window_1_V_88_reg_3160[3:0] <= 4'b0000;
    pool_window_2_V_88_reg_3165[3:0] <= 4'b0000;
    pool_window_3_V_88_reg_3170[3:0] <= 4'b0000;
    pool_window_0_V_90_reg_3190[3:0] <= 4'b0000;
    pool_window_1_V_90_reg_3195[3:0] <= 4'b0000;
    pool_window_2_V_90_reg_3200[3:0] <= 4'b0000;
    pool_window_3_V_90_reg_3205[3:0] <= 4'b0000;
    pool_window_0_V_92_reg_3225[3:0] <= 4'b0000;
    pool_window_1_V_92_reg_3230[3:0] <= 4'b0000;
    pool_window_2_V_92_reg_3235[3:0] <= 4'b0000;
    pool_window_3_V_92_reg_3240[3:0] <= 4'b0000;
    pool_window_0_V_94_reg_3260[3:0] <= 4'b0000;
    pool_window_1_V_94_reg_3265[3:0] <= 4'b0000;
    pool_window_2_V_94_reg_3270[3:0] <= 4'b0000;
    pool_window_3_V_94_reg_3275[3:0] <= 4'b0000;
    pool_window_0_V_96_reg_3295[3:0] <= 4'b0000;
    pool_window_1_V_96_reg_3300[3:0] <= 4'b0000;
    pool_window_2_V_96_reg_3305[3:0] <= 4'b0000;
    pool_window_3_V_96_reg_3310[3:0] <= 4'b0000;
    pool_window_0_V_98_reg_3330[3:0] <= 4'b0000;
    pool_window_1_V_98_reg_3335[3:0] <= 4'b0000;
    pool_window_2_V_98_reg_3340[3:0] <= 4'b0000;
    pool_window_3_V_98_reg_3345[3:0] <= 4'b0000;
    pool_window_0_V_100_reg_3365[3:0] <= 4'b0000;
    pool_window_1_V_100_reg_3370[3:0] <= 4'b0000;
    pool_window_2_V_100_reg_3375[3:0] <= 4'b0000;
    pool_window_3_V_100_reg_3380[3:0] <= 4'b0000;
    pool_window_0_V_102_reg_3400[3:0] <= 4'b0000;
    pool_window_1_V_102_reg_3405[3:0] <= 4'b0000;
    pool_window_2_V_102_reg_3410[3:0] <= 4'b0000;
    pool_window_3_V_102_reg_3415[3:0] <= 4'b0000;
    pool_window_0_V_104_reg_3435[3:0] <= 4'b0000;
    pool_window_1_V_104_reg_3440[3:0] <= 4'b0000;
    pool_window_2_V_104_reg_3445[3:0] <= 4'b0000;
    pool_window_3_V_104_reg_3450[3:0] <= 4'b0000;
    pool_window_0_V_106_reg_3470[3:0] <= 4'b0000;
    pool_window_1_V_106_reg_3475[3:0] <= 4'b0000;
    pool_window_2_V_106_reg_3480[3:0] <= 4'b0000;
    pool_window_3_V_106_reg_3485[3:0] <= 4'b0000;
    pool_window_0_V_108_reg_3505[3:0] <= 4'b0000;
    pool_window_1_V_108_reg_3510[3:0] <= 4'b0000;
    pool_window_2_V_108_reg_3515[3:0] <= 4'b0000;
    pool_window_3_V_108_reg_3520[3:0] <= 4'b0000;
end

endmodule //pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_16u_config5_s
